{"version":3,"sources":["webpack:///./node_modules/overlayscrollbars/js/OverlayScrollbars.js","webpack:///src/components/common/scroll-bar/scroll-bar.vue","webpack:///./src/components/common/scroll-bar/scroll-bar.vue?f5bd","webpack:///./src/components/common/scroll-bar/scroll-bar.vue"],"names":["__WEBPACK_AMD_DEFINE_RESULT__","global","factory","window","this","document","undefined","_easingsMath","_targets","PLUGINNAME","TYPES","o","f","a","s","b","n","u","z","LEXICON","c","i","l","p","oH","cH","sH","oW","cW","sW","COMPATIBILITY","wW","innerWidth","documentElement","body","wH","innerHeight","mO","MutationObserver","WebKitMutationObserver","WebkitMutationObserver","MozMutationObserver","rO","ResizeObserver","WebKitResizeObserver","WebkitResizeObserver","MozResizeObserver","rAF","requestAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","func","setTimeout","cAF","cancelAnimationFrame","webkitCancelAnimationFrame","mozCancelAnimationFrame","oCancelAnimationFrame","msCancelAnimationFrame","id","clearTimeout","now","Date","getTime","stpP","event","stopPropagation","cancelBubble","prvD","preventDefault","cancelable","returnValue","page","eventDoc","originalEvent","target","srcElement","ownerDocument","doc","touches","touch","x","y","scrollLeft","clientLeft","scrollTop","clientTop","mBtn","button","which","inA","item","arr","e","isA","def","Array","isArray","type","obj","Object","toString","call","replace","toLowerCase","bind","thisObj","proto","aArgs","slice","arguments","fNOP","fBound","apply","concat","MATH","Math","JQUERY","jQuery","EASING","PI","cos","sin","w","pow","t","sqrt","asin","abs","swing","d","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","FRAMEWORK","_rnothtmlwhite","_strSpace","_strScrollLeft","_strScrollTop","_animations","_type","_cssNumber","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","lineHeight","opacity","order","orphans","widows","zIndex","zoom","extend","src","copyIsArray","copy","name","options","clone","length","deep","FakejQuery","isPlainObject","inArray","fromIndex","isFunction","isEmptyObject","key","hasOwnProperty","hasOwnConstructor","hasIsPrototypeOf","constructor","each","callback","isArrayLike","selector","elms","el","base","elements","charAt","createElement","innerHTML","children","querySelectorAll","push","stripAndCollapse","value","match","join","matches","elem","nodeList","parentNode","insertAdjacentElement","strategy","child","insertAdjacentHTML","nodeType","setCSSVal","prop","val","parseCSSVal","startNextAnimationInQ","animObj","removeFromQ","index","nextAnim","q","splice","animate","props","duration","easing","complete","setAnimationValue","guaranteedNext","progress","step","specialEasing","hasOptions","from","to","start","css","timeNow","end","percent","fromVal","toVal","easedVal","timeStart","frame","elapsed","qPos","qObj","stop","max","parseFloat","pos","speacialEasing","startTime","on","eventName","handler","eventNameLength","addEventListener","detachEvent","attachEvent","off","removeEventListener","one","oneEventName","oneHandler","trigger","createEvent","initEvent","dispatchEvent","fireEvent","append","prepend","before","after","remove","removeChild","unwrap","parent","parents","firstChild","insertBefore","wrapAll","wrapperHTML","wrapper","deepest","previousSibling","childNodes","appendChild","nextSibling","wrapInner","contents","wrap","styles","cptStyle","getCptStyle","getComputedStyle","currentStyle","getPropertyValue","hasClass","className","classList","classNamePrepared","contains","indexOf","addClass","classes","cur","curValue","clazz","finalValue","supportClassList","elmClassList","v","add","removeClass","hide","display","show","attr","attrName","getAttribute","setAttribute","removeAttr","removeAttribute","offset","rect","getBoundingClientRect","pageXOffset","pageYOffset","top","left","position","offsetTop","offsetLeft","first","eq","last","find","ch","is","getClientRects","childs","clearQ","jump","jumpToEnd","INSTANCES","instance","argLen","PLUGIN","_pluginsGlobals","_pluginsAutoUpdateLoop","possibleTemplateTypes","classNameAllowedValues","numberAllowedValues","booleanNullAllowedValues","booleanTrueTemplate","booleanFalseTemplate","callbackTemplate","optionsDefaultsAndTemplate","convert","_pluginsExtensions","_pluginsOptions","resize","sizeAutoCapable","clipAlways","normalizeRTL","paddingAbsolute","autoUpdate","autoUpdateInterval","nativeScrollbarsOverlaid","showNativeScrollbars","initialize","overflowBehavior","scrollbars","visibility","autoHide","autoHideDelay","dragScrolling","clickScrolling","touchSupport","textarea","dynWidth","dynHeight","inheritedAttrs","callbacks","onInitialized","onInitializationWithdrawn","onDestroyed","onScrollStart","onScroll","onScrollStop","onOverflowChanged","onOverflowAmountChanged","onDirectionChanged","onContentSizeChanged","onHostSizeChanged","onUpdated","template","recursive","valType","writeErrors","usePreparedValues","keepForeignProps","validatedOptions","objectCopy","checkObjectProps","data","prevPropName","restrictedStringValuesSplit","restrictedStringValuesPossibilitiesSplit","isRestrictedValue","mainPossibility","currType","j","isValid","templateValue","templateValueType","templateIsComplext","templateTypes","dataValue","dataValueType","propPrefix","error","errorPossibleTypes","errorRestrictedStrings","split","console","warn","toUpperCase","JSON","stringify","initOverlayScrollbarsStatics","defaultOptions","_base","bodyElement","scrollbarDummyElement","scrollbarDummyElement0","dummyContainerChild","nativeScrollbarSize","calcNativeScrollbarSize","nativeScrollbarIsOverlaid","detectCSSFeature","featurename","feature","domPrefixes","elm","featurenameCapital","substr","measureElement","autoUpdateLoop","autoUpdateRecommended","nativeScrollbarStyling","overlayScrollbarDummySize","msie","ua","navigator","userAgent","trident","edge","rv","parseIntFunc","parseInt","result","cssCalc","dummy","cssText","restrictedMeasuring","scrollSize","h","scrollSize2","rtlScrollBehavior","overflow-y","overflow-x","direction","dummyContainerOffset","dummyContainerChildOffset","dummyContainerScrollOffsetAfterScroll","supportTransform","supportTransition","supportPassiveEvents","supportsPassive","defineProperty","get","supportResizeObserver","supportMutationObserver","windowWidth","windowHeight","windowDpr","getWindowDPR","newW","newH","deltaW","deltaH","newScrollbarSize","deltaWRatio","round","deltaHRatio","absDeltaW","absDeltaH","absDeltaWRatio","absDeltaHRatio","newDPR","deltaIsBigger","difference","valTwo","absValOne","absValTwo","dprChanged","isZoom","oldScrollbarSize","update","dDPI","screen","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","globals","_loopID","_strLength","_loopingInstances","_loopingInstancesIntervalCache","_loopIsActive","_loopInterval","_loopTimeOld","loop","timeNew","timeDelta","lowestInterval","instanceOptions","instanceAutoUpdateAllowed","instanceAutoUpdateInterval","min","OverlayScrollbarsInstance","pluginTargetElement","extensions","isHTMLElement","inst","_nativeScrollbarIsOverlaid","_overlayScrollbarDummySize","_rtlScrollBehavior","_autoUpdateRecommended","_msieVersion","_nativeScrollbarStyling","_cssCalc","_nativeScrollbarSize","_supportTransition","_supportTransform","_supportPassiveEvents","_supportResizeObserver","_supportMutationObserver","_restrictedMeasuring","_initialized","_destroyed","_isTextarea","_isBody","_documentMixed","_isTextareaHostGenerated","_isBorderBox","_sizeAutoObserverAdded","_paddingX","_paddingY","_borderX","_borderY","_marginX","_marginY","_isRTL","_isSleeping","_defaultOptions","_currentOptions","_currentPreparedOptions","_lastUpdateTime","_swallowedUpdateTimeout","_windowElement","_documentElement","_htmlElement","_bodyElement","_targetElement","_hostElement","_sizeAutoObserverElement","_sizeObserverElement","_contentGlueElement","_paddingElement","_viewportElement","_contentArrangeElement","_contentElement","_textareaCoverElement","_scrollbarCornerElement","_scrollbarHorizontalElement","_scrollbarHorizontalTrackElement","_scrollbarHorizontalHandleElement","_scrollbarVerticalElement","_scrollbarVerticalTrackElement","_scrollbarVerticalHandleElement","_hostSizeCache","_contentScrollSizeCache","_arrangeContentSizeCache","_hasOverflowCache","_hideOverflowCache","_widthAutoCache","_heightAutoCache","_cssMaxValueCache","_cssBoxSizingCache","_cssPaddingCache","_cssBorderCache","_cssMarginCache","_cssDirectionCache","_cssDirectionDetectedCache","_paddingAbsoluteCache","_clipAlwaysCache","_contentGlueSizeCache","_overflowBehaviorCache","_overflowAmountCache","_ignoreOverlayScrollbarHidingCache","_autoUpdateCache","_sizeAutoCapableCache","_textareaAutoWrappingCache","_textareaInfoCache","_updateAutoHostElementIdCache","_updateAutoHostElementClassCache","_updateAutoHostElementStyleCache","_updateAutoHostElementVisibleCache","_updateAutoTargetElementRowsCache","_updateAutoTargetElementColsCache","_updateAutoTargetElementWrapCache","_contentElementScrollSizeChangeDetectedCache","_hostElementSizeChangeDetectedCache","_scrollbarsVisibilityCache","_scrollbarsAutoHideCache","_scrollbarsClickScrollingCache","_scrollbarsDragScrollingCache","_resizeCache","_normalizeRTLCache","_classNameCache","_oldClassName","_textareaDynHeightCache","_textareaDynWidthCache","_bodyMinSizeCache","_viewportScrollSizeCache","_displayIsHiddenCache","_mutationObserverHost","_mutationObserverContent","_mutationObserversConnected","_textareaEvents","_textareaHasFocus","_scrollbarsAutoHideTimeoutId","_scrollbarsAutoHideMoveTimeoutId","_scrollbarsAutoHideDelay","_scrollbarsAutoHideNever","_scrollbarsAutoHideScroll","_scrollbarsAutoHideMove","_scrollbarsAutoHideLeave","_scrollbarsTouchSupport","_scrollbarsAutoHideFlagScrollAndHovered","_resizeReconnectMutationObserver","_resizeNone","_resizeBoth","_resizeHorizontal","_resizeVertical","_resizeOnMouseTouchDown","_frameworkProto","_contentBorderSize","_scrollHorizontalInfo","_scrollVerticalInfo","_viewportSize","_nativeScrollbarMinSize","_strMarginMinus","_strPaddingMinus","_strBorderMinus","_strTop","_strRight","_strBottom","_strLeft","_strMinMinus","_strMaxMinus","_strWidth","_strHeight","_strFloat","_strEmpty","_strAuto","_strScroll","_strHundredPercent","_strX","_strY","_strDot","_strMouseTouchDownEvent","_strMouseTouchUpEvent","_strMouseTouchMoveEvent","_strMouseTouchEnter","_strMouseTouchLeave","_strKeyDownEvent","_strKeyUpEvent","_strSelectStartEvent","_strTransitionEndEvent","_strResizeObserverProperty","_classNameHTMLElement","_cassNamesPrefix","_classNameHostElement","_classNameHostTextareaElement","_classNameHostScrollbarHorizontalHidden","_classNameHostScrollbarVerticalHidden","_classNameHostTransition","_classNameHostRTL","_classNameHostResizeDisabled","_classNameHostScrolling","_classNameHostOverflow","_classNameHostOverflowX","_classNameHostOverflowY","_classNameTextareaElement","_classNameTextareaCoverElement","_classNamePaddingElement","_classNameViewportElement","_classNameViewportNativeScrollbarsInvisible","_classNameViewportNativeScrollbarsOverlaid","_classNameContentElement","_classNameContentArrangeElement","_classNameContentGlueElement","_classNameSizeAutoObserverElement","_classNameResizeObserverElement","_classNameResizeObserverItemElement","_classNameResizeObserverItemFinalElement","_classNameTextInherit","_classNameScrollbar","_classNameScrollbarTrack","_classNameScrollbarTrackOff","_classNameScrollbarHandle","_classNameScrollbarHandleOff","_classNameScrollbarUnusable","_classNameScrollbarAutoHidden","_classNameScrollbarCorner","_classNameScrollbarCornerResize","_classNameScrollbarCornerResizeB","_classNameScrollbarCornerResizeH","_classNameScrollbarCornerResizeV","_classNameScrollbarHorizontal","_classNameScrollbarVertical","_classNameDragging","_classNameThemeNone","_callbacksInitQeueue","_extensions","_swallowedUpdateParams","_swallowUpdateLag","_imgs","sleep","force","attrsChanged","contentSizeC","isString","isPlus","hostElementId","hostElementIdChanged","checkCacheSingle","hostElementClass","hostElementClassChanged","hostElementStyle","hostElementStyleChanged","hostElementVisible","hostElementVisibleChanged","targetElementRows","targetElementRowsChanged","targetElementCols","targetElementColsChanged","targetElementWrap","targetElementWrapChanged","hostClassNamesChanged","meaningfulAttrsChanged","float","textareaValueLength","setCSS","viewportScrollSize","contentElementScrollSize","getContentMeasureElement","bodyMinSizeC","bodyMinSizeChanged","changed","checkCacheDouble","viewportScrollSizeChanged","updateAutoContentSizeChanged","imgOnLoad","newOptions","option","path","splits","splitsLength","extendObj","extendObjRoot","setObjectPropVal","setOptions","getObjectPropVal","isSleepingTmp","destroy","extName","disconnectMutationObservers","removeResizeObserver","removeExt","setupHostMouseTouchEvents","setupStructureEvents","setupScrollbarsDOM","setupScrollbarCornerDOM","setupStructureDOM","property","dispatchCallback","scroll","coordinates","infoX","infoY","normalizeInvert","normalizeNegate","scrollX","cs","scrollXRatio","csr","maxScrollX","ms","ratio","handleOffset","ho","handleLength","hl","handleLengthRatio","hlr","trackLength","tl","isRTL","isRTLNormalized","doScrollLeft","doScrollTop","animationOptions","settingsAxis","settingsScroll","settingsBlock","settingsMargin","finalElement","coordinatesXAxisProps","coordinatesYAxisProps","coordinatesOperators","durationIsObject","completeCallback","finalScroll","strLength","elementObjSettingsAxisValues","elementObjSettingsBlockValues","elementObjSettingsScrollValues","coordinatesIsElementObj","possibleElement","possibleElementIsJQuery","possibleElementIsHTMLElement","proxyCompleteCallback","refreshScrollbarHandleOffset","checkSettingsStringValue","currValue","allowedValues","getRawScroll","isX","coordinateProps","getFinalScroll","rawScroll","operator","amount","scrollInfo","currScroll","maxScroll","isRTLisX","normalizeShortcuts","evalFunc","eval","possibleOperator","parseToZeroOrNumber","toFixed","isNaN","normalizeIsRTLisX","operatorCurrScroll","invert","negate","getPerAxisValue","valueInternalType","defaultValue","valueArrLength","valueArrItem","resultDefault","valueType","generateMargin","marginTopRightBottomLeftArray","currValueType","valueDirections","marginLength","margin","axis","block","marginDefault","marginType","viewportScroll","viewportOffset","elementOffset","doNotScroll","elementScrollCoordinates","measuringElm","rawElementSize","width","height","elementSize","finalizeBlock","vars","getScrollbarVars","wh","_wh","lt","xy","blockIsEnd","blockIsCenter","blockIsNearest","scrollNever","scrollIfNeeded","vpSize","vpOffset","elSize","elOffset","divide","elementCenterOffset","viewportCenterOffset","isInView","scrollStop","param1","param2","param3","getElements","elementName","host","padding","viewport","content","scrollbarHorizontal","scrollbar","track","handle","scrollbarVertical","scrollbarCorner","getState","stateProperty","prepare","extended","changePropertyName","sleeping","widthAuto","heightAuto","overflowAmount","hideOverflow","hasOverflow","contentScrollSize","viewportSize","hostSize","documentMixed","ext","privateMethods","addExt","extensionOptions","instanceAdded","instanceContract","contractResult","registeredExtensionObj","extension","contractFulfilled","extensionFactory","contract","added","instanceRemoved","removed","targetElement","defaultView","parentWindow","findFirst","initBodyScroll","setupScrollbarEvents","insideIFrame","resizeDragStartPosition","resizeDragStartSize","documentDragMove","onMouseTouchDownContinue","pageOffset","getCoordinates","hostElementCSS","documentMouseTouchUp","eventIsTrusted","documentOnSelectStart","releaseCapture","connectMutationObservers","isTouchEvent","screenX","screenY","setCapture","setupScrollbarCornerEvents","createMutationObservers","activeElement","focus","addResizeObserver","hostOnResized","construct","addPassiveEventListener","element","eventNames","listener","events","passive","removePassiveEventListener","onElementResizedCallback","resizeObserver","strAnimationStartEvent","generateDiv","observe","dir","style","isDirty","rAFId","currWidth","currHeight","observerElement","shrinkElement","expandElement","expandElementChild","widthCache","heightCache","reset","onResized","expandChildCSS","observerElementCSS","isIE","onload","wnd","contentDocument","directionChanged","scrollLeftValue","disconnect","mutationTarget","mutationAttrName","contentTimeout","sizeAuto","action","mutationObserver","contentLastUpdate","mutations","mutation","doUpdate","attributeName","oldValue","mutationType","isUnknownMutation","textareaUpdate","attributes","attributeOldValue","attributeFilter","subtree","childList","characterData","hostOnMouseEnter","refreshScrollbarsAutoHide","hostOnMouseLeave","hostOnMouseMove","passiveEvent","strOnOff","setupEvent","bodyMinSize","oldCassNames","newClassNames","currClasses","oldClasses","curr","diff","a1","a2","k","getArrayDifferences","oldClassNames","currClassNames","idx","origWidth","origHeight","wrapAttrOff","minWidth","minHeight","doMeasure","ow","oh","dw","dh","hostSizeChanged","contentSizeChanged","preventSwallowing","swallow","displayIsHidden","displayIsHiddenChanged","currentPreparedOptionsScrollbars","currentPreparedOptionsTextarea","scrollbarsVisibility","scrollbarsVisibilityChanged","scrollbarsAutoHide","scrollbarsAutoHideChanged","scrollbarsClickScrolling","scrollbarsClickScrollingChanged","scrollbarsDragScrolling","scrollbarsDragScrollingChanged","classNameChanged","resizeChanged","textareaAutoWrapping","textareaAutoWrappingChanged","paddingAbsoluteChanged","clipAlwaysChanged","sizeAutoCapableChanged","ignoreOverlayScrollbarHiding","ignoreOverlayScrollbarHidingChanged","autoUpdateChanged","overflowBehaviorChanged","textareaDynWidth","textareaDynWidthChanged","textareaDynHeight","textareaDynHeightChanged","oldSize","newSize","sizeAutoObserverElementBCRect","cssDirection","cssDirectionChanged","boxSizing","boxSizingChanged","r","ex","isRTLLeft","isRTLRight","hostElement","paddingElement","widthAutoResizeDetection","widthAutoObserverDetection","right","tmpCurrHostWidth","tmpCurrContentGlueWidth","tmpNewHostWidth","widthAutoChanged","wasWidthAuto","bottom","heightAutoChanged","wasHeightAuto","strMinusWidth","updateBorderX","updateBorderY","border","cssMaxValue","String","contentElementCSS","contentGlueElementCSS","getHostSize","getViewportSize","brect","ax","ay","checkCacheTRBL","ih","iw","cw","paddingElementCSS","textareaCSS","setTopRightBottomLeft","textareaSize","hideOverflow4CorrectMeasuring","viewportElementResetCSS","resetXTmp","ys","resetBottomTmp","xs","contentMeasureElement","contentMeasureElementGuaranty","clientSize","contentClientSize","contentGlueSize","maxWidth","maxHeight","textareaCoverCSS","contentBCRect","contentBCRectW","contentBCRectH","overflowBehaviorIsVS","overflowBehaviorIsVH","overflowBehaviorIsS","hideOverflowForceTextarea","hideOverflowForceRounding","scrollLeftMax","scrollTopMax","canScroll","previousOverflow","contentArrangeElementCSS","arrangeContent","arrangeChanged","viewportElementCSS","resetScrollbarHidingX","resetScrollbarHidingY","strOverflow","elementStyle","webkitTransform","floatTmp","posLeftWithoutFloat","textareaScrollX","textareaScrollY","scrollbarsVisibilityVisible","scrollbarsVisibilityHidden","scrollbarsVisibilityAuto","showScrollbarH","refreshScrollbarAppearance","showScrollbarV","hideScrollbarH","hideScrollbarV","removeCornerEvents","refreshScrollbarHandleLength","refreshScrollbarsInteractive","textareaInfo","textareaCursorPosition","selectionStart","rowCols","textareaValue","textareaLength","textareaRowSplit","textareaLastRow","textareaCurrentCursorRowSplit","widestRow","textareaLastCol","cursorRow","cursorCol","cR","cC","m","getTextareaInfo","textareaRowsChanged","rows","lastRow","lastCol","cursorIsLastPosition","textareaScrollAmount","xScrollable","yScrollable","clipped","forced","adoptAttrs","adoptAttrsMap","applyAdoptedAttrs","applyAdoptedAttrsElm","hostElementClassNames","textareaUpdateIntervalID","scrollStopTimeoutId","updateTextarea","viewportOnScroll","textareaKeyDownRestrictedKeyCodes","textareaKeyDownKeyCodesList","doClearInterval","clearInterval","keyCode","setInterval","propertyName","affectingPropsX","affectingPropsXContentBox","affectingPropsY","affectingPropsYContentBox","checkX","sizeIsAffected","checkPropertyName","isSizeAffectingCSSProperty","nativeOverlayScrollbarsAreActive","isHorizontal","mouseDownScroll","mouseDownOffset","trackTimeout","scrollbarVars","XY","LT","strActive","scrollDurationFactor","increaseDecreaseScrollAmountKeyCodes","increaseTrackScrollAmount","decreaseTrackScrollAmount","documentKeyDown","documentKeyUp","scrollDelta","isFinite","clientX","clientY","onHandleMouseTouchDown","decreaseScroll","finishedCondition","scrollDistance","trackOffset","ctrlKey","instantScroll","shiftKey","instantScrollTransition","isFirstIteration","scrollAction","mouseOffset","scrollRange","scrollDuration","timeoutDelay","instantScrollPosition","rtlIsNormal","decreaseScrollCondition","scrollObj","shallBeVisible","scrollbarClassName","scrollbarElement","delayfree","anyActive","handleCSS","handleRatio","floor","WH","currentScroll","translateValue","transformOffset","posRatio","isRTLisHorizontal","strTranslateBrace","isTrack","element2","_lt","args","extensionOnName","targetCSSObject","prefix","values","nodeName","toFloat","num","classesOrAttrs","attrs","current","cache","prop1","prop2","pluginTargetElements","optsIsPlainObj","newDefaultOptions","currDefaultOptions","extensionName","extNameTypeString","fn","overlayScrollbars","exports","__webpack_require__","module","scroll_bar","theme","default","Function","scrollBar","scrollBarId","random","mounted","_this","$nextTick","initScrollBar","methods","OverlayScrollbars_default","getElementById","scroll_bar_scroll_bar","render","_h","$createElement","_self","_c","staticClass","staticStyle","_t","staticRenderFns","Component","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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EACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAGAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAGAC,GACAC,GACAC,GAGAC,GACAC,GAGAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAGAC,GACAC,GACAC,GACAC,GACAC,GACAC,GAnPAlO,GAAA,IAAApc,EAAAM,GACAiqB,GAAAtgB,EAAAjJ,EAAAI,GAqCAopB,MACAC,MACAC,MACAC,MACAC,MAIAC,GAAA,UACAC,GAAA,WACAC,GAAA,UACAC,GAAA,MACAC,GAAA,QACAC,GAAA,SACAC,GAAA,OACAC,GAAA,OACAC,GAAA,OACAC,GAAA,QACAC,GAAA,SACAC,GAAA,QACAC,GAAA,GACAC,GAAA,OACAC,GAAA,SACAC,GAAA,OACAC,GAAA,IACAC,GAAA,IACAC,GAAA,IACA5hB,GAAA,IAIAC,GAAAuhB,GAAA,OACAthB,GAAAshB,GAAA,MACAK,GAAA,uBACAC,GAAA,+BACAC,GAAA,sBACAC,GAAA,aACAC,GAAA,aACAC,GAAA,UACAC,GAAA,QACAC,GAAA,cACAC,GAAA,mDACAC,GAAA,0BAIAC,GAAAC,UACAC,GAAAD,UACAE,GAAAD,GAAA,YACAE,GAAAF,GAAA,+BACAG,GAAAH,GAAA,6BACAI,GAAAJ,GAAA,cACAK,GAAAL,GAAA,OACAM,GAAAN,GAAA,mBACAO,GAAAP,GAAA,aACAQ,GAAAR,GAAA,YACAS,GAAAD,GAAA,KACAE,GAAAF,GAAA,KACAG,GAAAZ,cACAa,GAAA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","file":"static/js/21.d198a7d2b51d67ad6d1f.js","sourcesContent":["/*!\n * OverlayScrollbars\n * https://github.com/KingSora/OverlayScrollbars\n *\n * Version: 1.6.3\n *\n * Copyright KingSora.\n * https://github.com/KingSora\n *\n * Released under the MIT license.\n * Date: 31.01.2019\n */\n\n(function (global, factory) {\n    if (typeof define === 'function' && define.amd)\n        define(function() { return factory(global, global.document, undefined); });\n    else if (typeof module === 'object' && typeof module.exports === 'object')\n        module.exports = factory(global, global.document, undefined);\n    else\n        factory(global, global.document, undefined);\n}(typeof window !== 'undefined' ? window : this,\n    function(window, document, undefined) {\n        'use strict';\n        var PLUGINNAME = 'OverlayScrollbars';\n        var TYPES = {\n            o : 'object',\n            f : 'function',\n            a : 'array',\n            s : 'string',\n            b : 'boolean',\n            n : 'number',\n            u : 'undefined',\n            z : 'null'\n            //d : 'date',\n            //e : 'error',\n            //r : 'regexp',\n            //y : 'symbol'\n        };\n        var LEXICON = {\n            c : 'class',\n            s : 'style',\n            i : 'id',\n            l : 'length',\n            p : 'prototype',\n            oH : 'offsetHeight',\n            cH : 'clientHeight',\n            sH : 'scrollHeight',\n            oW : 'offsetWidth',\n            cW : 'clientWidth',\n            sW : 'scrollWidth'\n        };\n        var COMPATIBILITY = {\n            /**\n             * Gets the current window width.\n             * @returns {Number|number} The current window width in pixel.\n             */\n            wW: function() {\n                return window.innerWidth || document.documentElement[LEXICON.cW] || document.body[LEXICON.cW];\n            },\n\n            /**\n             * Gets the current window height.\n             * @returns {Number|number} The current window height in pixel.\n             */\n            wH: function() {\n                return window.innerHeight || document.documentElement[LEXICON.cH] || document.body[LEXICON.cH];\n            },\n\n            /**\n             * Gets the MutationObserver Object or undefined if not supported.\n             * @returns {MutationObserver|*|undefined} The MutationsObserver Object or undefined.\n             */\n            mO: function() {\n                return window.MutationObserver || window.WebKitMutationObserver || window.WebkitMutationObserver || window.MozMutationObserver || undefined;\n            },\n\n            /**\n             * Gets the ResizeObserver Object or undefined if not supported.\n             * @returns {MutationObserver|*|undefined} The ResizeObserver Object or undefined.\n             */\n            rO: function() {\n                return window.ResizeObserver || window.WebKitResizeObserver || window.WebkitResizeObserver || window.MozResizeObserver || undefined;\n            },\n\n            /**\n             * Gets the RequestAnimationFrame method or it's corresponding polyfill.\n             * @returns {*|Function} The RequestAnimationFrame method or it's corresponding polyfill.\n             */\n            rAF: function() {\n                return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (func) {\n                        return window.setTimeout(func, 1000 / 60);\n                    };\n            },\n\n            /**\n             * Gets the CancelAnimationFrame method or it's corresponding polyfill.\n             * @returns {*|Function} The CancelAnimationFrame method or it's corresponding polyfill.\n             */\n            cAF: function() {\n                return window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.oCancelAnimationFrame || window.msCancelAnimationFrame || function (id) {\n                        return window.clearTimeout(id);\n                    };\n            },\n\n            /**\n             * Gets the current time.\n             * @returns {number} The current time.\n             */\n            now: function() {\n                return Date.now && Date.now() || new Date().getTime();\n            },\n\n            /**\n             * Stops the propagation of the given event.\n             * @param event The event of which the propagation shall be stoped.\n             */\n            stpP: function(event) {\n                if(event.stopPropagation)\n                    event.stopPropagation();\n                else\n                    event.cancelBubble = true;\n            },\n\n            /**\n             * Prevents the default action of the given event.\n             * @param event The event of which the default action shall be prevented.\n             */\n            prvD: function(event) {\n                if(event.preventDefault && event.cancelable)\n                    event.preventDefault();\n                else\n                    event.returnValue = false;\n            },\n\n            /**\n             * Gets the pageX and pageY values of the given mouse event.\n             * @param event The mouse event of which the pageX and pageX shall be got.\n             * @returns {{x: number, y: number}} x = pageX value, y = pageY value.\n             */\n            page: function(event) {\n                event = event.originalEvent || event;\n\n                var strPage = 'page';\n                var strClient = 'client';\n                var strX = 'X';\n                var strY = 'Y';\n                var target = event.target || event.srcElement || document;\n                var eventDoc = target.ownerDocument || document;\n                var doc = eventDoc.documentElement;\n                var body = eventDoc.body;\n\n                //if touch event return return pageX/Y of it\n                if(event.touches !== undefined) {\n                    var touch = event.touches[0];\n                    return {\n                        x : touch[strPage + strX],\n                        y : touch[strPage + strY]\n                    }\n                }\n\n                // Calculate pageX/Y if not native supported\n                if (!event[strPage + strX] && event[strClient + strX] && event[strClient + strX] != null) {\n\n                    return {\n                        x : event[strClient + strX] +\n                        (doc && doc.scrollLeft || body && body.scrollLeft || 0) -\n                        (doc && doc.clientLeft || body && body.clientLeft || 0),\n                        y : event[strClient + strY] +\n                        (doc && doc.scrollTop || body && body.scrollTop || 0) -\n                        (doc && doc.clientTop || body && body.clientTop || 0)\n                    }\n                }\n                return {\n                    x : event[strPage + strX],\n                    y : event[strPage + strY]\n                };\n            },\n\n            /**\n             * Gets the clicked mouse button of the given mouse event.\n             * @param event The mouse event of which the clicked button shal be got.\n             * @returns {number} The number of the clicked mouse button. (0 : none | 1 : leftButton | 2 : middleButton | 3 : rightButton)\n             */\n            mBtn: function(event) {\n                var button = event.button;\n                if (!event.which && button !== undefined)\n                    return (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));\n                else\n                    return event.which;\n            },\n\n            /**\n             * Checks whether a item is in the given array and returns its index.\n             * @param item The item of which the position in the array shall be determined.\n             * @param arr The array.\n             * @returns {number} The zero based index of the item or -1 if the item isn't in the array.\n             */\n            inA : function(item, arr) {\n                for (var i = 0; i < arr[LEXICON.l]; i++)\n                    //Sometiems in IE a \"SCRIPT70\" Permission denied error occurs if HTML elements in a iFrame are compared\n                    try {\n                        if (arr[i] === item)\n                            return i;\n                    }\n                    catch(e) { }\n                return -1;\n            },\n\n            /**\n             * Returns true if the given value is a array.\n             * @param arr The potential array.\n             * @returns {boolean} True if the given value is a array, false otherwise.\n             */\n            isA: function(arr) {\n                var def = Array.isArray;\n                return def ? def(arr) : this.type(arr) == TYPES.a;\n            },\n            \n            /**\n             * Determine the internal JavaScript [[Class]] of the given object.\n             * @param obj The object of which the type shall be determined. \n             * @returns {string} The type of the given object.\n             */\n            type: function(obj) {\n                if (obj === undefined)\n                    return obj + \"\";\n                if (obj === null)\n                    return obj + \"\";\n                return Object[LEXICON.p].toString.call(obj).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\n            },\n            \n            bind: function(func, thisObj) {\n                if (typeof func != TYPES.f) {\n                    throw \"Can't bind function!\";\n                    // closest thing possible to the ECMAScript 5\n                    // internal IsCallable function\n                    //throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n                }\n                var proto     = LEXICON.p;\n                var aArgs   = Array[proto].slice.call(arguments, 2);\n                var fNOP    = function() {};\n                var fBound  = function() { return func.apply(this instanceof fNOP ? this : thisObj, aArgs.concat(Array[proto].slice.call(arguments))); };\n\n                if (func[proto])\n                    fNOP[proto] = func[proto]; // Function.prototype doesn't have a prototype property\n                fBound[proto] = new fNOP();\n\n                return fBound;\n            }\n        };\n        \n        var MATH = Math;\n        var JQUERY = window.jQuery;\n        var EASING = (function() {\n            var _easingsMath = {\n                p : MATH.PI,\n                c : MATH.cos,\n                s : MATH.sin,\n                w : MATH.pow,\n                t : MATH.sqrt,\n                n : MATH.asin,\n                a : MATH.abs,\n                o : 1.70158\n            };\n            \n            /*\n             x : current percent (0 - 1),\n             t : current time (duration * percent),\n             b : start value (from),\n             c : end value (to),\n             d : duration\n\n             easingName : function(x, t, b, c, d) { return easedValue; }\n             */\n\n            return {\n                swing: function (x, t, b, c, d) {\n                    return 0.5 - _easingsMath.c(x * _easingsMath.p) / 2;\n                },\n                linear: function(x, t, b, c, d) {\n                    return x;\n                },\n                easeInQuad: function (x, t, b, c, d) {\n                    return c*(t/=d)*t + b;\n                },\n                easeOutQuad: function (x, t, b, c, d) {\n                    return -c *(t/=d)*(t-2) + b;\n                },\n                easeInOutQuad: function (x, t, b, c, d) {\n                    return ((t/=d/2) < 1) ? c/2*t*t + b : -c/2 * ((--t)*(t-2) - 1) + b;\n                },\n                easeInCubic: function (x, t, b, c, d) {\n                    return c*(t/=d)*t*t + b;\n                },\n                easeOutCubic: function (x, t, b, c, d) {\n                    return c*((t=t/d-1)*t*t + 1) + b;\n                },\n                easeInOutCubic: function (x, t, b, c, d) {\n                    return ((t/=d/2) < 1) ? c/2*t*t*t + b : c/2*((t-=2)*t*t + 2) + b;\n                },\n                easeInQuart: function (x, t, b, c, d) {\n                    return c*(t/=d)*t*t*t + b;\n                },\n                easeOutQuart: function (x, t, b, c, d) {\n                    return -c * ((t=t/d-1)*t*t*t - 1) + b;\n                },\n                easeInOutQuart: function (x, t, b, c, d) {\n                    return ((t/=d/2) < 1) ? c/2*t*t*t*t + b : -c/2 * ((t-=2)*t*t*t - 2) + b;\n                },\n                easeInQuint: function (x, t, b, c, d) {\n                    return c*(t/=d)*t*t*t*t + b;\n                },\n                easeOutQuint: function (x, t, b, c, d) {\n                    return c*((t=t/d-1)*t*t*t*t + 1) + b;\n                },\n                easeInOutQuint: function (x, t, b, c, d) {\n                    return ((t/=d/2) < 1) ? c/2*t*t*t*t*t + b : c/2*((t-=2)*t*t*t*t + 2) + b;\n                },\n                easeInSine: function (x, t, b, c, d) {\n                    return -c * _easingsMath.c(t/d * (_easingsMath.p/2)) + c + b;\n                },\n                easeOutSine: function (x, t, b, c, d) {\n                    return c * _easingsMath.s(t/d * (_easingsMath.p/2)) + b;\n                },\n                easeInOutSine: function (x, t, b, c, d) {\n                    return -c/2 * (_easingsMath.c(_easingsMath.p*t/d) - 1) + b;\n                },\n                easeInExpo: function (x, t, b, c, d) {\n                    return (t==0) ? b : c * _easingsMath.w(2, 10 * (t/d - 1)) + b;\n                },\n                easeOutExpo: function (x, t, b, c, d) {\n                    return (t==d) ? b+c : c * (-_easingsMath.w(2, -10 * t/d) + 1) + b;\n                },\n                easeInOutExpo: function (x, t, b, c, d) {\n                    if (t==0) return b;\n                    if (t==d) return b+c;\n                    if ((t/=d/2) < 1) return c/2 * _easingsMath.w(2, 10 * (t - 1)) + b;\n                    return c/2 * (-_easingsMath.w(2, -10 * --t) + 2) + b;\n                },\n                easeInCirc: function (x, t, b, c, d) {\n                    return -c * (_easingsMath.t(1 - (t/=d)*t) - 1) + b;\n                },\n                easeOutCirc: function (x, t, b, c, d) {\n                    return c * _easingsMath.t(1 - (t=t/d-1)*t) + b;\n                },\n                easeInOutCirc: function (x, t, b, c, d) {\n                    return ((t/=d/2) < 1) ? -c/2 * (_easingsMath.t(1 - t*t) - 1) + b : c/2 * (_easingsMath.t(1 - (t-=2)*t) + 1) + b;\n                },\n                easeInElastic: function (x, t, b, c, d) {\n                    var s=_easingsMath.o;var p=0;var a=c;\n                    if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;\n                    if (a < _easingsMath.a(c)) { a=c; s=p/4; }\n                    else s = p/(2*_easingsMath.p) * _easingsMath.n (c/a);\n                    return -(a*_easingsMath.w(2,10*(t-=1)) * _easingsMath.s( (t*d-s)*(2*_easingsMath.p)/p )) + b;\n                },\n                easeOutElastic: function (x, t, b, c, d) {\n                    var s=_easingsMath.o;var p=0;var a=c;\n                    if (t==0) return b;  \n                    if ((t/=d)==1) return b+c;  \n                    if (!p) p=d*.3;\n                    if (a < _easingsMath.a(c)) { a=c; s=p/4; }\n                    else s = p/(2*_easingsMath.p) * _easingsMath.n (c/a);\n                    return a*_easingsMath.w(2,-10*t) * _easingsMath.s( (t*d-s)*(2*_easingsMath.p)/p ) + c + b;\n                },\n                easeInOutElastic: function (x, t, b, c, d) {\n                    var s=_easingsMath.o;var p=0;var a=c;\n                    if (t==0) return b;  \n                    if ((t/=d/2)==2) return b+c;  \n                    if (!p) p=d*(.3*1.5);\n                    if (a < _easingsMath.a(c)) { a=c; s=p/4; }\n                    else s = p/(2*_easingsMath.p) * _easingsMath.n (c/a);\n                    if (t < 1) return -.5*(a*_easingsMath.w(2,10*(t-=1)) * _easingsMath.s( (t*d-s)*(2*_easingsMath.p)/p )) + b;\n                    return a*_easingsMath.w(2,-10*(t-=1)) * _easingsMath.s( (t*d-s)*(2*_easingsMath.p)/p )*.5 + c + b;\n                },\n                easeInBack: function (x, t, b, c, d, s) {\n                    s = s || _easingsMath.o;\n                    return c*(t/=d)*t*((s+1)*t - s) + b;\n                },\n                easeOutBack: function (x, t, b, c, d, s) {\n                    s = s || _easingsMath.o;\n                    return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;\n                },\n                easeInOutBack: function (x, t, b, c, d, s) {\n                    s = s || _easingsMath.o;\n                    return ((t/=d/2) < 1) ? c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b : c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;\n                },\n                easeInBounce: function (x, t, b, c, d) {\n                    return c - this.easeOutBounce (x, d-t, 0, c, d) + b;\n                },\n                easeOutBounce: function (x, t, b, c, d) {\n                    var o = 7.5625;\n                    if ((t/=d) < (1/2.75)) {\n                        return c*(o*t*t) + b;\n                    } else if (t < (2/2.75)) {\n                        return c*(o*(t-=(1.5/2.75))*t + .75) + b;\n                    } else if (t < (2.5/2.75)) {\n                        return c*(o*(t-=(2.25/2.75))*t + .9375) + b;\n                    } else {\n                        return c*(o*(t-=(2.625/2.75))*t + .984375) + b;\n                    }\n                },\n                easeInOutBounce: function (x, t, b, c, d) {\n                    return (t < d/2) ? this.easeInBounce (x, t*2, 0, c, d) * .5 + b : this.easeOutBounce (x, t*2-d, 0, c, d) * .5 + c*.5 + b;\n                }\n            };\n            /*\n             *\n             * TERMS OF USE - EASING EQUATIONS\n             * \n             * Open source under the BSD License. \n             * \n             * Copyright Â© 2001 Robert Penner\n             * All rights reserved.\n             * \n             * Redistribution and use in source and binary forms, with or without modification, \n             * are permitted provided that the following conditions are met:\n             * \n             * Redistributions of source code must retain the above copyright notice, this list of \n             * conditions and the following disclaimer.\n             * Redistributions in binary form must reproduce the above copyright notice, this list \n             * of conditions and the following disclaimer in the documentation and/or other materials \n             * provided with the distribution.\n             * \n             * Neither the name of the author nor the names of contributors may be used to endorse \n             * or promote products derived from this software without specific prior written permission.\n             * \n             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \n             * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n             * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n             *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n             *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n             *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED \n             * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n             *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED \n             * OF THE POSSIBILITY OF SUCH DAMAGE. \n             *\n             */\n        })();\n        var FRAMEWORK = (function() {\n            var _rnothtmlwhite = ( /[^\\x20\\t\\r\\n\\f]+/g );\n            var _strSpace = ' ';\n            var _strEmpty = '';\n            var _strScrollLeft = 'scrollLeft';\n            var _strScrollTop = 'scrollTop';\n            var _animations = [ ];\n            var _type = COMPATIBILITY.type;\n            var _cssNumber = {\n                \"animationIterationCount\": true,\n                \"columnCount\": true,\n                \"fillOpacity\": true,\n                \"flexGrow\": true,\n                \"flexShrink\": true,\n                \"fontWeight\": true,\n                \"lineHeight\": true,\n                \"opacity\": true,\n                \"order\": true,\n                \"orphans\": true,\n                \"widows\": true,\n                \"zIndex\": true,\n                \"zoom\": true\n            };\n\n            var extend = function() {\n                var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {},\n                    i = 1,\n                    length = arguments[LEXICON.l],\n                    deep = false;\n\n                // Handle a deep copy situation\n                if (_type(target) == TYPES.b) {\n                    deep = target;\n                    target = arguments[1] || {};\n                    // skip the boolean and the target\n                    i = 2;\n                }\n\n                // Handle case when target is a string or something (possible in deep copy)\n                if (_type(target) != TYPES.o && !_type(target) == TYPES.f) {\n                    target = {};\n                }\n\n                // extend jQuery itself if only one argument is passed\n                if (length === i) {\n                    target = FakejQuery;\n                    --i;\n                }\n\n                for (; i < length; i++) {\n                    // Only deal with non-null/undefined values\n                    if ((options = arguments[i]) != null) {\n                        // Extend the base object\n                        for (name in options) {\n                            src = target[name];\n                            copy = options[name];\n\n                            // Prevent never-ending loop\n                            if (target === copy) {\n                                continue;\n                            }\n\n                            // Recurse if we're merging plain objects or arrays\n                            if (deep && copy && (isPlainObject(copy) || (copyIsArray = COMPATIBILITY.isA(copy)))) {\n                                if (copyIsArray) {\n                                    copyIsArray = false;\n                                    clone = src && COMPATIBILITY.isA(src) ? src : [];\n\n                                } else {\n                                    clone = src && isPlainObject(src) ? src : {};\n                                }\n\n                                // Never move original objects, clone them\n                                target[name] = extend(deep, clone, copy);\n\n                                // Don't bring in undefined values\n                            } else if (copy !== undefined) {\n                                target[name] = copy;\n                            }\n                        }\n                    }\n                }\n\n                // Return the modified object\n                return target;\n            };\n\n            var inArray = function(item, arr, fromIndex) {\n                for (var i = fromIndex || 0; i < arr[LEXICON.l]; i++)\n                    if (arr[i] === item)\n                        return i;\n                return -1;\n            }\n            \n            var isFunction = function(obj) {\n                return _type(obj) == TYPES.f;\n            };\n\n            var isEmptyObject = function(obj) {\n                for (var name in obj )\n                    return false;\n                return true;\n            };\n\n            var isPlainObject = function(obj) {\n                if (!obj || _type(obj) != TYPES.o)\n                    return false;\n\n                var key;\n                var proto = LEXICON.p;\n                var hasOwnProperty = Object[proto].hasOwnProperty;\n                var hasOwnConstructor = hasOwnProperty.call(obj, 'constructor');\n                var hasIsPrototypeOf = obj.constructor && obj.constructor[proto] && hasOwnProperty.call(obj.constructor[proto], 'isPrototypeOf');\n\n                if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n                    return false;\n                }\n\n\n                for (key in obj) { /**/ }\n\n                return _type(key) == TYPES.u || hasOwnProperty.call(obj, key);\n            };\n\n            var each = function(obj, callback) {\n                var i = 0;\n\n                if (isArrayLike(obj)) {\n                    for (; i < obj[LEXICON.l]; i++) {\n                        if (callback.call(obj[i], i, obj[i]) === false)\n                            break;\n                    }\n                }\n                else {\n                    for (i in obj) {\n                        if (callback.call(obj[i], i, obj[i]) === false)\n                            break;\n                    }\n                }\n\n                return obj;\n            };\n\n            var FakejQuery = function (selector) {\n                if(arguments[LEXICON.l] === 0)\n                    return this;\n\n                var base = new FakejQuery();\n                var elements = selector;\n                var i = 0;\n                var elms;\n                var el;\n\n                if(_type(selector) == TYPES.s) {\n                    elements = [ ];\n                    if(selector.charAt(0) === '<') {\n                        el = document.createElement('div');\n                        el.innerHTML = selector;\n                        elms = el.children;\n                    }\n                    else {\n                        elms = document.querySelectorAll(selector);\n                    }\n\n                    for(; i < elms[LEXICON.l]; i++)\n                        elements.push(elms[i]);\n                }\n\n                if(elements) {\n                    if(_type(elements) != TYPES.s && !isArrayLike(elements))\n                        elements = [ elements ];\n\n                    for(i = 0; i < elements[LEXICON.l]; i++)\n                        base[i] = elements[i];\n\n                    base[LEXICON.l] = elements[LEXICON.l];\n                }\n\n                return base;\n            };\n\n            function isArrayLike(obj) {\n                var length = !!obj && [LEXICON.l] in obj && obj[LEXICON.l];\n                var t = _type(obj);\n                //|| obj === window = self added!\n                return isFunction(t) || obj === window ? false : (t == TYPES.a || length === 0 || _type(length) == TYPES.n && length > 0 && (length - 1) in obj);\n            }\n\n            function stripAndCollapse(value) {\n                var tokens = value.match(_rnothtmlwhite) || [];\n                return tokens.join(_strSpace);\n            }\n\n            function matches(elem, selector) {\n                var nodeList = (elem.parentNode || document).querySelectorAll(selector) || [];\n                var i = nodeList[LEXICON.l];\n\n                while (i--)\n                    if (nodeList[i] == elem)\n                        return true;\n\n                return false;\n            }\n\n            function insertAdjacentElement(el, strategy, child) {\n                if(_type(child) == TYPES.a) {\n                    for(var i = 0; i < child[LEXICON.l]; i++)\n                        insertAdjacentElement(el, strategy, child[i]);\n                }\n                else if(_type(child) == TYPES.s)\n                    el.insertAdjacentHTML(strategy, child);\n                else\n                    el.insertAdjacentElement(strategy, child.nodeType ? child : child[0]);\n            }\n\n            function setCSSVal(el, prop, val) {\n                try {\n                    if(el[LEXICON.s][prop] !== undefined)\n                        el[LEXICON.s][prop] = parseCSSVal(prop, val);\n                } catch(e) { }\n            }\n\n            function parseCSSVal(prop, val) {\n                if(!_cssNumber[prop.toLowerCase()] && _type(val) == TYPES.n)\n                    val += 'px';\n                return val;\n            }\n\n            function startNextAnimationInQ(animObj, removeFromQ) {\n                var index;\n                var nextAnim;\n                if(removeFromQ !== false)\n                    animObj.q.splice(0, 1);\n                if(animObj.q[LEXICON.l] > 0) {\n                    nextAnim = animObj.q[0];\n                    animate(animObj.el, nextAnim.props, nextAnim.duration, nextAnim.easing, nextAnim.complete, true);\n                }\n                else {\n                    index = inArray(animObj, _animations);\n                    if(index > -1)\n                        _animations.splice(index, 1);\n                }\n            }\n\n            function setAnimationValue(el, prop, value) {\n                if(prop === _strScrollLeft || prop === _strScrollTop)\n                    el[prop] = value;\n                else\n                    setCSSVal(el, prop, value);\n            }\n\n            function animate(el, props, options, easing, complete, guaranteedNext) {\n                var hasOptions = isPlainObject(options);\n                var from = { };\n                var to = { };\n                var i = 0;\n                var key;\n                var animObj;\n                var start;\n                var progress;\n                var step;\n                var specialEasing;\n                var duration;\n                if(hasOptions) {\n                    easing = options.easing;\n                    start = options.start;\n                    progress = options.progress;\n                    step = options.step;\n                    specialEasing = options.specialEasing;\n                    complete = options.complete;\n                    duration = options.duration;\n                }\n                else\n                    duration = options;\n                specialEasing = specialEasing || { };\n                duration = duration || 400;\n                easing = easing || 'swing';\n                guaranteedNext = guaranteedNext || false;\n\n                for(; i < _animations[LEXICON.l]; i++) {\n                    if(_animations[i].el === el) {\n                        animObj = _animations[i];\n                        break;\n                    }\n                }\n\n                if(!animObj) {\n                    animObj = {\n                        el : el,\n                        q : []\n                    };\n                    _animations.push(animObj);\n                }\n\n                for (key in props) {\n                    if(key === _strScrollLeft || key === _strScrollTop)\n                        from[key] = el[key];\n                    else\n                        from[key] = FakejQuery(el).css(key);\n                }\n\n                for (key in from) {\n                    if(from[key] !== props[key] && props[key] !== undefined)\n                        to[key] = props[key];\n                }\n\n                if(!isEmptyObject(to)) {\n                    var timeNow;\n                    var end;\n                    var percent;\n                    var fromVal;\n                    var toVal;\n                    var easedVal;\n                    var timeStart;\n                    var frame;\n                    var elapsed;\n                    var qPos = guaranteedNext ? 0 : inArray(qObj, animObj.q);\n                    var qObj = {\n                        props : to,\n                        duration : hasOptions ? options : duration,\n                        easing : easing,\n                        complete : complete\n                    };\n                    if (qPos === -1) {\n                        qPos = animObj.q[LEXICON.l];\n                        animObj.q.push(qObj);\n                    }\n\n                    if(qPos === 0) {\n                        if(duration > 0) {\n                            timeStart = COMPATIBILITY.now();\n                            frame = function() {\n                                timeNow = COMPATIBILITY.now();\n                                elapsed = (timeNow - timeStart);\n                                end = qObj.stop || elapsed >= duration;\n                                percent = 1 - ((MATH.max(0, timeStart + duration - timeNow) / duration) || 0);\n\n                                for(key in to) {\n                                    fromVal = parseFloat(from[key]);\n                                    toVal = parseFloat(to[key]);\n                                    easedVal = (toVal - fromVal) * EASING[specialEasing[key] || easing](percent, percent * duration, 0, 1, duration) + fromVal;\n                                    setAnimationValue(el, key, easedVal);\n                                    if(isFunction(step)) {\n                                        step(easedVal, {\n                                            elem : el,\n                                            prop : key,\n                                            start : fromVal,\n                                            now : easedVal,\n                                            end : toVal,\n                                            pos : percent,\n                                            options : {\n                                                easing : easing,\n                                                speacialEasing : specialEasing,\n                                                duration : duration,\n                                                complete : complete,\n                                                step : step\n                                            },\n                                            startTime : timeStart\n                                        });\n                                    }\n                                }\n\n                                if(isFunction(progress))\n                                    progress({ }, percent, MATH.max(0, duration - elapsed));\n\n                                if (end) {\n                                    startNextAnimationInQ(animObj);\n                                    if(isFunction(complete))\n                                        complete();\n                                }\n                                else\n                                    qObj.frame = COMPATIBILITY.rAF()(frame);\n                            };\n                            qObj.frame = COMPATIBILITY.rAF()(frame);\n                        }\n                        else {\n                            for(key in to)\n                                setAnimationValue(el, key, to[key]);\n                            startNextAnimationInQ(animObj);\n                        }\n                    }\n                }\n                else if(guaranteedNext)\n                    startNextAnimationInQ(animObj);\n            }\n\n            function stop(el, clearQ, jumpToEnd) {\n                var animObj;\n                var qObj;\n                var key;\n                var i = 0;\n                for(; i < _animations[LEXICON.l]; i++) {\n                    animObj = _animations[i];\n                    if(animObj.el === el) {\n                        if(animObj.q[LEXICON.l] > 0) {\n                            qObj = animObj.q[0];\n                            qObj.stop = true;\n                            COMPATIBILITY.cAF()(qObj.frame);\n                            animObj.q.splice(0, 1);\n\n                            if(jumpToEnd)\n                                for(key in qObj.props)\n                                    setAnimationValue(el, key, qObj.props[key]);\n\n                            if(clearQ)\n                                animObj.q = [ ];\n                            else\n                                startNextAnimationInQ(animObj, false);\n                        }\n                        break;\n                    }\n                }\n            }\n\n            FakejQuery[LEXICON.p] = {\n\n                //EVENTS:\n\n                on : function(eventName, handler) {\n                    eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\n\n                    var eventNameLength = eventName[LEXICON.l];\n                    var i = 0;\n                    var el;\n                    return this.each(function() {\n                        el = this;\n                        try {\n                            if (el.addEventListener) {\n                                for (; i < eventNameLength; i++)\n                                    el.addEventListener(eventName[i], handler);\n                            }\n                            else if(el.detachEvent) {\n                                for (; i < eventNameLength; i++)\n                                    el.attachEvent('on' + eventName[i], handler);\n                            }\n                        } catch (e) { }\n                    });\n                },\n\n                off : function(eventName, handler) {\n                    eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\n\n                    var eventNameLength = eventName[LEXICON.l];\n                    var i = 0;\n                    var el;\n                    return this.each(function() {\n                        el = this;\n                        try {\n                            if (el.removeEventListener) {\n                                for (; i < eventNameLength; i++)\n                                    el.removeEventListener(eventName[i], handler);\n                            }\n                            else if(el.detachEvent) {\n                                for (; i < eventNameLength; i++)\n                                    el.detachEvent('on' + eventName[i], handler);\n                            }\n                        } catch (e) { }\n                    });\n                },\n\n                one : function (eventName, handler) {\n                    eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\n                    return this.each(function() {\n                        var el = FakejQuery(this);\n                        FakejQuery.each(eventName, function(i, oneEventName) {\n                            var oneHandler = function(e) {\n                                handler.call(this, e);\n                                el.off(oneEventName, oneHandler);\n                            };\n                            el.on(oneEventName, oneHandler);\n                        });\n                    });\n                },\n\n                trigger : function(eventName) {\n                    var el;\n                    var event;\n                    return this.each(function() {\n                        el = this;\n                        if (document.createEvent) {\n                            event = document.createEvent('HTMLEvents');\n                            event.initEvent(eventName, true, false);\n                            el.dispatchEvent(event);\n                        }\n                        else {\n                            el.fireEvent(\"on\" + eventName);\n                        }\n                    });\n                },\n\n                //DOM NODE INSERTING / REMOVING:\n\n                append : function(child) {\n                    return this.each(function() { insertAdjacentElement(this, 'beforeend', child); });\n                },\n\n                prepend : function(child) {\n                    return this.each(function() { insertAdjacentElement(this, 'afterbegin', child); });\n                },\n\n                before : function(child) {\n                    return this.each(function() { insertAdjacentElement(this, 'beforebegin', child); });\n                },\n\n                after : function(child) {\n                    return this.each(function() { insertAdjacentElement(this, 'afterend', child); });\n                },\n\n                remove : function() {\n                    return this.each(function() {\n                        var el = this;\n                        var parentNode = el.parentNode;\n                        if(parentNode != null)\n                            parentNode.removeChild(el);\n                    });\n                },\n\n                unwrap : function() {\n                    var parents = [ ];\n                    var i;\n                    var el;\n                    var parent;\n\n                    this.each(function() {\n                        parent = this.parentNode;\n                        if(inArray(parent, parents) === - 1)\n                            parents.push(parent);\n                    });\n\n                    for(i = 0; i < parents[LEXICON.l]; i++) {\n                        el = parents[i];\n                        parent = el.parentNode;\n                        while (el.firstChild)\n                            parent.insertBefore(el.firstChild, el);\n                        parent.removeChild(el);\n                    }\n\n                    return this;\n                },\n\n                wrapAll : function(wrapperHTML) {\n                    var i;\n                    var nodes = this;\n                    var wrapper = FakejQuery(wrapperHTML)[0];\n                    var deepest = wrapper;\n                    var parent = nodes[0].parentNode;\n                    var previousSibling = nodes[0].previousSibling;\n                    while(deepest.childNodes[LEXICON.l] > 0)\n                        deepest = deepest.childNodes[0];\n\n                    for (i = 0; nodes[LEXICON.l] - i; deepest.firstChild === nodes[0] && i++)\n                        deepest.appendChild(nodes[i]);\n\n                    var nextSibling = previousSibling ? previousSibling.nextSibling : parent.firstChild;\n                    parent.insertBefore(wrapper, nextSibling);\n\n                    return this;\n                },\n\n                wrapInner : function(wrapperHTML) {\n                    return this.each(function() {\n                        var el = FakejQuery(this);\n                        var contents = el.contents();\n\n                        if (contents[LEXICON.l])\n                            contents.wrapAll(wrapperHTML);\n                        else\n                            el.append(wrapperHTML);\n                    });\n                },\n\n                wrap : function(wrapperHTML) {\n                    return this.each(function() { FakejQuery(this).wrapAll(wrapperHTML); });\n                },\n\n\n                //DOM NODE MANIPULATION / INFORMATION:\n\n                css : function(styles, val) {\n                    var el;\n                    var key;\n                    var cptStyle;\n                    var getCptStyle = window.getComputedStyle;\n                    if(_type(styles) == TYPES.s) {\n                        if(val === undefined) {\n                            el = this[0];\n                            cptStyle = getCptStyle ? getCptStyle(el, null) : el.currentStyle[styles];\n\n                            //https://bugzilla.mozilla.org/show_bug.cgi?id=548397 can be null sometimes if iframe with display: none (firefox only!)\n                            return getCptStyle ? cptStyle != null ? cptStyle.getPropertyValue(styles) : el[LEXICON.s][styles] : cptStyle;\n                        }\n                        else {\n                            return this.each(function() {\n                                setCSSVal(this, styles, val);\n                            });\n                        }\n                    }\n                    else {\n                        return this.each(function() {\n                            for(key in styles)\n                                setCSSVal(this, key, styles[key]);\n                        });\n                    }\n                },\n\n                hasClass : function(className) {\n                    var elem, i = 0;\n                    var classNamePrepared = _strSpace + className + _strSpace;\n                    var classList;\n\n                    while ((elem = this[ i++ ])) {\n                        classList = elem.classList;\n                        if(classList && classList.contains(className))\n                            return true;\n                        else if (elem.nodeType === 1 && (_strSpace + stripAndCollapse(elem.className + _strEmpty) + _strSpace).indexOf(classNamePrepared) > -1)\n                            return true;\n                    }\n\n                    return false;\n                },\n\n                addClass : function(className) {\n                    var classes;\n                    var elem;\n                    var cur;\n                    var curValue;\n                    var clazz;\n                    var finalValue;\n                    var supportClassList;\n                    var elmClassList;\n                    var i = 0;\n                    var v = 0;\n\n                    if (className) {\n                        classes = className.match( _rnothtmlwhite ) || [];\n\n                        while ((elem = this[i++])) {\n                            elmClassList = elem.classList;\n                            if(supportClassList === undefined)\n                                supportClassList = elmClassList !== undefined;\n\n                            if(supportClassList) {\n                                while ((clazz = classes[v++]))\n                                    elmClassList.add(clazz);\n                            }\n                            else {\n                                curValue = elem.className + _strEmpty;\n                                cur = elem.nodeType === 1 && (_strSpace + stripAndCollapse(curValue) + _strSpace);\n\n                                if (cur) {\n                                    while ((clazz = classes[v++]))\n                                        if (cur.indexOf(_strSpace + clazz + _strSpace) < 0)\n                                            cur += clazz + _strSpace;\n\n                                    finalValue = stripAndCollapse(cur);\n                                    if (curValue !== finalValue)\n                                        elem.className = finalValue;\n                                }\n                            }\n                        }\n                    }\n\n                    return this;\n                },\n\n                removeClass : function(className) {\n                    var classes;\n                    var elem;\n                    var cur;\n                    var curValue;\n                    var clazz;\n                    var finalValue;\n                    var supportClassList;\n                    var elmClassList;\n                    var i = 0;\n                    var v = 0;\n\n                    if (className) {\n                        classes = className.match(_rnothtmlwhite) || [];\n\n                        while ((elem = this[i++])) {\n                            elmClassList = elem.classList;\n                            if(supportClassList === undefined)\n                                supportClassList = elmClassList !== undefined;\n\n                            if(supportClassList) {\n                                while ((clazz = classes[v++]))\n                                    elmClassList.remove(clazz);\n                            }\n                            else {\n                                curValue = elem.className + _strEmpty;\n                                cur = elem.nodeType === 1 && (_strSpace + stripAndCollapse(curValue) + _strSpace);\n\n                                if (cur) {\n                                    while ((clazz = classes[v++]))\n                                        while (cur.indexOf(_strSpace + clazz + _strSpace) > -1)\n                                            cur = cur.replace(_strSpace + clazz + _strSpace, _strSpace);\n\n                                    finalValue = stripAndCollapse(cur);\n                                    if (curValue !== finalValue)\n                                        elem.className = finalValue;\n                                }\n                            }\n                        }\n                    }\n\n                    return this;\n                },\n\n                hide : function() {\n                    return this.each(function() { this[LEXICON.s].display = 'none'; });\n                },\n\n                show : function() {\n                    return this.each(function() { this[LEXICON.s].display = 'block'; });\n                },\n\n                attr : function(attrName, value) {\n                    var i = 0;\n                    var el;\n                    while (el = this[i++]) {\n                        if(value === undefined)\n                            return el.getAttribute(attrName);\n                        el.setAttribute(attrName, value);\n                    }\n                    return this;\n                },\n\n                removeAttr : function(attrName) {\n                    return this.each(function() { this.removeAttribute(attrName); });\n                },\n\n                offset : function() {\n                    var el = this[0];\n                    var rect = el.getBoundingClientRect();\n                    var scrollLeft = window.pageXOffset || document.documentElement[_strScrollLeft];\n                    var scrollTop = window.pageYOffset || document.documentElement[_strScrollTop];\n                    return {\n                        top: rect.top + scrollTop,\n                        left: rect.left + scrollLeft\n                    };\n                },\n\n                position : function() {\n                    var el = this[0];\n                    return {\n                        top: el.offsetTop,\n                        left: el.offsetLeft\n                    };\n                },\n\n                scrollLeft : function(value) {\n                    var i = 0;\n                    var el;\n                    while (el = this[i++]) {\n                        if(value === undefined)\n                            return el[_strScrollLeft];\n                        el[_strScrollLeft] = value;\n                    }\n                    return this;\n                },\n\n                scrollTop : function(value) {\n                    var i = 0;\n                    var el;\n                    while (el = this[i++]) {\n                        if(value === undefined)\n                            return el[_strScrollTop];\n                        el[_strScrollTop] = value;\n                    }\n                    return this;\n                },\n\n                val : function(value) {\n                    var el = this[0];\n                    if(!value)\n                        return el.value;\n                    el.value = value;\n                    return this;\n                },\n\n\n                //DOM TRAVERSAL / FILTERING:\n\n                first : function() {\n                    return this.eq(0);\n                },\n\n                last : function() {\n                    return this.eq(-1);\n                },\n\n                eq : function(index) {\n                    return FakejQuery(this[index >= 0 ? index : this[LEXICON.l] + index]);\n                },\n\n                find : function(selector) {\n                    var children = [ ];\n                    var i;\n                    this.each(function() {\n                        var el = this;\n                        var ch = el.querySelectorAll(selector);\n                        for(i = 0; i < ch[LEXICON.l]; i++)\n                            children.push(ch[i]);\n                    });\n                    return FakejQuery(children);\n                },\n\n                children : function(selector) {\n                    var children = [ ];\n                    var el;\n                    var ch;\n                    var i;\n\n                    this.each(function() {\n                        ch = this.children;\n                        for(i = 0; i < ch[LEXICON.l]; i++) {\n                            el = ch[i];\n                            if(selector) {\n                                if((el.matches && el.matches(selector)) || matches(el, selector))\n                                    children.push(el);\n                            }\n                            else\n                                children.push(el);\n                        }\n                    });\n                    return FakejQuery(children);\n                },\n\n                parent : function(selector) {\n                    var parents = [ ];\n                    var parent;\n                    this.each(function() {\n                        parent = this.parentNode;\n                        if(selector ? FakejQuery(parent).is(selector) : true)\n                            parents.push(parent);\n                    });\n                    return FakejQuery(parents);\n                },\n\n                is : function(selector) {\n                    var el;\n                    var i;\n                    for(i = 0; i < this[LEXICON.l]; i++) {\n                        el = this[i];\n                        if(selector === \":visible\")\n                            return !!(el[LEXICON.oW] || el[LEXICON.oH] || el.getClientRects()[LEXICON.l]);\n                        if(selector === \":hidden\")\n                            return !!!(el[LEXICON.oW] || el[LEXICON.oH] || el.getClientRects()[LEXICON.l]);\n                        if((el.matches && el.matches(selector)) || matches(el, selector))\n                            return true;\n                    }\n                    return false;\n                },\n\n                contents : function() {\n                    var contents = [ ];\n                    var childs;\n                    var i;\n\n                    this.each(function() {\n                        childs = this.childNodes;\n                        for(i = 0; i < childs[LEXICON.l]; i++)\n                            contents.push(childs[i]);\n                    });\n\n                    return FakejQuery(contents);\n                },\n\n                each : function(callback) {\n                    return each(this, callback);\n                },\n\n\n                //ANIMATION:\n\n                animate : function(props, duration, easing, complete) {\n                    return this.each(function() { animate(this, props, duration, easing, complete); });\n                },\n\n                stop : function(clearQ, jump) {\n                    return this.each(function() { stop(this, clearQ, jump); });\n                }\n            };\n\n            extend(FakejQuery, {\n                extend : extend,\n                inArray : inArray,\n                isEmptyObject : isEmptyObject,\n                isPlainObject : isPlainObject,\n                each : each\n            });\n\n            return FakejQuery;\n        })();\n        var INSTANCES = (function() {\n            var _targets = [ ];\n            var _instancePropertyString = '__overlayScrollbars__';\n\n            /**\n             * Register, unregister or get a certain (or all) instances.\n             * Register: Pass the target and the instance.\n             * Unregister: Pass the target and null.\n             * Get Instance: Pass the target from which the instance shall be got.\n             * Get Targets: Pass no arguments.\n             * @param target The target to which the instance shall be registered / from which the instance shall be unregistered / the instance shall be got\n             * @param instance The instance.\n             * @returns {*|void} Returns the instance from the given target.\n             */\n            return function (target, instance) {\n                var argLen = arguments[LEXICON.l];\n                if(argLen < 1) {\n                    //return all targets\n                    return _targets;\n                }\n                else {\n                    if(instance) {\n                        //register instance\n                        target[_instancePropertyString] = instance;\n                        _targets.push(target);\n                    }\n                    else {\n                        var index = COMPATIBILITY.inA(target, _targets);\n                        if (index > -1) {\n                            if(argLen > 1) {\n                                //unregister instance\n                                delete target[_instancePropertyString];\n                                _targets.splice(index, 1);\n                            }\n                            else {\n                                //get instance from target\n                                return _targets[index][_instancePropertyString];\n                            }\n                        }\n                    }\n                }\n            }\n        })();\n        var PLUGIN = (function() {\n            var _pluginsGlobals;\n            var _pluginsAutoUpdateLoop;\n            var _pluginsExtensions = [ ];\n            var _pluginsOptions = (function() {\n                var possibleTemplateTypes = [\n                    TYPES.b, //boolean\n                    TYPES.n, //number\n                    TYPES.s, //string\n                    TYPES.a, //array\n                    TYPES.o, //object\n                    TYPES.f, //function\n                    TYPES.z  //null\n                ];\n                var restrictedStringsSplit = ' ';\n                var restrictedStringsPossibilitiesSplit = ':';\n                var classNameAllowedValues = [TYPES.z, TYPES.s];\n                var numberAllowedValues = TYPES.n;\n                var booleanNullAllowedValues = [TYPES.z, TYPES.b];\n                var booleanTrueTemplate = [true, TYPES.b];\n                var booleanFalseTemplate = [false, TYPES.b];\n                var callbackTemplate = [null,  [TYPES.z, TYPES.f]];\n                var inheritedAttrsTemplate = [['style', 'class'], [TYPES.s, TYPES.a, TYPES.z]];\n                var resizeAllowedValues = 'n:none b:both h:horizontal v:vertical';\n                var overflowBehaviorAllowedValues = 'v-h:visible-hidden v-s:visible-scroll s:scroll h:hidden';\n                var scrollbarsVisibilityAllowedValues = 'v:visible h:hidden a:auto';\n                var scrollbarsAutoHideAllowedValues = 'n:never s:scroll l:leave m:move';\n                var optionsDefaultsAndTemplate = {\n                    className: ['os-theme-dark', classNameAllowedValues],                //null || string\n                    resize: ['none', resizeAllowedValues],                               //none || both  || horizontal || vertical || n || b || h || v\n                    sizeAutoCapable: booleanTrueTemplate,                                //true || false\n                    clipAlways: booleanTrueTemplate,                                     //true || false\n                    normalizeRTL: booleanTrueTemplate,                                   //true || false\n                    paddingAbsolute: booleanFalseTemplate,                               //true || false\n                    autoUpdate: [null, booleanNullAllowedValues],                        //true || false || null\n                    autoUpdateInterval: [33, numberAllowedValues],                       //number\n                    nativeScrollbarsOverlaid: {                                          \n                        showNativeScrollbars: booleanFalseTemplate,                      //true || false\n                        initialize: booleanTrueTemplate                                  //true || false\n                    },                                                                   \n                    overflowBehavior: {                                                  \n                        x: ['scroll', overflowBehaviorAllowedValues],                    //visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\n                        y: ['scroll', overflowBehaviorAllowedValues]                     //visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\n                    },\n                    scrollbars: {\n                        visibility: ['auto', scrollbarsVisibilityAllowedValues],         //visible || hidden || auto || v || h || a\n                        autoHide: ['never', scrollbarsAutoHideAllowedValues],            //never || scroll || leave || move || n || s || l || m\n                        autoHideDelay: [800, numberAllowedValues],                       //number\n                        dragScrolling: booleanTrueTemplate,                              //true || false\n                        clickScrolling: booleanFalseTemplate,                            //true || false\n                        touchSupport: booleanTrueTemplate                                //true || false\n                    },\n                    textarea: {\n                        dynWidth: booleanFalseTemplate,                                  //true || false\n                        dynHeight: booleanFalseTemplate,                                 //true || false\n                        inheritedAttrs : inheritedAttrsTemplate,                         //string || array || null\n                    },\n                    callbacks: {\n                        onInitialized: callbackTemplate,                                 //null || function\n                        onInitializationWithdrawn: callbackTemplate,                     //null || function\n                        onDestroyed: callbackTemplate,                                   //null || function\n                        onScrollStart: callbackTemplate,                                 //null || function\n                        onScroll: callbackTemplate,                                      //null || function\n                        onScrollStop: callbackTemplate,                                  //null || function\n                        onOverflowChanged: callbackTemplate,                             //null || function\n                        onOverflowAmountChanged: callbackTemplate,                       //null || function\n                        onDirectionChanged: callbackTemplate,                            //null || function\n                        onContentSizeChanged: callbackTemplate,                          //null || function\n                        onHostSizeChanged: callbackTemplate,                             //null || function\n                        onUpdated: callbackTemplate                                      //null || function\n                    }\n                };\n                var convert = function(template) {\n                    var recursive = function(obj) {\n                        var key;\n                        var val;\n                        var valType;\n                        for(key in obj) {\n                            if(!obj.hasOwnProperty(key))\n                                continue;\n                            val = obj[key];\n                            valType = COMPATIBILITY.type(val);\n                            if(valType == TYPES.a)\n                                obj[key] = val[template ? 1 : 0];\n                            else if(valType == TYPES.o)\n                                obj[key] = recursive(val);\n                        }\n                        return obj;\n                    };\n                    return recursive(FRAMEWORK.extend(true, { }, optionsDefaultsAndTemplate));\n                };\n\n                return {\n                    //defaults\n                    d : convert(),\n\n                    //template\n                    t : convert(true),\n\n                    //validate\n                    /**\n                     * Validates the passed object by the passed template.\n                     * @param obj The object which shall be validated.\n                     * @param template The template which defines the allowed values and types.\n                     * @param writeErrors True if errors shall be logged to the console.\n                     * @param usePreparedValues True if the validated main values shall be returned in the validated object, false otherwise.\n                     * @param keepForeignProps True if properties which aren't in the template shall be added to the validated object, false otherwise.\n                     * @returns {{}} A object which contains only the valid properties of the passed original object.\n                     */\n                    v : function (obj, template, writeErrors, usePreparedValues, keepForeignProps) {\n                        var validatedOptions = { };\n                        var objectCopy = FRAMEWORK.extend(true, { }, obj);\n                        var checkObjectProps = function(data, template, validatedOptions, prevPropName) {\n                            for (var prop in template) {\n                                if (template.hasOwnProperty(prop) && data.hasOwnProperty(prop)) {\n                                    var isValid = false;\n                                    var templateValue = template[prop];\n                                    var templateValueType = COMPATIBILITY.type(templateValue);\n                                    var templateIsComplext = templateValueType == TYPES.o;\n                                    var templateTypes = COMPATIBILITY.type(templateValue) != TYPES.a ? [ templateValue ] : templateValue;\n                                    var dataValue = data[prop];\n                                    var dataValueType = COMPATIBILITY.type(dataValue);\n                                    var propPrefix = prevPropName ? prevPropName + \".\" : \"\";\n                                    var error = \"The option \\\"\" + propPrefix + prop + \"\\\" wasn't set, because\";\n                                    var errorPossibleTypes = [ ];\n                                    var errorRestrictedStrings = [ ];\n                                    var restrictedStringValuesSplit;\n                                    var restrictedStringValuesPossibilitiesSplit;\n                                    var isRestrictedValue;\n                                    var mainPossibility;\n                                    var currType;\n                                    var i;\n                                    var v;\n                                    var j;\n\n                                    //if the template has a object as value, it means that the options are complex (verschachtelt)\n                                    if(templateIsComplext && dataValueType == TYPES.o) {\n                                        validatedOptions[prop] = { };\n                                        checkObjectProps(dataValue, templateValue, validatedOptions[prop], propPrefix + prop);\n                                        if(FRAMEWORK.isEmptyObject(dataValue))\n                                            delete data[prop];\n                                    }\n                                    else if(!templateIsComplext) {\n                                        for(i = 0; i < templateTypes.length; i++) {\n                                            currType = templateTypes[i];\n                                            templateValueType = COMPATIBILITY.type(currType);\n                                            //if currtype is string and starts with restrictedStringPrefix and end with restrictedStringSuffix\n                                            isRestrictedValue = templateValueType == TYPES.s && FRAMEWORK.inArray(currType, possibleTemplateTypes) === -1;\n                                            if(isRestrictedValue) {\n                                                errorPossibleTypes.push(TYPES.s);\n\n                                                //split it into a array which contains all possible values for example: [\"y:yes\", \"n:no\", \"m:maybe\"]\n                                                restrictedStringValuesSplit = currType.split(restrictedStringsSplit);\n                                                errorRestrictedStrings = errorRestrictedStrings.concat(restrictedStringValuesSplit);\n                                                for(v = 0; v < restrictedStringValuesSplit.length; v++) {\n                                                    //split the possible values into their possibiliteis for example: [\"y\", \"yes\"] -> the first is always the mainPossibility\n                                                    restrictedStringValuesPossibilitiesSplit = restrictedStringValuesSplit[v].split(restrictedStringsPossibilitiesSplit);\n                                                    mainPossibility = restrictedStringValuesPossibilitiesSplit[0];\n                                                    for(j = 0; j < restrictedStringValuesPossibilitiesSplit.length; j++) {\n                                                        //if any possibility matches with the dataValue, its valid\n                                                        if(dataValue === restrictedStringValuesPossibilitiesSplit[j]) {\n                                                            isValid = true;\n                                                            break;\n                                                        }\n                                                    }\n                                                    if(isValid)\n                                                        break;\n                                                }\n                                            }\n                                            else {\n                                                errorPossibleTypes.push(currType);\n\n                                                if(dataValueType === currType) {\n                                                    isValid = true;\n                                                    break;\n                                                }\n                                            }\n                                        }\n\n                                        if(isValid) {\n                                            validatedOptions[prop] = isRestrictedValue && usePreparedValues ? mainPossibility : dataValue;\n                                        }\n                                        else if(writeErrors) {\n                                            console.warn(error + \" it doesn't accept the type [ \" + dataValueType.toUpperCase() + \" ] with the value of \\\"\" + dataValue + \"\\\".\\r\\n\" +\n                                                \"Accepted types are: [ \" + errorPossibleTypes.join(\", \").toUpperCase() + \" ].\" +\n                                                (errorRestrictedStrings.length > 0 ? \"\\r\\nValid strings are: [ \" + errorRestrictedStrings.join(\", \").split(restrictedStringsPossibilitiesSplit).join(\", \") + \" ].\" : \"\"));\n                                        }\n                                        delete data[prop];\n                                    }\n                                }\n                            }\n                        };\n                        checkObjectProps(objectCopy, template, validatedOptions);\n\n                        //add values which aren't specified in the template to the finished validated object to prevent them from being discarded\n                        if(keepForeignProps)\n                            FRAMEWORK.extend(true, validatedOptions, objectCopy);\n                        else if(!FRAMEWORK.isEmptyObject(objectCopy) && writeErrors)\n                            console.warn(\"The following options are discarded due to invalidity:\\r\\n\" + window.JSON.stringify(objectCopy, null, 2));\n\n                        return validatedOptions;\n                    }\n                }\n            }());\n\n            /**\n             * Initializes the object which contains global information about the plugin and each instance of it.\n             */\n            function initOverlayScrollbarsStatics() {\n                if(!_pluginsGlobals)\n                    _pluginsGlobals = new OverlayScrollbarsGlobals(_pluginsOptions.d);\n                if(!_pluginsAutoUpdateLoop)\n                    _pluginsAutoUpdateLoop = new OverlayScrollbarsAutoUpdateLoop(_pluginsGlobals);\n            }\n\n            /**\n             * The global object for the OverlayScrollbars objects. It contains resources which every OverlayScrollbars object needs. This object is initialized only once: if the first OverlayScrollbars object gets initialized.\n             * @param defaultOptions\n             * @constructor\n             */\n            function OverlayScrollbarsGlobals(defaultOptions) {\n                var _base = this;\n                var strOverflow = 'overflow';\n                var strHidden = 'hidden';\n                var strScroll = 'scroll';\n                var bodyElement = FRAMEWORK('body');\n                var scrollbarDummyElement = FRAMEWORK('<div id=\"os-dummy-scrollbar-size\"><div></div></div>');\n                var scrollbarDummyElement0 = scrollbarDummyElement[0];\n                var dummyContainerChild = FRAMEWORK(scrollbarDummyElement.children('div').eq(0));\n\n                bodyElement.append(scrollbarDummyElement);\n                scrollbarDummyElement.hide().show(); //fix IE8 bug (incorrect measuring)\n                \n                var nativeScrollbarSize = calcNativeScrollbarSize(scrollbarDummyElement0);\n                var nativeScrollbarIsOverlaid = {\n                    x: nativeScrollbarSize.x === 0,\n                    y: nativeScrollbarSize.y === 0\n                };\n\n                FRAMEWORK.extend(_base, {\n                    defaultOptions : defaultOptions,\n                    autoUpdateLoop : false,\n                    autoUpdateRecommended : !COMPATIBILITY.mO(),\n                    nativeScrollbarSize : nativeScrollbarSize,\n                    nativeScrollbarIsOverlaid : nativeScrollbarIsOverlaid,\n                    nativeScrollbarStyling : (function() {\n                        scrollbarDummyElement.addClass('os-viewport-native-scrollbars-invisible');\n                        //fix opera bug: scrollbar styles will only appear if overflow value is scroll or auto during the activation of the style.\n                        //and set overflow to scroll\n                        scrollbarDummyElement.css(strOverflow, strHidden).hide().css(strOverflow, strScroll).show();\n                        return (scrollbarDummyElement0[LEXICON.oH] - scrollbarDummyElement0[LEXICON.cH]) === 0 && (scrollbarDummyElement0[LEXICON.oW] - scrollbarDummyElement0[LEXICON.cW]) === 0;\n                    })(),\n                    overlayScrollbarDummySize : { x: 30, y: 30 },\n                    msie : (function() {\n                        var ua = window.navigator.userAgent;\n                        var strIndexOf = 'indexOf';\n                        var strSubString = 'substring';\n                        var msie = ua[strIndexOf]('MSIE ');\n                        var trident = ua[strIndexOf]('Trident/');\n                        var edge = ua[strIndexOf]('Edge/');\n                        var rv = ua[strIndexOf]('rv:');\n                        var result;\n                        var parseIntFunc = parseInt;\n\n                        // IE 10 or older => return version number\n                        if (msie > 0)\n                            result = parseIntFunc(ua[strSubString](msie + 5, ua[strIndexOf]('.', msie)), 10);\n\n                        // IE 11 => return version number\n                        else if (trident > 0)\n                            result = parseIntFunc(ua[strSubString](rv + 3, ua[strIndexOf]('.', rv)), 10);\n\n                        // Edge (IE 12+) => return version number\n                        else if (edge > 0)\n                            result = parseIntFunc(ua[strSubString](edge + 5, ua[strIndexOf]('.', edge)), 10);\n\n                        // other browser\n                        return result;\n                    })(),\n                    cssCalc : (function() {\n                        var dummy = document.createElement('div');\n                        var props = ['calc', '-webkit-calc', '-moz-calc', '-o-calc'];\n                        var i;\n                        var prop;\n\n                        for (i = 0; i < props.length; ++i) {\n                            prop = props[i];\n                            dummy[LEXICON.s].cssText = 'width:' + prop + '(1px);';\n                            if (dummy[LEXICON.s].length)\n                                return prop;\n                        }\n                        return null;\n                    })(),\n                    restrictedMeasuring : (function() {\n                        //https://bugzilla.mozilla.org/show_bug.cgi?id=1439305\n                        scrollbarDummyElement.css(strOverflow, strHidden);\n                        var scrollSize = {\n                            w : scrollbarDummyElement0[LEXICON.sW],\n                            h : scrollbarDummyElement0[LEXICON.sH]\n                        };\n                        scrollbarDummyElement.css(strOverflow, 'visible');\n                        var scrollSize2 = {\n                            w : scrollbarDummyElement0[LEXICON.sW],\n                            h : scrollbarDummyElement0[LEXICON.sH]\n                        };\n                        return (scrollSize.w - scrollSize2.w) !== 0 || (scrollSize.h - scrollSize2.h) !== 0;\n                    })(),\n                    rtlScrollBehavior : (function() {\n                        scrollbarDummyElement.css({ 'overflow-y' : strHidden, 'overflow-x' : strScroll, 'direction' : 'rtl' }).scrollLeft(0);\n                        var dummyContainerOffset = scrollbarDummyElement.offset();\n                        var dummyContainerChildOffset = dummyContainerChild.offset();\n                        scrollbarDummyElement.scrollLeft(999);\n                        var dummyContainerScrollOffsetAfterScroll = dummyContainerChild.offset();\n                        return {\n                            //origin direction = determines if the zero scroll position is on the left or right side\n                            //'i' means 'invert' (i === true means that the axis must be inverted to be correct)\n                            //true = on the left side\n                            //false = on the right side\n                            i : dummyContainerOffset.left === dummyContainerChildOffset.left,\n                            //negative = determines if the maximum scroll is positive or negative\n                            //'n' means 'negate' (n === true means that the axis must be negated to be correct)\n                            //true = negative\n                            //false = positive\n                            n : dummyContainerChildOffset.left - dummyContainerScrollOffsetAfterScroll.left === 0\n                        };\n                    })(),\n                    supportTransform : detectCSSFeature('transform'),\n                    supportTransition : detectCSSFeature('transition'),\n                    supportPassiveEvents : (function() {\n                        var supportsPassive = false;\n                        try {\n                            window.addEventListener('test', null, Object.defineProperty({ }, 'passive', {\n                                get: function() {\n                                    supportsPassive = true;\n                                }\n                            }));\n                        } catch (e) { }\n                        return supportsPassive;\n                    })(),\n                    supportResizeObserver : !!COMPATIBILITY.rO(),\n                    supportMutationObserver : !!COMPATIBILITY.mO()\n                });\n\n                scrollbarDummyElement.removeAttr(LEXICON.s).remove();\n\n                //Catch zoom event:\n                (function () {\n                    if(nativeScrollbarIsOverlaid.x && nativeScrollbarIsOverlaid.y)\n                        return;\n\n                    var abs = MATH.abs;\n                    var windowWidth = COMPATIBILITY.wW();\n                    var windowHeight = COMPATIBILITY.wH();\n                    var windowDpr = getWindowDPR();\n                    var onResize = function() {\n                        if(INSTANCES().length > 0) {\n                            var newW = COMPATIBILITY.wW();\n                            var newH = COMPATIBILITY.wH();\n                            var deltaW = newW - windowWidth;\n                            var deltaH = newH - windowHeight;\n\n                            if (deltaW === 0 && deltaH === 0)\n                                return;\n\n                            var deltaWRatio = MATH.round(newW / (windowWidth / 100.0));\n                            var deltaHRatio = MATH.round(newH / (windowHeight / 100.0));\n                            var absDeltaW = abs(deltaW);\n                            var absDeltaH = abs(deltaH);\n                            var absDeltaWRatio = abs(deltaWRatio);\n                            var absDeltaHRatio = abs(deltaHRatio);\n                            var newDPR = getWindowDPR();\n\n                            var deltaIsBigger = absDeltaW > 2 && absDeltaH > 2;\n                            var difference = !differenceIsBiggerThanOne(absDeltaWRatio, absDeltaHRatio);\n                            var dprChanged = newDPR !== windowDpr && windowDpr > 0;\n                            var isZoom = deltaIsBigger && difference && dprChanged;\n                            var oldScrollbarSize = _base.nativeScrollbarSize;\n                            var newScrollbarSize;\n\n                            if (isZoom) {\n                                bodyElement.append(scrollbarDummyElement);\n                                newScrollbarSize = _base.nativeScrollbarSize = calcNativeScrollbarSize(scrollbarDummyElement[0]);\n                                scrollbarDummyElement.remove();\n                                if(oldScrollbarSize.x !== newScrollbarSize.x || oldScrollbarSize.y !== newScrollbarSize.y) {\n                                    FRAMEWORK.each(INSTANCES(), function () {\n                                        if(INSTANCES(this))\n                                            INSTANCES(this).update('zoom');\n                                    });\n                                }\n                            }\n\n                            windowWidth = newW;\n                            windowHeight = newH;\n                            windowDpr = newDPR;\n                        }\n                    };\n                    \n                    function differenceIsBiggerThanOne(valOne, valTwo) {\n                        var absValOne = abs(valOne);\n                        var absValTwo = abs(valTwo);\n                        return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\n                    }\n\n                    function getWindowDPR() {\n                        var dDPI = window.screen.deviceXDPI || 0;\n                        var sDPI = window.screen.logicalXDPI || 1;\n                        return window.devicePixelRatio || (dDPI / sDPI);\n                    }\n                    \n                    FRAMEWORK(window).on('resize', onResize);\n                })();\n\n                function detectCSSFeature(featurename) {\n                    var feature = false;\n                    var domPrefixes = 'Webkit Moz ms O'.split(' ');\n                    var elm = document.createElement('div');\n                    var featurenameCapital = null;\n                    var i = 0;\n\n                    featurename = featurename.toLowerCase();\n\n                    if (elm[LEXICON.s][featurename] !== undefined)\n                        feature = true;\n\n                    if (!feature) {\n                        featurenameCapital = featurename.charAt(0).toUpperCase() + featurename.substr(1);\n                        for (; i < domPrefixes.length; i++) {\n                            if (elm[LEXICON.s][domPrefixes[i] + featurenameCapital] !== undefined) {\n                                feature = true;\n                                break;\n                            }\n                        }\n                    }\n                    return feature;\n                }\n\n                function calcNativeScrollbarSize(measureElement) {\n                    return {\n                        x: measureElement[LEXICON.oH] - measureElement[LEXICON.cH],\n                        y: measureElement[LEXICON.oW] - measureElement[LEXICON.cW]\n                    };\n                }\n            }\n\n            /**\n             * The object which manages the auto update loop for all OverlayScrollbars objects. This object is initialized only once: if the first OverlayScrollbars object gets initialized.\n             * @constructor\n             */\n            function OverlayScrollbarsAutoUpdateLoop(globals) {\n                var _base = this;\n                var _strAutoUpdate = 'autoUpdate';\n                var _strAutoUpdateInterval = _strAutoUpdate + 'Interval';\n                var _strLength = LEXICON.l;\n\n                var _loopingInstances = [ ];\n                var _loopingInstancesIntervalCache = [ ];\n                var _loopIsActive = false;\n                var _loopIntervalDefault = 33;\n                var _loopInterval = _loopIntervalDefault;\n                var _loopTimeOld  = COMPATIBILITY.now();\n                var _loopID;\n\n                /**\n                 * The auto update loop which will run every 50 milliseconds or less if the update interval of a instance is lower than 50 milliseconds.\n                 */\n                var loop = function() {\n                    if(_loopingInstances[_strLength] > 0 && _loopIsActive) {\n                        _loopID = COMPATIBILITY.rAF()(function () {\n                            loop();\n                        });\n                        var timeNew = COMPATIBILITY.now();\n                        var timeDelta = timeNew - _loopTimeOld;\n\n                        if (timeDelta > _loopInterval) {\n                            _loopTimeOld = timeNew - (timeDelta % _loopInterval);\n                            var lowestInterval = _loopIntervalDefault;\n                            for(var i = 0; i < _loopingInstances[_strLength]; i++) {\n                                var instance = _loopingInstances[i];\n                                if (instance !== undefined) {\n                                    var instanceOptions = instance.options();\n                                    var instanceAutoUpdateAllowed = instanceOptions[_strAutoUpdate];\n                                    var instanceAutoUpdateInterval = MATH.max(1, instanceOptions[_strAutoUpdateInterval]);\n                                    var now = COMPATIBILITY.now();\n                                    if ((instanceAutoUpdateAllowed === true || instanceAutoUpdateAllowed === null) && (now - _loopingInstancesIntervalCache[i]) > instanceAutoUpdateInterval) {\n                                        instance.update('auto');\n                                        _loopingInstancesIntervalCache[i] = new Date(now += instanceAutoUpdateInterval);\n                                    }\n                                    lowestInterval = MATH.max(1, MATH.min(lowestInterval, instanceAutoUpdateInterval));\n                                }\n                            }\n                            _loopInterval = lowestInterval;\n                        }\n                    } else {\n                        _loopInterval = _loopIntervalDefault;\n                    }\n                };\n\n                /**\n                 * Add OverlayScrollbars instance to the auto update loop. Only successful if the instance isn't already added.\n                 * @param instance The instance which shall be updated in a loop automatically.\n                 */\n                _base.add = function(instance) {\n                    if(FRAMEWORK.inArray(instance, _loopingInstances) === -1) {\n                        _loopingInstances.push(instance);\n                        _loopingInstancesIntervalCache.push(COMPATIBILITY.now());\n                        if (_loopingInstances[_strLength] > 0 && !_loopIsActive) {\n                            _loopIsActive = true;\n                            globals.autoUpdateLoop = _loopIsActive;\n                            loop();\n                        }\n                    }\n                };\n\n                /**\n                 * Remove OverlayScrollbars instance from the auto update loop. Only successful if the instance was added before.\n                 * @param instance The instance which shall be updated in a loop automatically.\n                 */\n                _base.remove = function(instance) {\n                    var index = FRAMEWORK.inArray(instance, _loopingInstances);\n                    if(index > -1) {\n                        //remove from loopingInstances list\n                        _loopingInstancesIntervalCache.splice(index, 1);\n                        _loopingInstances.splice(index, 1);\n\n                        //correct update loop behavior\n                        if (_loopingInstances[_strLength] === 0 && _loopIsActive) {\n                            _loopIsActive = false;\n                            globals.autoUpdateLoop = _loopIsActive;\n                            if(_loopID !== undefined) {\n                                COMPATIBILITY.cAF()(_loopID);\n                                _loopID = -1;\n                            }\n                        }\n                    }\n                };\n            }\n\n            /**\n             * A object which manages the scrollbars visibility of the target element.\n             * @param pluginTargetElement The element from which the scrollbars shall be hidden.\n             * @param options The custom options.\n             * @param extensions The custom extensions.\n             * @param globals\n             * @param autoUpdateLoop\n             * @returns {*}\n             * @constructor\n             */\n            function OverlayScrollbarsInstance(pluginTargetElement, options, extensions, globals, autoUpdateLoop) {\n                //if passed element is no HTML element: skip and return\n                if(!isHTMLElement(pluginTargetElement))\n                    return;\n\n                //if passed element is already initialized: set passed options if there are any and return its instance\n                if(INSTANCES(pluginTargetElement)) {\n                    var inst = INSTANCES(pluginTargetElement);\n                    inst.options(options);\n                    return inst;\n                }\n\n                //make correct instanceof\n                var _base = new window[PLUGINNAME]();\n                var _frameworkProto = FRAMEWORK[LEXICON.p];\n\n                //globals:\n                var _nativeScrollbarIsOverlaid;\n                var _overlayScrollbarDummySize;\n                var _rtlScrollBehavior;\n                var _autoUpdateRecommended;\n                var _msieVersion;\n                var _nativeScrollbarStyling;\n                var _cssCalc;\n                var _nativeScrollbarSize;\n                var _supportTransition;\n                var _supportTransform;\n                var _supportPassiveEvents;\n                var _supportResizeObserver;\n                var _supportMutationObserver;\n                var _restrictedMeasuring;\n\n                //general readonly:\n                var _initialized;\n                var _destroyed;\n                var _isTextarea;\n                var _isBody;\n                var _documentMixed;\n                var _isTextareaHostGenerated;\n\n                //general:\n                var _isBorderBox;\n                var _sizeAutoObserverAdded;\n                var _paddingX;\n                var _paddingY;\n                var _borderX;\n                var _borderY;\n                var _marginX;\n                var _marginY;\n                var _isRTL;\n                var _isSleeping;\n                var _contentBorderSize = { };\n                var _scrollHorizontalInfo = { };\n                var _scrollVerticalInfo = { };\n                var _viewportSize = { };\n                var _nativeScrollbarMinSize = { };\n\n                //naming:\n                var _strMinusHidden = '-hidden';\n                var _strMarginMinus = 'margin-';\n                var _strPaddingMinus = 'padding-';\n                var _strBorderMinus = 'border-';\n                var _strTop = 'top';\n                var _strRight = 'right';\n                var _strBottom = 'bottom';\n                var _strLeft = 'left';\n                var _strMinMinus = 'min-';\n                var _strMaxMinus = 'max-';\n                var _strWidth = 'width';\n                var _strHeight = 'height';\n                var _strFloat = 'float';\n                var _strEmpty = '';\n                var _strAuto = 'auto';\n                var _strScroll = 'scroll';\n                var _strHundredPercent = '100%';\n                var _strX = 'x';\n                var _strY = 'y';\n                var _strDot = '.';\n                var _strSpace = ' ';\n                var _strScrollbar = 'scrollbar';\n                var _strMinusHorizontal = '-horizontal';\n                var _strMinusVertical = '-vertical';\n                var _strScrollLeft = _strScroll + 'Left';\n                var _strScrollTop = _strScroll + 'Top';\n                var _strMouseTouchDownEvent = 'mousedown touchstart';\n                var _strMouseTouchUpEvent = 'mouseup touchend touchcancel';\n                var _strMouseTouchMoveEvent = 'mousemove touchmove';\n                var _strMouseTouchEnter = 'mouseenter';\n                var _strMouseTouchLeave = 'mouseleave';\n                var _strKeyDownEvent = 'keydown';\n                var _strKeyUpEvent = 'keyup';\n                var _strSelectStartEvent = 'selectstart';\n                var _strTransitionEndEvent = 'transitionend webkitTransitionEnd oTransitionEnd';\n                var _strResizeObserverProperty = '__overlayScrollbarsRO__';\n\n                //class names:\n                var _cassNamesPrefix = 'os-';\n                var _classNameHTMLElement = _cassNamesPrefix + 'html';\n                var _classNameHostElement = _cassNamesPrefix + 'host';\n                var _classNameHostTextareaElement = _classNameHostElement + '-textarea';\n                var _classNameHostScrollbarHorizontalHidden = _classNameHostElement + '-' + _strScrollbar + _strMinusHorizontal + _strMinusHidden;\n                var _classNameHostScrollbarVerticalHidden = _classNameHostElement + '-' + _strScrollbar + _strMinusVertical + _strMinusHidden;\n                var _classNameHostTransition = _classNameHostElement + '-transition';\n                var _classNameHostRTL = _classNameHostElement + '-rtl';\n                var _classNameHostResizeDisabled = _classNameHostElement + '-resize-disabled';\n                var _classNameHostScrolling = _classNameHostElement + '-scrolling';\n                var _classNameHostOverflow = _classNameHostElement + '-overflow';\n                var _classNameHostOverflowX = _classNameHostOverflow + '-x';\n                var _classNameHostOverflowY = _classNameHostOverflow + '-y';\n                var _classNameTextareaElement = _cassNamesPrefix + 'textarea';\n                var _classNameTextareaCoverElement = _classNameTextareaElement + '-cover';\n                var _classNamePaddingElement = _cassNamesPrefix + 'padding';\n                var _classNameViewportElement = _cassNamesPrefix + 'viewport';\n                var _classNameViewportNativeScrollbarsInvisible = _classNameViewportElement + '-native-scrollbars-invisible';\n                var _classNameViewportNativeScrollbarsOverlaid = _classNameViewportElement + '-native-scrollbars-overlaid';\n                var _classNameContentElement = _cassNamesPrefix + 'content';\n                var _classNameContentArrangeElement = _cassNamesPrefix + 'content-arrange';\n                var _classNameContentGlueElement = _cassNamesPrefix + 'content-glue';\n                var _classNameSizeAutoObserverElement = _cassNamesPrefix + 'size-auto-observer';\n                var _classNameResizeObserverElement = _cassNamesPrefix + 'resize-observer';\n                var _classNameResizeObserverItemElement = _cassNamesPrefix + 'resize-observer-item';\n                var _classNameResizeObserverItemFinalElement = _classNameResizeObserverItemElement + '-final';\n                var _classNameTextInherit = _cassNamesPrefix + 'text-inherit';\n                var _classNameScrollbar = _cassNamesPrefix + _strScrollbar;\n                var _classNameScrollbarTrack = _classNameScrollbar + '-track';\n                var _classNameScrollbarTrackOff = _classNameScrollbarTrack + '-off';\n                var _classNameScrollbarHandle = _classNameScrollbar + '-handle';\n                var _classNameScrollbarHandleOff = _classNameScrollbarHandle + '-off';\n                var _classNameScrollbarUnusable = _classNameScrollbar + '-unusable';\n                var _classNameScrollbarAutoHidden = _classNameScrollbar + '-' + _strAuto + _strMinusHidden;\n                var _classNameScrollbarCorner = _classNameScrollbar + '-corner';\n                var _classNameScrollbarCornerResize = _classNameScrollbarCorner + '-resize';\n                var _classNameScrollbarCornerResizeB = _classNameScrollbarCornerResize + '-both';\n                var _classNameScrollbarCornerResizeH = _classNameScrollbarCornerResize + _strMinusHorizontal;\n                var _classNameScrollbarCornerResizeV = _classNameScrollbarCornerResize + _strMinusVertical;\n                var _classNameScrollbarHorizontal = _classNameScrollbar + _strMinusHorizontal;\n                var _classNameScrollbarVertical = _classNameScrollbar + _strMinusVertical;\n                var _classNameDragging = _cassNamesPrefix + 'dragging';\n                var _classNameThemeNone = _cassNamesPrefix + 'theme-none';\n\n                //callbacks:\n                var _callbacksInitQeueue = [ ];\n                \n                //options:\n                var _defaultOptions;\n                var _currentOptions;\n                var _currentPreparedOptions;\n\n                //extensions:\n                var _extensions = { };\n                var _extensionsPrivateMethods = \"added removed on contract\";\n\n                //update\n                var _lastUpdateTime;\n                var _swallowedUpdateParams = { };\n                var _swallowedUpdateTimeout;\n                var _swallowUpdateLag = 42;\n                var _imgs = [ ];\n\n                //DOM elements:\n                var _windowElement;\n                var _documentElement;\n                var _htmlElement;\n                var _bodyElement;\n                var _targetElement;                     //the target element of this OverlayScrollbars object\n                var _hostElement;                       //the host element of this OverlayScrollbars object -> may be the same as targetElement\n                var _sizeAutoObserverElement;           //observes size auto changes\n                var _sizeObserverElement;               //observes size and padding changes\n                var _contentGlueElement;                //has always the size of the content element\n                var _paddingElement;                    //manages the padding\n                var _viewportElement;                   //is the viewport of our scrollbar model\n                var _contentArrangeElement;             //is needed for correct sizing of the content element (only if native scrollbars are overlays)\n                var _contentElement;                    //the element which holds the content\n                var _textareaCoverElement;              //only applied if target is a textarea element. Used for correct size calculation and for prevention of uncontrolled scrolling\n                var _scrollbarCornerElement;\n                var _scrollbarHorizontalElement;\n                var _scrollbarHorizontalTrackElement;\n                var _scrollbarHorizontalHandleElement;\n                var _scrollbarVerticalElement;\n                var _scrollbarVerticalTrackElement;\n                var _scrollbarVerticalHandleElement;\n\n                //Cache:\n                var _hostSizeCache;\n                var _contentScrollSizeCache;\n                var _arrangeContentSizeCache;\n                var _hasOverflowCache;\n                var _hideOverflowCache;\n                var _widthAutoCache;\n                var _heightAutoCache;\n                var _cssMaxValueCache;\n                var _cssBoxSizingCache;\n                var _cssPaddingCache;\n                var _cssBorderCache;\n                var _cssMarginCache;\n                var _cssDirectionCache;\n                var _cssDirectionDetectedCache;\n                var _paddingAbsoluteCache;\n                var _clipAlwaysCache;\n                var _contentGlueSizeCache;\n                var _overflowBehaviorCache;\n                var _overflowAmountCache;\n                var _ignoreOverlayScrollbarHidingCache;\n                var _autoUpdateCache;\n                var _sizeAutoCapableCache;\n                var _textareaAutoWrappingCache;\n                var _textareaInfoCache;\n                var _updateAutoHostElementIdCache;\n                var _updateAutoHostElementClassCache;\n                var _updateAutoHostElementStyleCache;\n                var _updateAutoHostElementVisibleCache;\n                var _updateAutoTargetElementRowsCache;\n                var _updateAutoTargetElementColsCache;\n                var _updateAutoTargetElementWrapCache;\n                var _contentElementScrollSizeChangeDetectedCache;\n                var _hostElementSizeChangeDetectedCache;\n                var _scrollbarsVisibilityCache;\n                var _scrollbarsAutoHideCache;\n                var _scrollbarsClickScrollingCache;\n                var _scrollbarsDragScrollingCache;\n                var _resizeCache;\n                var _normalizeRTLCache;\n                var _classNameCache;\n                var _oldClassName;\n                var _textareaDynHeightCache;\n                var _textareaDynWidthCache;\n                var _bodyMinSizeCache;\n                var _viewportScrollSizeCache;\n                var _displayIsHiddenCache;\n\n                //MutationObserver:\n                var _mutationObserverHost;\n                var _mutationObserverContent;\n                var _mutationObserversConnected;\n\n                //textarea:\n                var _textareaEvents;\n                var _textareaHasFocus;\n\n                //scrollbars:\n                var _scrollbarsAutoHideTimeoutId;\n                var _scrollbarsAutoHideMoveTimeoutId;\n                var _scrollbarsAutoHideDelay;\n                var _scrollbarsAutoHideNever;\n                var _scrollbarsAutoHideScroll;\n                var _scrollbarsAutoHideMove;\n                var _scrollbarsAutoHideLeave;\n                var _scrollbarsTouchSupport;\n                var _scrollbarsAutoHideFlagScrollAndHovered;\n\n                //resize\n                var _resizeReconnectMutationObserver;\n                var _resizeNone;\n                var _resizeBoth;\n                var _resizeHorizontal;\n                var _resizeVertical;\n                var _resizeOnMouseTouchDown;\n\n\n                //==== Passive Event Listener ====//\n\n                /**\n                 * Adds a passive event listener to the given element.\n                 * @param element The element to which the event listener shall be applied.\n                 * @param eventNames The name(s) of the event listener.\n                 * @param listener The listener method which shall be called.\n                 */\n                function addPassiveEventListener(element, eventNames, listener) {\n                    var events = eventNames.split(_strSpace);\n                    for (var i = 0; i < events.length; i++)\n                        element[0].addEventListener(events[i], listener, {passive: true});\n                }\n\n                /**\n                 * Removes a passive event listener to the given element.\n                 * @param element The element from which the event listener shall be removed.\n                 * @param eventNames The name(s) of the event listener.\n                 * @param listener The listener method which shall be removed.\n                 */\n                function removePassiveEventListener(element, eventNames, listener) {\n                    var events = eventNames.split(_strSpace);\n                    for (var i = 0; i < events.length; i++)\n                        element[0].removeEventListener(events[i], listener, {passive: true});\n                }\n\n\n                //==== Resize Observer ====//\n\n                /**\n                 * Adds a resize observer to the given element.\n                 * @param targetElement The element to which the resize observer shall be applied.\n                 * @param onElementResizedCallback The callback which is fired every time the resize observer registers a size change.\n                 */\n                function addResizeObserver(targetElement, onElementResizedCallback) {\n                    var constMaximum = 3333333;\n                    var resizeObserver = COMPATIBILITY.rO();\n                    var strAnimationStartEvent = 'animationstart mozAnimationStart webkitAnimationStart MSAnimationStart';\n                    var strChildNodes = 'childNodes';\n                    var callback = function () {\n                        targetElement[_strScrollTop](constMaximum)[_strScrollLeft](_isRTL ? _rtlScrollBehavior.n ? -constMaximum : _rtlScrollBehavior.i ? 0 : constMaximum : constMaximum);\n                        onElementResizedCallback();\n                    };\n                    if (_supportResizeObserver) {\n                        var element = targetElement.append(generateDiv(_classNameResizeObserverElement + ' observed')).contents()[0];\n                        var observer = element[_strResizeObserverProperty] = new resizeObserver(callback);\n                        observer.observe(element);\n                    }\n                    else {\n                        if (_msieVersion > 9 || !_autoUpdateRecommended) {\n                            targetElement.prepend(\n                                generateDiv(_classNameResizeObserverElement,\n                                    generateDiv({ className : _classNameResizeObserverItemElement, dir : \"ltr\" },\n                                        generateDiv(_classNameResizeObserverItemElement,\n                                            generateDiv(_classNameResizeObserverItemFinalElement)\n                                        ) +\n                                        generateDiv(_classNameResizeObserverItemElement,\n                                            generateDiv({ className : _classNameResizeObserverItemFinalElement, style : 'width: 200%; height: 200%' })\n                                        )\n                                    )\n                                )\n                            );\n\n                            var observerElement = targetElement[0][strChildNodes][0][strChildNodes][0];\n                            var shrinkElement = FRAMEWORK(observerElement[strChildNodes][1]);\n                            var expandElement = FRAMEWORK(observerElement[strChildNodes][0]);\n                            var expandElementChild = FRAMEWORK(expandElement[0][strChildNodes][0]);\n                            var widthCache = observerElement[LEXICON.oW];\n                            var heightCache = observerElement[LEXICON.oH];\n                            var isDirty;\n                            var rAFId;\n                            var currWidth;\n                            var currHeight;\n                            var factor = 2;\n                            var nativeScrollbarSize = globals.nativeScrollbarSize; //care don't make changes to this object!!!\n                            var reset = function () {\n                                /*\n                                 var sizeResetWidth = observerElement[LEXICON.oW] + nativeScrollbarSize.x * factor + nativeScrollbarSize.y * factor + _overlayScrollbarDummySize.x + _overlayScrollbarDummySize.y;\n                                 var sizeResetHeight = observerElement[LEXICON.oH] + nativeScrollbarSize.x * factor + nativeScrollbarSize.y * factor + _overlayScrollbarDummySize.x + _overlayScrollbarDummySize.y;\n                                 var expandChildCSS = {};\n                                 expandChildCSS[_strWidth] = sizeResetWidth;\n                                 expandChildCSS[_strHeight] = sizeResetHeight;\n                                 expandElementChild.css(expandChildCSS);\n\n\n                                 expandElement[_strScrollLeft](sizeResetWidth)[_strScrollTop](sizeResetHeight);\n                                 shrinkElement[_strScrollLeft](sizeResetWidth)[_strScrollTop](sizeResetHeight);\n                                 */\n                                expandElement[_strScrollLeft](constMaximum)[_strScrollTop](constMaximum);\n                                shrinkElement[_strScrollLeft](constMaximum)[_strScrollTop](constMaximum);\n                            };\n                            var onResized = function () {\n                                rAFId = 0;\n                                if (!isDirty)\n                                    return;\n\n                                widthCache = currWidth;\n                                heightCache = currHeight;\n                                callback();\n                            };\n                            var onScroll = function (event) {\n                                currWidth = observerElement[LEXICON.oW];\n                                currHeight = observerElement[LEXICON.oH];\n                                isDirty = currWidth != widthCache || currHeight != heightCache;\n\n                                if (event && isDirty && !rAFId) {\n                                    COMPATIBILITY.cAF()(rAFId);\n                                    rAFId = COMPATIBILITY.rAF()(onResized);\n                                }\n                                else if(!event)\n                                    onResized();\n\n                                reset();\n                                if (event) {\n                                    COMPATIBILITY.prvD(event);\n                                    COMPATIBILITY.stpP(event);\n                                }\n                                return false;\n                            };\n                            var expandChildCSS = {};\n                            var observerElementCSS = {};\n\n                            observerElementCSS[_strTop] = (-((nativeScrollbarSize.y + 1) * factor));\n                            observerElementCSS[_strRight] = (nativeScrollbarSize.x * -factor);\n                            observerElementCSS[_strBottom] = (nativeScrollbarSize.y * -factor);\n                            observerElementCSS[_strLeft] = (-((nativeScrollbarSize.x + 1) * factor));\n\n                            FRAMEWORK(observerElement).css(observerElementCSS);\n                            expandElement.on(_strScroll, onScroll);\n                            shrinkElement.on(_strScroll, onScroll);\n                            targetElement.on(strAnimationStartEvent, function () {\n                                onScroll(false);\n                            });\n                            //lets assume that the divs will never be that large and a constant value is enough\n                            expandChildCSS[_strWidth] = constMaximum;\n                            expandChildCSS[_strHeight] = constMaximum;\n                            expandElementChild.css(expandChildCSS);\n\n                            reset();\n                        }\n                        else {\n                            var doc = _documentElement[0];\n                            var attachEvent = doc.attachEvent;\n                            var isIE = _msieVersion !== undefined;\n                            if (attachEvent) {\n                                targetElement.prepend(generateDiv(_classNameResizeObserverElement));\n                                findFirst(targetElement, _strDot + _classNameResizeObserverElement)[0].attachEvent('onresize', callback);\n                            }\n                            else {\n                                var obj = doc.createElement(TYPES.o);\n                                obj.setAttribute('tabindex', '-1');\n                                obj.setAttribute(LEXICON.c, _classNameResizeObserverElement);\n                                obj.onload = function () {\n                                    var wnd = this.contentDocument.defaultView;\n                                    wnd.addEventListener('resize', callback);\n                                    wnd.document.documentElement.style.display = 'none';\n                                };\n                                obj.type = 'text/html';\n                                if (isIE)\n                                    targetElement.prepend(obj);\n                                obj.data = 'about:blank';\n                                if (!isIE)\n                                    targetElement.prepend(obj);\n                                targetElement.on(strAnimationStartEvent, callback);\n                            }\n                        }\n                    }\n\n                    //direction change detection:\n                    if (targetElement[0] === _sizeObserverElement[0]) {\n                        var directionChanged = function () {\n                            var dir = _hostElement.css('direction');\n                            var css = {};\n                            var scrollLeftValue = 0;\n                            var result = false;\n                            if (dir !== _cssDirectionDetectedCache) {\n                                if (dir === 'ltr') {\n                                    css[_strLeft] = 0;\n                                    css[_strRight] = _strAuto;\n                                    scrollLeftValue = constMaximum;\n                                }\n                                else {\n                                    css[_strLeft] = _strAuto;\n                                    css[_strRight] = 0;\n                                    scrollLeftValue = _rtlScrollBehavior.n ? -constMaximum : _rtlScrollBehavior.i ? 0 : constMaximum;\n                                }\n                                _sizeObserverElement.children().eq(0).css(css);\n                                targetElement[_strScrollLeft](scrollLeftValue)[_strScrollTop](constMaximum);\n                                _cssDirectionDetectedCache = dir;\n                                result = true;\n                            }\n                            return result;\n                        };\n                        directionChanged();\n                        targetElement.on(_strScroll, function (event) {\n                            if (directionChanged())\n                                update();\n                            COMPATIBILITY.prvD(event);\n                            COMPATIBILITY.stpP(event);\n                            return false;\n                        });\n                    }\n                }\n\n                /**\n                 * Removes a resize observer from the given element.\n                 * @param targetElement The element to which the target resize observer is applied.\n                 */\n                function removeResizeObserver(targetElement) {\n                    if (_supportResizeObserver) {\n                        var element = targetElement.contents()[0];\n                        element[_strResizeObserverProperty].disconnect();\n                        delete element[_strResizeObserverProperty];\n                    }\n                    else {\n                        remove(targetElement.children(_strDot + _classNameResizeObserverElement).eq(0));\n                    }\n                }\n\n                /**\n                 * Freezes the given resize observer.\n                 * @param targetElement The element to which the target resize observer is applied.\n                 */\n                function freezeResizeObserver(targetElement) {\n                    if (targetElement !== undefined) {\n                        /*\n                        if (_supportResizeObserver) {\n                            var element = targetElement.contents()[0];\n                            element[_strResizeObserverProperty].unobserve(element);\n                        }\n                        else {\n                            targetElement = targetElement.children(_strDot + _classNameResizeObserverElement).eq(0);\n                            var w = targetElement.css(_strWidth);\n                            var h = targetElement.css(_strHeight);\n                            var css = {};\n                            css[_strWidth] = w;\n                            css[_strHeight] = h;\n                            targetElement.css(css);\n                        }\n                        */\n                    }\n                }\n\n                /**\n                 * Unfreezes the given resize observer.\n                 * @param targetElement The element to which the target resize observer is applied.\n                 */\n                function unfreezeResizeObserver(targetElement) {\n                    if (targetElement !== undefined) {\n                        /*\n                        if (_supportResizeObserver) {\n                            var element = targetElement.contents()[0];\n                            element[_strResizeObserverProperty].observe(element);\n                        }\n                        else {\n                            var css = { };\n                            css[_strHeight] = _strEmpty;\n                            css[_strWidth] = _strEmpty;\n                            targetElement.children(_strDot + _classNameResizeObserverElement).eq(0).css(css);\n                        }\n                        */\n                    }\n                }\n\n\n                //==== Mutation Observers ====//\n\n                /**\n                 * Creates MutationObservers for the host and content Element if they are supported.\n                 */\n                function createMutationObservers() {\n                    if (_supportMutationObserver) {\n                        var mutationObserverContentLag = 11;\n                        var mutationObserver = COMPATIBILITY.mO();\n                        var contentLastUpdate = COMPATIBILITY.now();\n                        var mutationTarget;\n                        var mutationAttrName;\n                        var contentTimeout;\n                        var now;\n                        var sizeAuto;\n                        var action;\n\n                        _mutationObserverHost = new mutationObserver(function (mutations) {\n                            if (!_initialized || _isSleeping)\n                                return;\n\n                            var doUpdate = false;\n                            //var doUpdateScrollbars = false;\n                            var mutation;\n                            FRAMEWORK.each(mutations, function () {\n                                mutation = this;\n                                mutationTarget = mutation.target;\n                                mutationAttrName = mutation.attributeName;\n\n                                if (mutationAttrName === LEXICON.c)\n                                    doUpdate = hostClassNamesChanged(mutation.oldValue, mutationTarget.className);\n                                else if (mutationAttrName === LEXICON.s)\n                                    doUpdate = mutation.oldValue !== mutationTarget[LEXICON.s].cssText;\n                                else\n                                    doUpdate = true;\n\n                                if (doUpdate)\n                                    return false;\n                            });\n\n                            if (doUpdate)\n                                _base.update(_strAuto);\n                            /*\n                            if(doUpdateScrollbars) {\n                                refreshScrollbarHandleLength(true);\n                                refreshScrollbarHandleOffset(true, _scrollHorizontalInfo.cs);\n                                refreshScrollbarHandleLength(false);\n                                refreshScrollbarHandleOffset(false, _scrollVerticalInfo.cs);\n                            }\n                            */\n                        });\n                        _mutationObserverContent = new mutationObserver(function (mutations) {\n                            if (!_initialized || _isSleeping)\n                                return;\n\n                            var doUpdate = false;\n                            var mutation;\n                            FRAMEWORK.each(mutations, function () {\n                                mutation = this;\n                                doUpdate = isUnknownMutation(mutation);\n                                return !doUpdate;\n                            });\n\n                            if (doUpdate) {\n                                now = COMPATIBILITY.now();\n                                sizeAuto = (_heightAutoCache || _widthAutoCache);\n                                action = function () {\n                                    if(!_destroyed) {\n                                        contentLastUpdate = now;\n\n                                        //if cols, rows or wrap attr was changed\n                                        if (_isTextarea)\n                                            textareaUpdate();\n\n                                        if (sizeAuto)\n                                            update();\n                                        else\n                                            _base.update(_strAuto);\n                                    }\n                                };\n                                clearTimeout(contentTimeout);\n                                if (mutationObserverContentLag <= 0 || now - contentLastUpdate > mutationObserverContentLag || !sizeAuto)\n                                    action();\n                                else\n                                    contentTimeout = setTimeout(action, mutationObserverContentLag);\n                            }\n                        });\n                    }\n                }\n                \n                /**\n                 * Connects the MutationObservers if they are supported.\n                 */\n                function connectMutationObservers() {\n                    if (_supportMutationObserver && !_mutationObserversConnected) {\n                        _mutationObserverHost.observe(_hostElement[0], {\n                            attributes: true,\n                            attributeOldValue: true,\n                            attributeFilter: [LEXICON.i, LEXICON.c, LEXICON.s]\n                        });\n\n                        _mutationObserverContent.observe(_isTextarea ? _targetElement[0] : _contentElement[0], {\n                            attributes: true,\n                            attributeOldValue: true,\n                            subtree: !_isTextarea,\n                            childList: !_isTextarea,\n                            characterData: !_isTextarea,\n                            attributeFilter: _isTextarea ? ['wrap', 'cols', 'rows'] : [LEXICON.i, LEXICON.c, LEXICON.s]\n                        });\n\n                        _mutationObserversConnected = true;\n                    }\n                }\n\n                /**\n                 * Disconnects the MutationObservers if they are supported.\n                 */\n                function disconnectMutationObservers() {\n                    if (_supportMutationObserver && _mutationObserversConnected) {\n                        _mutationObserverHost.disconnect();\n                        _mutationObserverContent.disconnect();\n\n                        _mutationObserversConnected = false;\n                    }\n                }\n\n\n                //==== Events of elements ====//\n\n                /**\n                 * This method gets called every time the host element gets resized. IMPORTANT: Padding changes are detected too!!\n                 * It refreshes the hostResizedEventArgs and the hostSizeResizeCache.\n                 * If there are any size changes, the update method gets called.\n                 */\n                function hostOnResized() {\n                    if (_isSleeping)\n                        return;\n                    var measureElement = _sizeObserverElement[0];\n                    var hostSize = {\n                        w: measureElement[LEXICON.sW],\n                        h: measureElement[LEXICON.sH]\n                    };\n                    if (_initialized) {\n                        var changed = checkCacheDouble(hostSize, _hostElementSizeChangeDetectedCache);\n                        _hostElementSizeChangeDetectedCache = hostSize;\n                        if (changed)\n                            update(true, false);\n                    }\n                    else {\n                        _hostElementSizeChangeDetectedCache = hostSize;\n                    }\n                }\n    \n                /**\n                 * The mouse enter event of the host element. This event is only needed for the autoHide feature.\n                 */\n                function hostOnMouseEnter() {\n                    if (_scrollbarsAutoHideLeave)\n                        refreshScrollbarsAutoHide(true);\n                }\n\n                /**\n                 * The mouse leave event of the host element. This event is only needed for the autoHide feature.\n                 */\n                function hostOnMouseLeave() {\n                    if (_scrollbarsAutoHideLeave && !_bodyElement.hasClass(_classNameDragging))\n                        refreshScrollbarsAutoHide(false);\n                }\n\n                /**\n                 * The mouse move event of the host element. This event is only needed for the autoHide \"move\" feature.\n                 */\n                function hostOnMouseMove() {\n                    if (_scrollbarsAutoHideMove) {\n                        refreshScrollbarsAutoHide(true);\n                        clearTimeout(_scrollbarsAutoHideMoveTimeoutId);\n                        _scrollbarsAutoHideMoveTimeoutId = setTimeout(function () {\n                            if (_scrollbarsAutoHideMove && !_destroyed)\n                                refreshScrollbarsAutoHide(false);\n                        }, 100);\n                    }\n                }\n\n                 /**\n                 * Adds or removes mouse & touch events of the host element. (for handling auto-hiding of the scrollbars)\n                 * @param destroy Indicates whether the events shall be added or removed.\n                 */\n                function setupHostMouseTouchEvents(destroy) { \n                    var passiveEvent = destroy ? removePassiveEventListener : addPassiveEventListener;\n                    var strOnOff = destroy ? 'off' : 'on';\n                    var setupEvent = function(target, name, listener) {\n                        if(_supportPassiveEvents)\n                            passiveEvent(target, name, listener);\n                        else\n                            target[strOnOff](name, listener);\n                    };\n                    \n                    if(_scrollbarsAutoHideMove && !destroy)\n                        setupEvent(_hostElement, _strMouseTouchMoveEvent, hostOnMouseMove);\n                    else {\n                        if(destroy)\n                            setupEvent(_hostElement, _strMouseTouchMoveEvent, hostOnMouseMove);\n                        setupEvent(_hostElement, _strMouseTouchEnter, hostOnMouseEnter);\n                        setupEvent(_hostElement, _strMouseTouchLeave, hostOnMouseLeave);\n                    }\n                    \n                    //if the plugin is initialized and the mouse is over the host element, make the scrollbars visible\n                    if(!_initialized && !destroy)\n                        _hostElement.one(\"mouseover\", hostOnMouseEnter);\n                }\n                \n                /**\n                 * Prevents text from deselection if attached to the document element on the mousedown event of a DOM element.\n                 * @param event The select start event.\n                 */\n                function documentOnSelectStart(event) {\n                    COMPATIBILITY.prvD(event);\n                    return false;\n                }\n\n                /**\n                 * A callback which will be called after a img element has downloaded its src asynchronous.\n                 */\n                function imgOnLoad() {\n                    update(false, true);\n                }\n\n\n                //==== Update Detection ====//\n\n                /**\n                 * Measures the min width and min height of the body element and refreshes the related cache.\n                 * @returns {boolean} True if the min width or min height has changed, false otherwise.\n                 */\n                function bodyMinSizeChanged() {\n                    var bodyMinSize = {};\n                    if (_isBody && _contentArrangeElement) {\n                        bodyMinSize.w = parseToZeroOrNumber(_contentArrangeElement.css(_strMinMinus + _strWidth));\n                        bodyMinSize.h = parseToZeroOrNumber(_contentArrangeElement.css(_strMinMinus + _strHeight));\n                        bodyMinSize.c = checkCacheDouble(bodyMinSize, _bodyMinSizeCache);\n                        bodyMinSize.f = true; //flag for \"measured at least once\"\n                    }\n                    _bodyMinSizeCache = bodyMinSize;\n                    return bodyMinSize.c || false;\n                }\n\n                /**\n                 * Returns true if the class names really changed (new class without plugin host prefix)\n                 * @param oldCassNames The old ClassName string.\n                 * @param newClassNames The new ClassName string.\n                 * @returns {boolean} True if the class names has really changed, false otherwise.\n                 */\n                function hostClassNamesChanged(oldCassNames, newClassNames) {\n                    var currClasses = (newClassNames !== undefined && newClassNames !== null) ? newClassNames.split(_strSpace) : _strEmpty;\n                    var oldClasses = (oldCassNames !== undefined && oldCassNames !== null) ? oldCassNames.split(_strSpace) : _strEmpty;\n                    if (currClasses === _strEmpty && oldClasses === _strEmpty)\n                        return false;\n                    var diff = getArrayDifferences(oldClasses, currClasses);\n                    var changed = false;\n                    var oldClassNames = _oldClassName !== undefined && _oldClassName !== null ? _oldClassName.split(_strSpace) : [_strEmpty];\n                    var currClassNames = _classNameCache !== undefined && _classNameCache !== null ? _classNameCache.split(_strSpace) : [_strEmpty];\n\n                    //remove none theme from diff list to prevent update\n                    var idx = FRAMEWORK.inArray(_classNameThemeNone, diff);\n                    var curr;\n                    var i;\n                    var v;\n                    var o;\n                    var c;\n\n                    if (idx > -1)\n                        diff.splice(idx, 1);\n\n                    for (i = 0; i < diff.length; i++) {\n                        curr = diff[i];\n                        if (curr.indexOf(_classNameHostElement) !== 0) {\n                            o = true;\n                            c = true;\n                            for (v = 0; v < oldClassNames.length; v++) {\n                                if (curr === oldClassNames[v]) {\n                                    o = false;\n                                    break;\n                                }\n                            }\n                            for (v = 0; v < currClassNames.length; v++) {\n                                if (curr === currClassNames[v]) {\n                                    c = false;\n                                    break;\n                                }\n                            }\n                            if (o && c) {\n                                changed = true;\n                                break;\n                            }\n                        }\n\n                    }\n                    return changed;\n                }\n\n                /**\n                 * Returns true if the given mutation is not from a from the plugin generated element. If the target element is a textarea the mutation is always unknown.\n                 * @param mutation The mutation which shall be checked.\n                 * @returns {boolean} True if the mutation is from a unknown element, false otherwise.\n                 */\n                function isUnknownMutation(mutation) {\n                    var attributeName = mutation.attributeName;\n                    var mutationTarget = mutation.target;\n                    var mutationType = mutation.type;\n                    var strClosest = 'closest';\n\n                    if (mutationTarget === _contentElement[0])\n                        return attributeName === null;\n                    if (mutationType === 'attributes' && (attributeName === LEXICON.c || attributeName === LEXICON.s) && !_isTextarea) {\n                        //ignore className changes by the plugin\n                        if (attributeName === LEXICON.c && FRAMEWORK(mutationTarget).hasClass(_classNameHostElement))\n                            return hostClassNamesChanged(mutation.oldValue, mutationTarget.getAttribute(LEXICON.c));\n                        \n                        //only do it of browser support it natively\n                        if (typeof mutationTarget[strClosest] != TYPES.f)\n                            return true;\n                        if (mutationTarget[strClosest](_strDot + _classNameResizeObserverElement) !== null ||\n                            mutationTarget[strClosest](_strDot + _classNameScrollbar) !== null ||\n                            mutationTarget[strClosest](_strDot + _classNameScrollbarCorner) !== null)\n                            return false;\n                    }\n                    return true;\n                }\n\n                /**\n                 * Returns true if the content size was changed since the last time this method was called.\n                 * @returns {boolean} True if the content size was changed, false otherwise.\n                 */\n                function updateAutoContentSizeChanged() {\n                    if (_isSleeping)\n                        return false;\n\n                    var float;\n                    var textareaValueLength = _isTextarea && _widthAutoCache && !_textareaAutoWrappingCache ? _targetElement.val().length : 0;\n                    var setCSS = !_mutationObserversConnected && _widthAutoCache && !_isTextarea;\n                    var viewportScrollSize = { };\n                    var css = { };\n\n                    //fix for https://bugzilla.mozilla.org/show_bug.cgi?id=1439305, it only works with \"clipAlways : true\"\n                    //it can work with \"clipAlways : false\" too, but we had to set the overflow of the viewportElement to hidden every time before measuring\n                    if(_restrictedMeasuring) {\n                        viewportScrollSize = {\n                            x : _viewportElement[0][LEXICON.sW],\n                            y : _viewportElement[0][LEXICON.sH]\n                        }\n                    }\n                    if (setCSS) {\n                        float = _contentElement.css(_strFloat);\n                        css[_strFloat] = _isRTL ? _strRight : _strLeft;\n                        css[_strWidth] = _strAuto;\n                        _contentElement.css(css);\n                    }\n                    var contentElementScrollSize = {\n                        w: getContentMeasureElement()[LEXICON.sW] + textareaValueLength,\n                        h: getContentMeasureElement()[LEXICON.sH] + textareaValueLength\n                    };\n                    if (setCSS) {\n                        css[_strFloat] = float;\n                        css[_strWidth] = _strHundredPercent;\n                        _contentElement.css(css);\n                    }\n\n                    var bodyMinSizeC = bodyMinSizeChanged();\n                    var changed = checkCacheDouble(contentElementScrollSize, _contentElementScrollSizeChangeDetectedCache);\n                    var viewportScrollSizeChanged = checkCacheDouble(viewportScrollSize, _viewportScrollSizeCache, _strX, _strY);\n                    _contentElementScrollSizeChangeDetectedCache = contentElementScrollSize;\n                    _viewportScrollSizeCache = viewportScrollSize;\n\n                    return changed || bodyMinSizeC || viewportScrollSizeChanged;\n                }\n\n                /**\n                 * Returns true if the host element attributes (id, class, style) was changed since the last time this method was called.\n                 * @returns {boolean}\n                 */\n                function meaningfulAttrsChanged() {\n                    if (_isSleeping || _mutationObserversConnected)\n                        return false;\n\n                    var hostElementId = _hostElement.attr(LEXICON.i) || _strEmpty;\n                    var hostElementIdChanged = checkCacheSingle(hostElementId, _updateAutoHostElementIdCache);\n                    var hostElementClass = _hostElement.attr(LEXICON.c) || _strEmpty;\n                    var hostElementClassChanged = checkCacheSingle(hostElementClass, _updateAutoHostElementClassCache);\n                    var hostElementStyle = _hostElement.attr(LEXICON.s) || _strEmpty;\n                    var hostElementStyleChanged = checkCacheSingle(hostElementStyle, _updateAutoHostElementStyleCache);\n                    var hostElementVisible = _hostElement.is(':visible') || _strEmpty;\n                    var hostElementVisibleChanged = checkCacheSingle(hostElementVisible, _updateAutoHostElementVisibleCache);\n                    var targetElementRows = _isTextarea ? (_targetElement.attr('rows') || _strEmpty) : _strEmpty;\n                    var targetElementRowsChanged = checkCacheSingle(targetElementRows, _updateAutoTargetElementRowsCache);\n                    var targetElementCols = _isTextarea ? (_targetElement.attr('cols') || _strEmpty) : _strEmpty;\n                    var targetElementColsChanged = checkCacheSingle(targetElementCols, _updateAutoTargetElementColsCache);\n                    var targetElementWrap = _isTextarea ? (_targetElement.attr('wrap') || _strEmpty) : _strEmpty;\n                    var targetElementWrapChanged = checkCacheSingle(targetElementWrap, _updateAutoTargetElementWrapCache);\n\n                    _updateAutoHostElementIdCache = hostElementId;\n                    if (hostElementClassChanged)\n                        hostElementClassChanged = hostClassNamesChanged(_updateAutoHostElementClassCache, hostElementClass);\n                    _updateAutoHostElementClassCache = hostElementClass;\n                    _updateAutoHostElementStyleCache = hostElementStyle;\n                    _updateAutoHostElementVisibleCache = hostElementVisible;\n                    _updateAutoTargetElementRowsCache = targetElementRows;\n                    _updateAutoTargetElementColsCache = targetElementCols;\n                    _updateAutoTargetElementWrapCache = targetElementWrap;\n\n                    return hostElementIdChanged || hostElementClassChanged || hostElementStyleChanged || hostElementVisibleChanged || targetElementRowsChanged || targetElementColsChanged || targetElementWrapChanged;\n                }\n\n                /**\n                 * Checks is a CSS Property of a child element is affecting the scroll size of the content.\n                 * @param propertyName The CSS property name.\n                 * @returns {boolean} True if the property is affecting the content scroll size, false otherwise.\n                 */\n                function isSizeAffectingCSSProperty(propertyName) {\n                    if (!_initialized)\n                        return true;\n                    var flexGrow = 'flex-grow';\n                    var flexShrink = 'flex-shrink';\n                    var flexBasis = 'flex-basis';\n                    var affectingPropsX = [\n                        _strWidth,\n                        _strMinMinus + _strWidth,\n                        _strMaxMinus + _strWidth,\n                        _strMarginMinus + _strLeft,\n                        _strMarginMinus + _strRight,\n                        _strLeft,\n                        _strRight,\n                        'font-weight',\n                        'word-spacing',\n                        flexGrow,\n                        flexShrink,\n                        flexBasis\n                    ];\n                    var affectingPropsXContentBox = [\n                        _strPaddingMinus + _strLeft,\n                        _strPaddingMinus + _strRight,\n                        _strBorderMinus + _strLeft + _strWidth,\n                        _strBorderMinus + _strRight + _strWidth\n                    ];\n                    var affectingPropsY = [\n                        _strHeight,\n                        _strMinMinus + _strHeight,\n                        _strMaxMinus + _strHeight,\n                        _strMarginMinus + _strTop,\n                        _strMarginMinus + _strBottom,\n                        _strTop,\n                        _strBottom,\n                        'line-height',\n                        flexGrow,\n                        flexShrink,\n                        flexBasis\n                    ];\n                    var affectingPropsYContentBox = [\n                        _strPaddingMinus + _strTop,\n                        _strPaddingMinus + _strBottom,\n                        _strBorderMinus + _strTop + _strWidth,\n                        _strBorderMinus + _strBottom + _strWidth\n                    ];\n                    var _strS = 's';\n                    var _strVS = 'v-s';\n                    var checkX = _overflowBehaviorCache.x === _strS || _overflowBehaviorCache.x === _strVS;\n                    var checkY = _overflowBehaviorCache.y === _strS || _overflowBehaviorCache.y === _strVS;\n                    var sizeIsAffected = false;\n                    var checkPropertyName = function (arr, name) {\n                        for (var i = 0; i < arr.length; i++) {\n                            if (arr[i] === name)\n                                return true;\n                        }\n                        return false;\n                    };\n\n                    if (checkY) {\n                        sizeIsAffected = checkPropertyName(affectingPropsY, propertyName);\n                        if (!sizeIsAffected && !_isBorderBox)\n                            sizeIsAffected = checkPropertyName(affectingPropsYContentBox, propertyName);\n                    }\n                    if (checkX && !sizeIsAffected) {\n                        sizeIsAffected = checkPropertyName(affectingPropsX, propertyName);\n                        if (!sizeIsAffected && !_isBorderBox)\n                            sizeIsAffected = checkPropertyName(affectingPropsXContentBox, propertyName);\n                    }\n                    return sizeIsAffected;\n                }\n\n\n                //==== Update ====//\n\n                /**\n                 * Updates the variables and size of the textarea element, and manages the scroll on new line or new character.\n                 */\n                function textareaUpdate() {\n                    if (_isSleeping)\n                        return;\n\n                    var wrapAttrOff = !_textareaAutoWrappingCache;\n                    var minWidth = _viewportSize.w /* - (!_isBorderBox && !_paddingAbsoluteCache && _widthAutoCache ? _paddingY + _borderY : 0) */;\n                    var minHeight = _viewportSize.h /* - (!_isBorderBox && !_paddingAbsoluteCache && _heightAutoCache ? _paddingY + _borderY : 0) */;\n                    var css = { };\n                    var doMeasure = _widthAutoCache || wrapAttrOff;\n                    var measureElement = _targetElement[0];\n                    var origWidth;\n                    var width;\n                    var origHeight;\n                    var height;\n\n                    //reset min size\n                    css[_strMinMinus + _strWidth] = _strEmpty;\n                    css[_strMinMinus + _strHeight] = _strEmpty;\n\n                    //set width auto\n                    css[_strWidth] = _strAuto;\n                    _targetElement.css(css);\n                    \n                    //measure width\n                    origWidth = measureElement[LEXICON.oW];\n                    width = doMeasure ? MATH.max(origWidth, measureElement[LEXICON.sW] - 1) : 1;\n                    /*width += (_widthAutoCache ? _marginX + (!_isBorderBox ? wrapAttrOff ? 0 : _paddingX + _borderX : 0) : 0);*/\n\n                    //set measured width \n                    css[_strWidth] = _widthAutoCache ? _strAuto /*width*/ : _strHundredPercent;\n                    css[_strMinMinus + _strWidth] = _strHundredPercent;\n\n                    //set height auto\n                    css[_strHeight] = _strAuto;\n                    _targetElement.css(css);\n\n                    //measure height\n                    origHeight = measureElement[LEXICON.oH];\n                    height = MATH.max(origHeight, measureElement[LEXICON.sH] - 1);\n                    \n                    //append correct size values\n                    css[_strWidth] = width;\n                    css[_strHeight] = height;\n                    _textareaCoverElement.css(css);\n\n                    //apply min width / min height to prevent textarea collapsing\n                    css[_strMinMinus + _strWidth] = minWidth /*+ (!_isBorderBox && _widthAutoCache ? _paddingX + _borderX : 0)*/;\n                    css[_strMinMinus + _strHeight] = minHeight /*+ (!_isBorderBox && _heightAutoCache ? _paddingY + _borderY : 0)*/;\n                    _targetElement.css(css);\n\n                    return {\n                        ow: origWidth,\n                        oh: origHeight,\n                        dw: width,\n                        dh: height\n                    };\n                }\n\n                /**\n                 * Updates the plugin and DOM to the current options.\n                 * This method should only be called if a update is 100% required.\n                 * @param hostSizeChanged True if this method was called due to a host size change.\n                 * @param contentSizeChanged True if this method was called due to a content size change.\n                 * @param force True if every property shall be updated and the cache shall be ignored.\n                 * @param preventSwallowing True if this method shall be executed event if it could be swallowed.\n                 */\n                function update(hostSizeChanged, contentSizeChanged, force, preventSwallowing) {\n                    var now = COMPATIBILITY.now();\n                    var swallow = _swallowUpdateLag > 0 && _initialized && (now - _lastUpdateTime) < _swallowUpdateLag && (!_heightAutoCache && !_widthAutoCache) && !preventSwallowing;\n                    var displayIsHidden = _hostElement.is(':hidden');\n                    var displayIsHiddenChanged = checkCacheSingle(displayIsHidden, _displayIsHiddenCache, force);\n                    _displayIsHiddenCache = displayIsHidden;\n                    clearTimeout(_swallowedUpdateTimeout);\n                    \n                    if (swallow) {\n                        _swallowedUpdateParams.h = _swallowedUpdateParams.h || hostSizeChanged;\n                        _swallowedUpdateParams.c = _swallowedUpdateParams.c || contentSizeChanged;\n                        _swallowedUpdateParams.f = _swallowedUpdateParams.f || force;\n                        _swallowedUpdateTimeout = setTimeout(update, _swallowUpdateLag);\n                    }\n\n                    //abort update due to:\n                    //destroyed\n                    //swallowing\n                    //sleeping\n                    //host is hidden or has false display\n                    if (_destroyed || swallow || _isSleeping || (_initialized && !force && displayIsHidden) || _hostElement.css('display') === 'inline')\n                        return;\n\n                    _lastUpdateTime = now;\n                    hostSizeChanged = hostSizeChanged || _swallowedUpdateParams.h;\n                    contentSizeChanged = contentSizeChanged || _swallowedUpdateParams.c;\n                    force = force || _swallowedUpdateParams.f;\n                    _swallowedUpdateParams = {};\n\n                    hostSizeChanged = hostSizeChanged === undefined ? false : hostSizeChanged;\n                    contentSizeChanged = contentSizeChanged === undefined ? false : contentSizeChanged;\n                    force = force === undefined ? false : force;\n\n                    //if scrollbar styling is possible and native scrollbars aren't overlaid the scrollbar styling will be applied which hides the native scrollbars completely.\n                    if (_nativeScrollbarStyling && !(_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y)) {\n                        //native scrollbars are hidden, so change the values to zero\n                        _nativeScrollbarSize.x = 0;\n                        _nativeScrollbarSize.y = 0;\n                    }\n                    else {\n                        //refresh native scrollbar size (in case of zoom)\n                        _nativeScrollbarSize = extend(true, {}, globals.nativeScrollbarSize);\n                    }\n\n                    // Scrollbar padding is needed for firefox, because firefox hides scrollbar automatically if the size of the div is too small.\n                    // The calculation: [scrollbar size +3 *3]\n                    // (+3 because of possible decoration e.g. borders, margins etc., but only if native scrollbar is NOT a overlaid scrollbar)\n                    // (*3 because (1)increase / (2)decrease -button and (3)resize handle)\n                    _nativeScrollbarMinSize = {\n                        x: (_nativeScrollbarSize.x + (_nativeScrollbarIsOverlaid.x ? 0 : 3)) * 3,\n                        y: (_nativeScrollbarSize.y + (_nativeScrollbarIsOverlaid.y ? 0 : 3)) * 3\n                    };\n\n                    freezeResizeObserver(_sizeObserverElement);\n                    freezeResizeObserver(_sizeAutoObserverElement);\n\n                    //save current scroll offset\n                    var currScroll = {\n                        l: _viewportElement[_strScrollLeft](),\n                        t: _viewportElement[_strScrollTop]()\n                    };\n                    var currentPreparedOptionsScrollbars = _currentPreparedOptions.scrollbars;\n                    var currentPreparedOptionsTextarea = _currentPreparedOptions.textarea;\n\n                    //scrollbars visibility:\n                    var scrollbarsVisibility = currentPreparedOptionsScrollbars.visibility;\n                    var scrollbarsVisibilityChanged = checkCacheSingle(scrollbarsVisibility, _scrollbarsVisibilityCache, force);\n\n                    //scrollbars autoHide:\n                    var scrollbarsAutoHide = currentPreparedOptionsScrollbars.autoHide;\n                    var scrollbarsAutoHideChanged = checkCacheSingle(scrollbarsAutoHide, _scrollbarsAutoHideCache, force);\n\n                    //scrollbars click scrolling\n                    var scrollbarsClickScrolling = currentPreparedOptionsScrollbars.clickScrolling;\n                    var scrollbarsClickScrollingChanged = checkCacheSingle(scrollbarsClickScrolling, _scrollbarsClickScrollingCache, force);\n\n                    //scrollbars drag scrolling\n                    var scrollbarsDragScrolling = currentPreparedOptionsScrollbars.dragScrolling;\n                    var scrollbarsDragScrollingChanged = checkCacheSingle(scrollbarsDragScrolling, _scrollbarsDragScrollingCache, force);\n\n                    //className\n                    var className = _currentPreparedOptions.className;\n                    var classNameChanged = checkCacheSingle(className, _classNameCache, force);\n\n                    //resize\n                    var resize = _currentPreparedOptions.resize;\n                    var resizeChanged = checkCacheSingle(resize, _resizeCache, force) && !_isBody; //body can't be resized since the window itself acts as resize possibility.\n\n                    //textarea AutoWrapping\n                    var textareaAutoWrapping = _isTextarea ? _targetElement.attr('wrap') !== 'off' : false;\n                    var textareaAutoWrappingChanged = checkCacheSingle(textareaAutoWrapping, _textareaAutoWrappingCache, force);\n\n                    //paddingAbsolute\n                    var paddingAbsolute = _currentPreparedOptions.paddingAbsolute;\n                    var paddingAbsoluteChanged = checkCacheSingle(paddingAbsolute, _paddingAbsoluteCache, force);\n\n                    //clipAlways\n                    var clipAlways = _currentPreparedOptions.clipAlways;\n                    var clipAlwaysChanged = checkCacheSingle(clipAlways, _clipAlwaysCache, force);\n\n                    //sizeAutoCapable\n                    var sizeAutoCapable = _currentPreparedOptions.sizeAutoCapable && !_isBody; //body can never be size auto, because it shall be always as big as the viewport.\n                    var sizeAutoCapableChanged = checkCacheSingle(sizeAutoCapable, _sizeAutoCapableCache, force);\n\n                    //showNativeScrollbars\n                    var ignoreOverlayScrollbarHiding = _currentPreparedOptions.nativeScrollbarsOverlaid.showNativeScrollbars;\n                    var ignoreOverlayScrollbarHidingChanged = checkCacheSingle(ignoreOverlayScrollbarHiding, _ignoreOverlayScrollbarHidingCache);\n\n                    //autoUpdate\n                    var autoUpdate = _currentPreparedOptions.autoUpdate;\n                    var autoUpdateChanged = checkCacheSingle(autoUpdate, _autoUpdateCache);\n\n                    //overflowBehavior\n                    var overflowBehavior = _currentPreparedOptions.overflowBehavior;\n                    var overflowBehaviorChanged = checkCacheDouble(overflowBehavior, _overflowBehaviorCache, _strX, _strY, force);\n\n                    //dynWidth:\n                    var textareaDynWidth = currentPreparedOptionsTextarea.dynWidth;\n                    var textareaDynWidthChanged = checkCacheSingle(_textareaDynWidthCache, textareaDynWidth);\n\n                    //dynHeight:\n                    var textareaDynHeight = currentPreparedOptionsTextarea.dynHeight;\n                    var textareaDynHeightChanged = checkCacheSingle(_textareaDynHeightCache, textareaDynHeight);\n\n                    //scrollbars visibility\n                    _scrollbarsAutoHideNever = scrollbarsAutoHide === 'n';\n                    _scrollbarsAutoHideScroll = scrollbarsAutoHide === 's';\n                    _scrollbarsAutoHideMove = scrollbarsAutoHide === 'm';\n                    _scrollbarsAutoHideLeave = scrollbarsAutoHide === 'l';\n\n                    //scrollbars autoHideDelay\n                    _scrollbarsAutoHideDelay = currentPreparedOptionsScrollbars.autoHideDelay;\n\n                    //scrollbars support touch\n                    _scrollbarsTouchSupport = currentPreparedOptionsScrollbars.touchSupport;\n\n                    //old className\n                    _oldClassName = _classNameCache;\n\n                    //resize\n                    _resizeNone = resize === 'n';\n                    _resizeBoth = resize === 'b';\n                    _resizeHorizontal = resize === 'h';\n                    _resizeVertical = resize === 'v';\n\n                    //normalizeRTL\n                    _normalizeRTLCache = _currentPreparedOptions.normalizeRTL;\n\n                    //ignore overlay scrollbar hiding\n                    ignoreOverlayScrollbarHiding = ignoreOverlayScrollbarHiding && (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y);\n\n                    //refresh options cache\n                    _scrollbarsVisibilityCache = scrollbarsVisibility;\n                    _scrollbarsAutoHideCache = scrollbarsAutoHide;\n                    _scrollbarsClickScrollingCache = scrollbarsClickScrolling;\n                    _scrollbarsDragScrollingCache = scrollbarsDragScrolling;\n                    _classNameCache = className;\n                    _resizeCache = resize;\n                    _textareaAutoWrappingCache = textareaAutoWrapping;\n                    _paddingAbsoluteCache = paddingAbsolute;\n                    _clipAlwaysCache = clipAlways;\n                    _sizeAutoCapableCache = sizeAutoCapable;\n                    _ignoreOverlayScrollbarHidingCache = ignoreOverlayScrollbarHiding;\n                    _autoUpdateCache = autoUpdate;\n                    _overflowBehaviorCache = extend(true, {}, overflowBehavior);\n                    _textareaDynWidthCache = textareaDynWidth;\n                    _textareaDynHeightCache = textareaDynHeight;\n                    _hasOverflowCache = _hasOverflowCache || { x: false, y: false };\n\n                    //set correct class name to the host element\n                    if (classNameChanged) {\n                        removeClass(_hostElement, _oldClassName + _strSpace + _classNameThemeNone);\n                        addClass(_hostElement, className !== undefined && className !== null && className.length > 0 ? className : _classNameThemeNone);\n                    }\n\n                    //set correct auto Update\n                    if (autoUpdateChanged) {\n                        if (autoUpdate === true) {\n                            disconnectMutationObservers();\n                            autoUpdateLoop.add(_base);\n                        }\n                        else if (autoUpdate === null) {\n                            if (_autoUpdateRecommended) {\n                                disconnectMutationObservers();\n                                autoUpdateLoop.add(_base);\n                            }\n                            else {\n                                autoUpdateLoop.remove(_base);\n                                connectMutationObservers();\n                            }\n                        }\n                        else {\n                            autoUpdateLoop.remove(_base);\n                            connectMutationObservers();\n                        }\n                    }\n\n                    //activate or deactivate size auto capability\n                    if (sizeAutoCapableChanged) {\n                        if (sizeAutoCapable) {\n                            if (!_contentGlueElement) {\n                                _contentGlueElement = FRAMEWORK(generateDiv(_classNameContentGlueElement));\n                                _paddingElement.before(_contentGlueElement);\n                            }\n                            else {\n                                _contentGlueElement.show();\n                            }\n                            if (_sizeAutoObserverAdded) {\n                                _sizeAutoObserverElement.show();\n                            }\n                            else {\n                                _sizeAutoObserverElement = FRAMEWORK(generateDiv(_classNameSizeAutoObserverElement));\n                                _contentGlueElement.before(_sizeAutoObserverElement);\n                                var oldSize = {w: -1, h: -1};\n                                addResizeObserver(_sizeAutoObserverElement, function () {\n                                    var newSize = {\n                                        w: _sizeAutoObserverElement[0][LEXICON.oW],\n                                        h: _sizeAutoObserverElement[0][LEXICON.oH]\n                                    };\n                                    if (checkCacheDouble(newSize, oldSize)) {\n                                        if (_initialized && (_heightAutoCache && newSize.h > 0) || (_widthAutoCache && newSize.w > 0)) {\n                                            update();\n                                        }\n                                        else if (_initialized && (!_heightAutoCache && newSize.h === 0) || (!_widthAutoCache && newSize.w === 0)) {\n                                            update();\n                                        }\n                                    }\n                                    oldSize = newSize;\n                                });\n                                _sizeAutoObserverAdded = true;\n                                //fix heightAuto detector bug if height is fixed but contentHeight is 0.\n                                //the probability this bug will ever happen is very very low, thats why its ok if we use calc which isn't supported in IE8.\n                                if (_cssCalc !== null)\n                                    _sizeAutoObserverElement.css(_strHeight, _cssCalc + '(100% + 1px)');\n                            }\n                        }\n                        else {\n                            if (_sizeAutoObserverAdded)\n                                _sizeAutoObserverElement.hide();\n                            if (_contentGlueElement)\n                                _contentGlueElement.hide();\n                        }\n                    }\n\n                    //if force, update all resizeObservers too\n                    if (force) {\n                        _sizeObserverElement.find('*').trigger(_strScroll);\n                        if (_sizeAutoObserverAdded)\n                            _sizeAutoObserverElement.find('*').trigger(_strScroll);\n                    }\n\n                    //detect direction:\n                    var cssDirection = _hostElement.css('direction');\n                    var cssDirectionChanged = checkCacheSingle(cssDirection, _cssDirectionCache, force);\n\n                    //detect box-sizing:\n                    var boxSizing = _hostElement.css('box-sizing');\n                    var boxSizingChanged = checkCacheSingle(boxSizing, _cssBoxSizingCache, force);\n\n                    //detect padding:\n                    var padding = {\n                        c: force,\n                        t: parseToZeroOrNumber(_hostElement.css(_strPaddingMinus + _strTop)),\n                        r: parseToZeroOrNumber(_hostElement.css(_strPaddingMinus + _strRight)),\n                        b: parseToZeroOrNumber(_hostElement.css(_strPaddingMinus + _strBottom)),\n                        l: parseToZeroOrNumber(_hostElement.css(_strPaddingMinus + _strLeft))\n                    };\n\n                    //width + height auto detecting var:\n                    var sizeAutoObserverElementBCRect;\n                    //exception occurs in IE8 sometimes (unknown exception)\n                    try {\n                        sizeAutoObserverElementBCRect = _sizeAutoObserverAdded ? _sizeAutoObserverElement[0].getBoundingClientRect() : null;\n                    } catch (ex) {\n                        return;\n                    }\n\n                    _isRTL = cssDirection === 'rtl';\n                    _isBorderBox = (boxSizing === 'border-box');\n                    var isRTLLeft = _isRTL ? _strLeft : _strRight;\n                    var isRTLRight = _isRTL ? _strRight : _strLeft;\n                    var hostElement = _hostElement[0];\n                    var paddingElement = _paddingElement[0];\n\n                    //detect width auto:\n                    var widthAutoResizeDetection = false;\n                    var widthAutoObserverDetection = (_sizeAutoObserverAdded && (_hostElement.css(_strFloat) !== 'none' /*|| _isTextarea */)) ? (MATH.round(sizeAutoObserverElementBCRect.right - sizeAutoObserverElementBCRect.left) === 0) && (!paddingAbsolute ? (hostElement[LEXICON.cW] - _paddingX) > 0 : true) : false;\n                    if (sizeAutoCapable && !widthAutoObserverDetection) {\n                        var tmpCurrHostWidth = hostElement[LEXICON.oW];\n                        var tmpCurrContentGlueWidth = _contentGlueElement.css(_strWidth);\n                        _contentGlueElement.css(_strWidth, _strAuto);\n\n                        var tmpNewHostWidth = hostElement[LEXICON.oW];\n                        _contentGlueElement.css(_strWidth, tmpCurrContentGlueWidth);\n                        widthAutoResizeDetection = tmpCurrHostWidth !== tmpNewHostWidth;\n                        if (!widthAutoResizeDetection) {\n                            _contentGlueElement.css(_strWidth, tmpCurrHostWidth + 1);\n                            tmpNewHostWidth = hostElement[LEXICON.oW];\n                            _contentGlueElement.css(_strWidth, tmpCurrContentGlueWidth);\n                            widthAutoResizeDetection = tmpCurrHostWidth !== tmpNewHostWidth;\n                        }\n                    }\n                    var widthAuto = (widthAutoObserverDetection || widthAutoResizeDetection) && sizeAutoCapable && !displayIsHidden;\n                    var widthAutoChanged = checkCacheSingle(widthAuto, _widthAutoCache, force);\n                    var wasWidthAuto = !widthAuto && _widthAutoCache;\n\n                    //detect height auto:\n                    var heightAuto = _sizeAutoObserverAdded && sizeAutoCapable && !displayIsHidden ? (MATH.round(sizeAutoObserverElementBCRect.bottom - sizeAutoObserverElementBCRect.top) === 0) /* && (!paddingAbsolute && (_msieVersion > 9 || !_msieVersion) ? true : true) */ : false;\n                    var heightAutoChanged = checkCacheSingle(heightAuto, _heightAutoCache, force);\n                    var wasHeightAuto = !heightAuto && _heightAutoCache;\n\n                    //detect border:\n                    //we need the border only if border box and auto size\n                    var strMinusWidth = '-' + _strWidth;\n                    var updateBorderX = (widthAuto && _isBorderBox) || !_isBorderBox;\n                    var updateBorderY = (heightAuto && _isBorderBox) || !_isBorderBox;\n                    var border = {\n                        c: force,\n                        t: updateBorderY ? parseToZeroOrNumber(_hostElement.css(_strBorderMinus + _strTop + strMinusWidth), true) : 0,\n                        r: updateBorderX ? parseToZeroOrNumber(_hostElement.css(_strBorderMinus + _strRight + strMinusWidth), true) : 0,\n                        b: updateBorderY ? parseToZeroOrNumber(_hostElement.css(_strBorderMinus + _strBottom + strMinusWidth), true) : 0,\n                        l: updateBorderX ? parseToZeroOrNumber(_hostElement.css(_strBorderMinus + _strLeft + strMinusWidth), true) : 0\n                    };\n\n                    //detect margin:\n                    var margin = {\n                        c: force,\n                        t: parseToZeroOrNumber(_hostElement.css(_strMarginMinus + _strTop)),\n                        r: parseToZeroOrNumber(_hostElement.css(_strMarginMinus + _strRight)),\n                        b: parseToZeroOrNumber(_hostElement.css(_strMarginMinus + _strBottom)),\n                        l: parseToZeroOrNumber(_hostElement.css(_strMarginMinus + _strLeft))\n                    };\n\n                    //detect css max width & height:\n                    var cssMaxValue = {\n                        h: String(_hostElement.css(_strMaxMinus + _strHeight)),\n                        w: String(_hostElement.css(_strMaxMinus + _strWidth))\n                    };\n\n                    //vars to apply correct css\n                    var contentElementCSS = { };\n                    var contentGlueElementCSS = { };\n                    \n                    //funcs\n                    var getHostSize = function() { \n                        return {\n                            w: hostElement[LEXICON.cW],\n                            h: hostElement[LEXICON.cH]\n                        };\n                    };\n                    var getViewportSize = function() { \n                        var brect = paddingElement.getBoundingClientRect();\n                        return brect[_strWidth] \n                        ? {\n                            w: brect[_strWidth],\n                            h: brect[_strHeight]\n                        } : {\n                            w: paddingElement[LEXICON.oW],\n                            h: paddingElement[LEXICON.oH]\n                        };\n                    };\n                    \n                    //set info for padding\n                    _paddingX = padding.l + padding.r;\n                    _paddingY = padding.t + padding.b;\n                    padding.ax = paddingAbsolute ? _paddingX : 0;\n                    padding.ay = paddingAbsolute ? _paddingY : 0;\n                    padding.c = checkCacheTRBL(padding, _cssPaddingCache);\n                    \n                    //set info for border\n                    _borderX = border.l + border.r;\n                    _borderY = border.t + border.b;\n                    border.c = checkCacheTRBL(border, _cssBorderCache);\n\n                    //set info for margin\n                    _marginX = margin.l + margin.r;\n                    _marginY = margin.t + margin.b;\n                    margin.c = checkCacheTRBL(margin, _cssMarginCache);\n\n                    //set info for css max value\n                    cssMaxValue.ih = parseToZeroOrNumber(cssMaxValue.h); //ih = integer height\n                    cssMaxValue.iw = parseToZeroOrNumber(cssMaxValue.w); //iw = integer width\n                    cssMaxValue.ch = cssMaxValue.h.indexOf('px') > -1; //ch = correct height\n                    cssMaxValue.cw = cssMaxValue.w.indexOf('px') > -1; //cw = correct width\n                    cssMaxValue.c = checkCacheDouble(cssMaxValue, _cssMaxValueCache, force);\n\n                    //refresh cache\n                    _cssDirectionCache = cssDirection;\n                    _cssBoxSizingCache = boxSizing;\n                    _widthAutoCache = widthAuto;\n                    _heightAutoCache = heightAuto;\n                    _cssPaddingCache = padding;\n                    _cssBorderCache = border;\n                    _cssMarginCache = margin;\n                    _cssMaxValueCache = cssMaxValue;\n\n                    //IEFix direction changed\n                    if (cssDirectionChanged && _sizeAutoObserverAdded)\n                        _sizeAutoObserverElement.css(_strFloat, isRTLRight);\n\n                    //apply padding:\n                    if (padding.c || cssDirectionChanged || paddingAbsoluteChanged || widthAutoChanged || heightAutoChanged || boxSizingChanged || sizeAutoCapableChanged) {\n                        var paddingElementCSS = {};\n                        var textareaCSS = {};\n                        setTopRightBottomLeft(contentGlueElementCSS, _strMarginMinus, [-padding.t, -padding.r, -padding.b, -padding.l]);\n                        if (paddingAbsolute) {\n                            setTopRightBottomLeft(paddingElementCSS, _strEmpty, [padding.t, padding.r, padding.b, padding.l]);\n                            if (_isTextarea)\n                                setTopRightBottomLeft(textareaCSS, _strPaddingMinus);\n                            else\n                                setTopRightBottomLeft(contentElementCSS, _strPaddingMinus);\n                        }\n                        else {\n                            setTopRightBottomLeft(paddingElementCSS, _strEmpty);\n                            if (_isTextarea)\n                                setTopRightBottomLeft(textareaCSS, _strPaddingMinus, [padding.t, padding.r, padding.b, padding.l]);\n                            else\n                                setTopRightBottomLeft(contentElementCSS, _strPaddingMinus, [padding.t, padding.r, padding.b, padding.l]);\n                        }\n                        _paddingElement.css(paddingElementCSS);\n                        _targetElement.css(textareaCSS);\n                    }\n\n                    //viewport size is padding container because it never has padding, margin and a border.\n                    _viewportSize = getViewportSize();\n\n                    //update Textarea\n                    var textareaSize = _isTextarea ? textareaUpdate() : false;\n\n                    //fix height auto / width auto in cooperation with current padding & boxSizing behavior:\n                    if (heightAuto && (heightAutoChanged || paddingAbsoluteChanged || boxSizingChanged || cssMaxValue.c || padding.c || border.c)) {\n                        if (cssMaxValue.cw)\n                            contentElementCSS[_strMaxMinus + _strHeight] =\n                                (cssMaxValue.ch ? (cssMaxValue.ih - padding.ay + (_isBorderBox ? -_borderY : _paddingY)) \n                                : _strEmpty);\n                        contentElementCSS[_strHeight] = _strAuto;\n                    } \n                    else if (heightAutoChanged || paddingAbsoluteChanged) {\n                        contentElementCSS[_strMaxMinus + _strHeight] = _strEmpty;\n                        contentElementCSS[_strHeight] = _strHundredPercent;\n                    }\n                    if (widthAuto && (widthAutoChanged || paddingAbsoluteChanged || boxSizingChanged || cssMaxValue.c || padding.c || border.c || cssDirectionChanged)) {\n                        if (cssMaxValue.cw)\n                            contentElementCSS[_strMaxMinus + _strWidth] =\n                                (cssMaxValue.cw ? (cssMaxValue.iw - padding.ax + (_isBorderBox ? -_borderX : _paddingX)) +\n                                (_nativeScrollbarIsOverlaid.y /*&& _hasOverflowCache.y && widthAuto */ ? _overlayScrollbarDummySize.y : 0) \n                                : _strEmpty);\n                        contentElementCSS[_strWidth] = _strAuto;\n                        contentGlueElementCSS[_strMaxMinus + _strWidth] = _strHundredPercent; //IE Fix\n                    } \n                    else if (widthAutoChanged || paddingAbsoluteChanged) {\n                        contentElementCSS[_strMaxMinus + _strWidth] = _strEmpty;\n                        contentElementCSS[_strWidth] = _strHundredPercent;\n                        contentElementCSS[_strFloat] = _strEmpty;\n                        contentGlueElementCSS[_strMaxMinus + _strWidth] = _strEmpty; //IE Fix\n                    }\n                    if (widthAuto) {\n                        if (!cssMaxValue.cw)\n                            contentElementCSS[_strMaxMinus + _strWidth] = _strEmpty;\n                        contentGlueElementCSS[_strWidth] = _isTextarea && textareaDynWidth ? textareaSize.dw : _strAuto;\n\n                        contentElementCSS[_strWidth] = _strAuto;\n                        contentElementCSS[_strFloat] = isRTLRight;\n                    }\n                    else {\n                        contentGlueElementCSS[_strWidth] = _strEmpty;\n                    }\n                    if (heightAuto) {\n                        if (!cssMaxValue.ch)\n                            contentElementCSS[_strMaxMinus + _strHeight] = _strEmpty;\n                        //fix dyn height collapse bug: (doesn't works for width!)\n                        //contentGlueElementCSS[_strHeight] = _isTextarea && textareaDynHeight ? textareaSize.dh : _strAuto;\n                        contentGlueElementCSS[_strHeight] = _isTextarea ? textareaDynHeight ? textareaSize.dh : _strAuto : _contentElement[0][LEXICON.cH];\n                    }\n                    else {\n                        contentGlueElementCSS[_strHeight] = _strEmpty;\n                    }\n                    if (sizeAutoCapable)\n                        _contentGlueElement.css(contentGlueElementCSS);\n                    _contentElement.css(contentElementCSS);\n\n                    //CHECKPOINT HERE ~\n                    contentElementCSS = {};\n                    contentGlueElementCSS = {};\n                    \n                    //if [content(host) client / scroll size, or target element direction, or content(host) max-sizes] changed, or force is true\n                    if (hostSizeChanged || contentSizeChanged || cssDirectionChanged || boxSizingChanged || paddingAbsoluteChanged || widthAutoChanged || widthAuto || heightAutoChanged || heightAuto || cssMaxValue.c || ignoreOverlayScrollbarHidingChanged || overflowBehaviorChanged || clipAlwaysChanged || resizeChanged || scrollbarsVisibilityChanged || scrollbarsAutoHideChanged || scrollbarsDragScrollingChanged || scrollbarsClickScrollingChanged || textareaDynWidthChanged || textareaDynHeightChanged || textareaAutoWrappingChanged || force) {\n                        var strOverflow = 'overflow';\n                        var strOverflowX = strOverflow + '-x';\n                        var strOverflowY = strOverflow + '-y';\n                        var strHidden = 'hidden';\n                        var strVisible = 'visible';\n                        //decide whether the content overflow must get hidden for correct overflow measuring, it !MUST! be always hidden if the height is auto\n                        var hideOverflow4CorrectMeasuring = _restrictedMeasuring ?\n                        (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y) || //it must be hidden if native scrollbars are overlaid\n                        (_viewportSize.w < _nativeScrollbarMinSize.y || _viewportSize.h < _nativeScrollbarMinSize.x) || //it must be hidden if host-element is too small\n                        heightAuto || displayIsHiddenChanged //it must be hidden if height is auto or display was change\n                            : heightAuto; //if there is not the restricted Measuring bug, it must be hidden if the height is auto\n                        \n                        //Reset the viewport (very important for natively overlaid scrollbars and zoom change\n                        //don't change the overflow prop as it is very expensive and affects performance !A LOT!\n                        var viewportElementResetCSS = { };\n                        var resetXTmp = _hasOverflowCache.y && _hideOverflowCache.ys && !ignoreOverlayScrollbarHiding ? (_nativeScrollbarIsOverlaid.y ? _viewportElement.css(isRTLLeft) : -_nativeScrollbarSize.y) : 0;\n                        var resetBottomTmp = _hasOverflowCache.x && _hideOverflowCache.xs && !ignoreOverlayScrollbarHiding ? (_nativeScrollbarIsOverlaid.x ? _viewportElement.css(_strBottom) : -_nativeScrollbarSize.x) : 0;\n                        setTopRightBottomLeft(viewportElementResetCSS, _strEmpty);\n                        _viewportElement.css(viewportElementResetCSS);\n                        if(hideOverflow4CorrectMeasuring)\n                            _contentElement.css(strOverflow, strHidden);\n\n                        //measure several sizes:\n                        var contentMeasureElement = getContentMeasureElement();\n                        //in Firefox content element has to have overflow hidden, else element margins aren't calculated properly, this element prevents this bug, but only if scrollbars aren't overlaid\n                        var contentMeasureElementGuaranty = _restrictedMeasuring && !hideOverflow4CorrectMeasuring ? _viewportElement[0] : contentMeasureElement;\n                        var clientSize = {\n                            w: contentMeasureElement[LEXICON.cW],\n                            h: contentMeasureElement[LEXICON.cH]\n                        };\n                        var scrollSize = {\n                            w: MATH.max(contentMeasureElement[LEXICON.sW], contentMeasureElementGuaranty[LEXICON.sW]),\n                            h: MATH.max(contentMeasureElement[LEXICON.sH], contentMeasureElementGuaranty[LEXICON.sH])\n                        };\n                        var contentClientSize = {\n                            w: _isTextarea && textareaSize && !textareaDynWidth ? textareaSize.ow : widthAuto ? clientSize.w : scrollSize.w,\n                            h: _isTextarea && textareaSize && !textareaDynHeight ? textareaSize.oh : heightAuto ? clientSize.h : scrollSize.h\n                        };\n\n                        //apply the correct viewport style and measure viewport size\n                        viewportElementResetCSS[_strBottom] = wasHeightAuto ? _strEmpty : resetBottomTmp;\n                        viewportElementResetCSS[isRTLLeft] = wasWidthAuto ? _strEmpty : resetXTmp;\n                        _viewportElement.css(viewportElementResetCSS);\n                        //viewport size is padding container because it never has padding, margin and a border.\n                        _viewportSize = getViewportSize();\n                        \n                        //measure and correct several sizes\n                        //has to be clientSize because offsetSize respect borders.\n                        var hostSize = getHostSize();\n                        var contentGlueSize = {\n                            w: MATH.max(contentClientSize.w + padding.ax, hostSize.w - _paddingX) /* - (textareaDynWidth ? (_isTextarea && widthAuto ? _marginX + (!_isBorderBox ? _paddingX + _borderX : 0) : 0) : 0) */,\n                            h: MATH.max(contentClientSize.h + padding.ay, hostSize.h - _paddingY)\n                        };\n                        contentGlueSize.c = checkCacheDouble(contentGlueSize, _contentGlueSizeCache, force);\n                        _contentGlueSizeCache = contentGlueSize;\n\n                        //apply correct contentGlue size\n                        if (sizeAutoCapable) {\n                            //size contentGlue correctly to make sure the element has correct size if the sizing switches to auto\n                            if (contentGlueSize.c || (heightAuto || widthAuto)) {\n                                contentGlueElementCSS[_strWidth] = contentGlueSize.w;\n                                contentGlueElementCSS[_strHeight] = contentGlueSize.h;\n                            }\n\n                            var maxWidth = contentGlueElementCSS[_strWidth] + (_isBorderBox ? _borderX : -_paddingX);\n                            var maxHeight = contentGlueElementCSS[_strHeight] + (_isBorderBox ? _borderY : -_paddingY);\n                            var textareaCoverCSS = {};\n\n                            //make contentGlue size -1 if element is not auto sized, to make sure that a resize event happens when the element shrinks\n                            if (!widthAuto || (!widthAuto && border.c))\n                                contentGlueElementCSS[_strWidth] = hostSize.w - (_isBorderBox ? 0 : _paddingX + _borderX) - 1 - _marginX;\n                            if (!heightAuto || (!heightAuto && border.c))\n                                contentGlueElementCSS[_strHeight] = hostSize.h - (_isBorderBox ? 0 : _paddingY + _borderY) - 1 - _marginY;\n\n                            //if size is auto and host is same size as max size, make content glue size +1 to make sure size changes will be detected\n                            if (widthAuto && cssMaxValue.cw && cssMaxValue.iw === maxWidth)\n                                contentGlueElementCSS[_strWidth] = maxWidth + (_isBorderBox ? 0 : _paddingX) + 1;\n                            if (heightAuto && cssMaxValue.ch && cssMaxValue.ih === maxHeight)\n                                contentGlueElementCSS[_strHeight] = maxHeight + (_isBorderBox ? 0 : _paddingY) + 1;\n\n                            //if size is auto and host is smaller than size as min size, make content glue size -1 to make sure size changes will be detected (this is only needed if padding is 0)\n                            if (widthAuto && (clientSize.w < _viewportSize.w || _isTextarea && !textareaAutoWrapping) && _paddingX === 0) {\n                                if (_isTextarea)\n                                    textareaCoverCSS[_strWidth] = parseToZeroOrNumber(_textareaCoverElement.css(_strWidth)) - 1;\n                                contentGlueElementCSS[_strWidth] -= 1;\n                            }\n                            if (heightAuto && (clientSize.h < _viewportSize.h || _isTextarea) && _paddingY === 0) {\n                                if (_isTextarea)\n                                    textareaCoverCSS[_strHeight] = parseToZeroOrNumber(_textareaCoverElement.css(_strHeight)) - 1;\n                                contentGlueElementCSS[_strHeight] -= 1;\n                            }\n\n                            //make sure content glue size is at least 1\n                            if (contentClientSize.h > 0) {\n                                contentGlueElementCSS[_strWidth] = MATH.max(1, contentGlueElementCSS[_strWidth]);\n                                contentGlueElementCSS[_strHeight] = MATH.max(1, contentGlueElementCSS[_strHeight]);\n                            }\n\n                            if (_isTextarea)\n                                _textareaCoverElement.css(textareaCoverCSS);\n                            _contentGlueElement.css(contentGlueElementCSS);\n                        }\n                        if (widthAuto)\n                            contentElementCSS[_strWidth] = _strHundredPercent;\n                        if (widthAuto && !_isBorderBox && !_mutationObserversConnected)\n                            contentElementCSS[_strFloat] = 'none';\n\n\n                        //apply and reset content style\n                        _contentElement.css(contentElementCSS);\n                        contentElementCSS = {};\n\n                        //measure again, but this time all correct sizes:\n                        var contentBCRect = contentMeasureElement.getBoundingClientRect();\n                        var contentBCRectW = contentBCRect[_strWidth] || 0;\n                        var contentBCRectH = contentBCRect[_strHeight] || 0;\n                        var contentScrollSize = {\n                            w: MATH.max(contentMeasureElement[LEXICON.sW], contentMeasureElementGuaranty[LEXICON.sW]) + parseToZeroOrNumber(contentBCRectW) - contentBCRectW,\n                            h: MATH.max(contentMeasureElement[LEXICON.sH], contentMeasureElementGuaranty[LEXICON.sH]) + parseToZeroOrNumber(contentBCRectH) - contentBCRectH\n                        };\n                        contentScrollSize.c = contentSizeChanged = checkCacheDouble(contentScrollSize, _contentScrollSizeCache, force);\n                        _contentScrollSizeCache = contentScrollSize;\n\n                        if(hideOverflow4CorrectMeasuring)\n                            _contentElement.css(strOverflow, _strEmpty);\n                        \n                        //refresh viewport size after correct measuring\n                        _viewportSize = getViewportSize();\n                        \n                        //has to be clientSize because offsetSize respect borders.\n                        hostSize = getHostSize();\n                        hostSizeChanged = checkCacheDouble(hostSize, _hostSizeCache);\n                        _hostSizeCache = hostSize;\n                        \n                        var overflowBehaviorIsVS = {\n                            x: overflowBehavior.x === 'v-s',\n                            y: overflowBehavior.y === 'v-s'\n                        };\n                        var overflowBehaviorIsVH = {\n                            x: overflowBehavior.x === 'v-h',\n                            y: overflowBehavior.y === 'v-h'\n                        };\n                        var overflowBehaviorIsS = {\n                            x: overflowBehavior.x === 's',\n                            y: overflowBehavior.y === 's'\n                        };\n                        var overflowAmount = {\n                            x: MATH.max(0, MATH.round((contentScrollSize.w - _viewportSize.w) * 100) / 100),\n                            y: MATH.max(0, MATH.round((contentScrollSize.h - _viewportSize.h) * 100) / 100)\n                        };\n                        var hideOverflowForceTextarea = _isTextarea && (_viewportSize.w === 0 || _viewportSize.h === 0);\n                        var hideOverflowForceRounding = (_viewportElement[0].scrollLeftMax === 0 && overflowAmount.x > 0 && overflowAmount.x < 1) || (_viewportElement[0].scrollTopMax === 0 && overflowAmount.y > 0 && overflowAmount.y < 1);\n                        if (hideOverflowForceTextarea || hideOverflowForceRounding)\n                            overflowAmount.x = overflowAmount.y = 0;\n                        var hasOverflow = {\n                            x: overflowAmount.x > 0,\n                            y: overflowAmount.y > 0\n                        };\n                        //hideOverflow:\n                        //x || y : true === overflow is hidden by \"overflow: scroll\" OR \"overflow: hidden\"\n                        //xs || ys : true === overflow is hidden by \"overflow: scroll\"\n                        var hideOverflow = {x: hasOverflow.x, y: hasOverflow.y};\n                        if (overflowBehaviorIsVS.x || overflowBehaviorIsVH.x)\n                            hideOverflow.x = (hasOverflow.y && !overflowBehaviorIsVS.y && !overflowBehaviorIsVH.y);\n                        if (overflowBehaviorIsVS.y || overflowBehaviorIsVH.y)\n                            hideOverflow.y = (hasOverflow.x && !overflowBehaviorIsVS.x && !overflowBehaviorIsVH.x);\n                        hideOverflow.xs = hideOverflow.x ? (overflowBehaviorIsS.x || overflowBehaviorIsVS.x) : false;\n                        hideOverflow.ys = hideOverflow.y ? (overflowBehaviorIsS.y || overflowBehaviorIsVS.y) : false;\n\n                        var canScroll = {\n                            x: hasOverflow.x && hideOverflow.xs,\n                            y: hasOverflow.y && hideOverflow.ys\n                        };\n                        var previousOverflow = _overflowAmountCache;\n                        overflowAmount.c = checkCacheDouble(overflowAmount, _overflowAmountCache, _strX, _strY, force);\n                        _overflowAmountCache = overflowAmount;\n                        hasOverflow.c = checkCacheDouble(hasOverflow, _hasOverflowCache, _strX, _strY, force);\n                        _hasOverflowCache = hasOverflow;\n                        hideOverflow.c = checkCacheDouble(hideOverflow, _hideOverflowCache, _strX, _strY, force);\n                        _hideOverflowCache = hideOverflow;\n\n                        //if native scrollbar is overlay at x OR y axis, prepare DOM\n                        if (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y) {\n                            var borderDesign = 'px solid transparent';\n                            var contentArrangeElementCSS = { };\n                            var arrangeContent = { };\n                            var arrangeChanged = force;\n                            if (hasOverflow.x || hasOverflow.y) {\n                                arrangeContent.w = _nativeScrollbarIsOverlaid.y && hasOverflow.y ? contentScrollSize.w + _overlayScrollbarDummySize.y : _strEmpty;\n                                arrangeContent.h = _nativeScrollbarIsOverlaid.x && hasOverflow.x ? contentScrollSize.h + _overlayScrollbarDummySize.x : _strEmpty;\n                                arrangeChanged = checkCacheSingle(arrangeContent, _arrangeContentSizeCache, force);\n                                _arrangeContentSizeCache = arrangeContent;\n                            }\n\n                            if (hasOverflow.c || hideOverflow.c || contentScrollSize.c || cssDirectionChanged || widthAutoChanged || heightAutoChanged || widthAuto || heightAuto || ignoreOverlayScrollbarHidingChanged) {\n                                contentElementCSS[_strMarginMinus + isRTLRight] = contentElementCSS[_strBorderMinus + isRTLRight] = _strEmpty;\n                                if (_nativeScrollbarIsOverlaid.x && hasOverflow.x && hideOverflow.xs) {\n                                    contentElementCSS[_strMarginMinus + _strBottom] = heightAuto ? (ignoreOverlayScrollbarHiding ? _strEmpty : _overlayScrollbarDummySize.x) : _strEmpty;\n                                    contentElementCSS[_strBorderMinus + _strBottom] = (!heightAuto && !ignoreOverlayScrollbarHiding) ? (_overlayScrollbarDummySize.x + borderDesign) : _strEmpty;\n                                }\n                                else {\n                                    arrangeContent.h = \n                                    contentElementCSS[_strMarginMinus + _strBottom] = \n                                    contentElementCSS[_strBorderMinus + _strBottom] = _strEmpty;\n                                    arrangeChanged = true;\n                                }\n                                if (_nativeScrollbarIsOverlaid.y && hasOverflow.y && hideOverflow.ys) {\n                                    contentElementCSS[_strMarginMinus + isRTLLeft] = widthAuto ? (ignoreOverlayScrollbarHiding ? _strEmpty : _overlayScrollbarDummySize.y) : _strEmpty;\n                                    contentElementCSS[_strBorderMinus + isRTLLeft] = (/* !widthAuto && */ !ignoreOverlayScrollbarHiding) ? (_overlayScrollbarDummySize.y + borderDesign) : _strEmpty;\n                                }\n                                else {\n                                    arrangeContent.w = \n                                    contentElementCSS[_strMarginMinus + isRTLLeft] = \n                                    contentElementCSS[_strBorderMinus + isRTLLeft] = _strEmpty;\n                                    arrangeChanged = true;\n                                }\n                            }\n                            if (ignoreOverlayScrollbarHiding) {\n                                arrangeContent.w = arrangeContent.h = _strEmpty;\n                                arrangeChanged = true;\n                            }\n                            if (arrangeChanged) {\n                                contentArrangeElementCSS[_strWidth] = hideOverflow.y ? arrangeContent.w : _strEmpty;\n                                contentArrangeElementCSS[_strHeight] = hideOverflow.x ? arrangeContent.h : _strEmpty;\n\n                                if (!_contentArrangeElement) {\n                                    _contentArrangeElement = FRAMEWORK(generateDiv(_classNameContentArrangeElement));\n                                    _viewportElement.prepend(_contentArrangeElement);\n                                }\n                                _contentArrangeElement.css(contentArrangeElementCSS);\n                            }\n                            _contentElement.css(contentElementCSS);\n                        }\n\n                        var viewportElementCSS = {};\n                        var paddingElementCSS = {};\n                        if (hostSizeChanged || hasOverflow.c || hideOverflow.c || contentScrollSize.c || overflowBehaviorChanged || boxSizingChanged || ignoreOverlayScrollbarHidingChanged || cssDirectionChanged || clipAlwaysChanged || heightAutoChanged) {\n                            viewportElementCSS[isRTLRight] = _strEmpty;\n                            var resetScrollbarHidingX = function () {\n                                viewportElementCSS[_strBottom] = _strEmpty;\n                                _contentBorderSize.h = 0;\n                            };\n                            var resetScrollbarHidingY = function () {\n                                viewportElementCSS[isRTLLeft] = _strEmpty;\n                                _contentBorderSize.w = 0;\n                            };\n                            if (hasOverflow.x && hideOverflow.xs) {\n                                viewportElementCSS[strOverflowX] = _strScroll;\n                                if (!ignoreOverlayScrollbarHiding) {\n                                    viewportElementCSS[_strBottom] = -(_nativeScrollbarIsOverlaid.x ? _overlayScrollbarDummySize.x : _nativeScrollbarSize.x);\n                                    _contentBorderSize.h = _nativeScrollbarIsOverlaid.x ? _overlayScrollbarDummySize.y : 0;\n                                }\n                                else\n                                    resetScrollbarHidingX();\n                            } else {\n                                viewportElementCSS[strOverflowX] = _strEmpty;\n                                resetScrollbarHidingX();\n                            }\n                            if (hasOverflow.y && hideOverflow.ys) {\n                                viewportElementCSS[strOverflowY] = _strScroll;\n                                if (!ignoreOverlayScrollbarHiding) {\n                                    viewportElementCSS[isRTLLeft] = -(_nativeScrollbarIsOverlaid.y ? _overlayScrollbarDummySize.y : _nativeScrollbarSize.y);\n                                    _contentBorderSize.w = _nativeScrollbarIsOverlaid.y ? _overlayScrollbarDummySize.x : 0;\n                                }\n                                else\n                                    resetScrollbarHidingY();\n                            } else {\n                                viewportElementCSS[strOverflowY] = _strEmpty;\n                                resetScrollbarHidingY();\n                            }\n\n                            // if the scroll container is too small and if there is any overflow with not overlay scrollbar, make viewport element greater in size (Firefox hide Scrollbars fix)\n                            // because firefox starts hiding scrollbars on too small elements\n                            // with this behavior the overflow calculation may be incorrect or the scrollbars would appear suddenly\n                            // https://bugzilla.mozilla.org/show_bug.cgi?id=292284\n                            if ((_viewportSize.h < _nativeScrollbarMinSize.x || _viewportSize.w < _nativeScrollbarMinSize.y)\n                                && ((hasOverflow.x && hideOverflow.x && !_nativeScrollbarIsOverlaid.x) || (hasOverflow.y && hideOverflow.y && !_nativeScrollbarIsOverlaid.y))) {\n                                viewportElementCSS[_strPaddingMinus + _strTop] = _nativeScrollbarMinSize.x;\n                                viewportElementCSS[_strMarginMinus + _strTop] = -_nativeScrollbarMinSize.x;\n\n                                viewportElementCSS[_strPaddingMinus + isRTLRight] = _nativeScrollbarMinSize.y;\n                                viewportElementCSS[_strMarginMinus + isRTLRight] = -_nativeScrollbarMinSize.y;\n                            }\n                            else {\n                                viewportElementCSS[_strPaddingMinus + _strTop] = \n                                viewportElementCSS[_strMarginMinus + _strTop] = \n                                viewportElementCSS[_strPaddingMinus + isRTLRight] = \n                                viewportElementCSS[_strMarginMinus + isRTLRight] = _strEmpty;\n                            }\n                            viewportElementCSS[_strPaddingMinus + isRTLLeft] = \n                            viewportElementCSS[_strMarginMinus + isRTLLeft] = _strEmpty;\n\n                            //if there is any overflow (x OR y axis) and this overflow shall be hidden, make overflow hidden, else overflow visible\n                            if ((hasOverflow.x && hideOverflow.x) || (hasOverflow.y && hideOverflow.y) || hideOverflowForceTextarea) {\n                                //only hide if is Textarea\n                                if (_isTextarea && hideOverflowForceTextarea) {\n                                    paddingElementCSS[strOverflowX] = \n                                    paddingElementCSS[strOverflowY] = strHidden;\n                                }\n                            }\n                            else {\n                                if (!clipAlways || (overflowBehaviorIsVH.x || overflowBehaviorIsVS.x || overflowBehaviorIsVH.y || overflowBehaviorIsVS.y)) {\n                                    //only un-hide if Textarea\n                                    if (_isTextarea) {\n                                        paddingElementCSS[strOverflowX] = \n                                        paddingElementCSS[strOverflowY] = _strEmpty;\n                                    }\n                                    viewportElementCSS[strOverflowX] = \n                                    viewportElementCSS[strOverflowY] = strVisible;\n                                }\n                            }\n\n                            _paddingElement.css(paddingElementCSS);\n                            _viewportElement.css(viewportElementCSS);\n                            viewportElementCSS = { };\n\n                            //force soft redraw in webkit because without the scrollbars will may appear because DOM wont be redrawn under special conditions\n                            if ((hasOverflow.c || boxSizingChanged || widthAutoChanged || heightAutoChanged) && !(_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y)) {\n                                var element = _contentElement[0];\n                                var elementStyle = element[LEXICON.s];\n                                var dump;\n                                elementStyle.webkitTransform = 'scale(1)';\n                                elementStyle.display = 'run-in';\n                                dump = element[LEXICON.oH];\n                                elementStyle.display = _strEmpty; //|| dump; //use dump to prevent it from deletion if minify\n                                elementStyle.webkitTransform = _strEmpty;\n                            }\n                            //force hard redraw in webkit if native overlaid scrollbars shall appear\n                            if (ignoreOverlayScrollbarHidingChanged && ignoreOverlayScrollbarHiding) {\n                                //_hostElement.hide();\n                                //var dump = hostElement[LEXICON.oH];\n                                //_hostElement.show();\n                            }\n                        }\n\n                        //change to direction RTL and width auto Bugfix in Webkit\n                        //without this fix, the DOM still thinks the scrollbar is LTR and thus the content is shifted to the left\n                        contentElementCSS = {};\n                        if (cssDirectionChanged || widthAutoChanged || heightAutoChanged) {\n                            if (_isRTL && widthAuto) {\n                                var floatTmp = _contentElement.css(_strFloat);\n                                var posLeftWithoutFloat = MATH.round(_contentElement.css(_strFloat, _strEmpty).css(_strLeft, _strEmpty).position().left);\n                                _contentElement.css(_strFloat, floatTmp);\n                                var posLeftWithFloat = MATH.round(_contentElement.position().left);\n\n                                if (posLeftWithoutFloat !== posLeftWithFloat)\n                                    contentElementCSS[_strLeft] = posLeftWithoutFloat;\n                            }\n                            else {\n                                contentElementCSS[_strLeft] = _strEmpty;\n                            }\n                        }\n                        _contentElement.css(contentElementCSS);\n\n                        //scrollbars management:\n                        var scrollbarsVisibilityVisible = scrollbarsVisibility === 'v';\n                        var scrollbarsVisibilityHidden = scrollbarsVisibility === 'h';\n                        var scrollbarsVisibilityAuto = scrollbarsVisibility === 'a';\n\n                        var showScrollbarH = COMPATIBILITY.bind(refreshScrollbarAppearance, 0, true, true, canScroll.x);\n                        var showScrollbarV = COMPATIBILITY.bind(refreshScrollbarAppearance, 0, false, true, canScroll.y);\n                        var hideScrollbarH = COMPATIBILITY.bind(refreshScrollbarAppearance, 0, true, false, canScroll.x);\n                        var hideScrollbarV = COMPATIBILITY.bind(refreshScrollbarAppearance, 0, false, false, canScroll.y);\n\n                        //manage class name which indicates scrollable overflow\n                        if (hideOverflow.x || hideOverflow.y)\n                            addClass(_hostElement, _classNameHostOverflow);\n                        else\n                            removeClass(_hostElement, _classNameHostOverflow);\n                        if (hideOverflow.x)\n                            addClass(_hostElement, _classNameHostOverflowX);\n                        else\n                            removeClass(_hostElement, _classNameHostOverflowX);\n                        if (hideOverflow.y)\n                            addClass(_hostElement, _classNameHostOverflowY);\n                        else\n                            removeClass(_hostElement, _classNameHostOverflowY);\n\n                        //add or remove rtl class name for styling purposes\n                        if (cssDirectionChanged) {\n                            if (_isRTL)\n                                addClass(_hostElement, _classNameHostRTL);\n                            else\n                                removeClass(_hostElement, _classNameHostRTL);\n                        }\n\n                        //manage the resize feature (CSS3 resize \"polyfill\" for this plugin)\n                        if (_isBody)\n                            addClass(_hostElement, _classNameHostResizeDisabled);\n                        if (resizeChanged) {\n                            var addCornerEvents = function () { _scrollbarCornerElement.on(_strMouseTouchDownEvent, _resizeOnMouseTouchDown); };\n                            var removeCornerEvents = function () { _scrollbarCornerElement.off(_strMouseTouchDownEvent, _resizeOnMouseTouchDown); };\n                            if (_resizeNone) {\n                                addClass(_hostElement, _classNameHostResizeDisabled);\n                                removeClass(_scrollbarCornerElement, [\n                                    _classNameScrollbarCornerResize,\n                                    _classNameScrollbarCornerResizeB,\n                                    _classNameScrollbarCornerResizeH,\n                                    _classNameScrollbarCornerResizeV].join(_strSpace));\n                                removeCornerEvents();\n                            }\n                            else {\n                                removeClass(_hostElement, _classNameHostResizeDisabled);\n                                addClass(_scrollbarCornerElement, _classNameScrollbarCornerResize);\n                                if (_resizeBoth)\n                                    addClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeB);\n                                else if (_resizeHorizontal)\n                                    addClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeH);\n                                else if (_resizeVertical)\n                                    addClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeV);\n\n                                removeCornerEvents();\n                                addCornerEvents();\n                            }\n                        }\n\n                        //manage the scrollbars general visibility + the scrollbar interactivity (unusable class name)\n                        if (scrollbarsVisibilityChanged || overflowBehaviorChanged || hideOverflow.c || hasOverflow.c || ignoreOverlayScrollbarHidingChanged) {\n                            if (ignoreOverlayScrollbarHiding) {\n                                if (ignoreOverlayScrollbarHidingChanged) {\n                                    removeClass(_hostElement, _classNameHostScrolling);\n                                    if (ignoreOverlayScrollbarHiding) {\n                                        hideScrollbarH();\n                                        hideScrollbarV();\n                                    }\n                                }\n                            }\n                            else if (scrollbarsVisibilityAuto) {\n                                if (canScroll.x)\n                                    showScrollbarH();\n                                else\n                                    hideScrollbarH();\n\n                                if (canScroll.y)\n                                    showScrollbarV();\n                                else\n                                    hideScrollbarV();\n                            }\n                            else if (scrollbarsVisibilityVisible) {\n                                showScrollbarH();\n                                showScrollbarV();\n                            }\n                            else if (scrollbarsVisibilityHidden) {\n                                hideScrollbarH();\n                                hideScrollbarV();\n                            }\n                        }\n\n                        //manage the scrollbars auto hide feature (auto hide them after specific actions)\n                        if (scrollbarsAutoHideChanged || ignoreOverlayScrollbarHidingChanged) {\n                            if (_scrollbarsAutoHideLeave || _scrollbarsAutoHideMove) {\n                                setupHostMouseTouchEvents(true);\n                                setupHostMouseTouchEvents();\n                            }\n                            else {\n                                setupHostMouseTouchEvents(true);\n                            }\n\n                            if (_scrollbarsAutoHideNever)\n                                refreshScrollbarsAutoHide(true);\n                            else\n                                refreshScrollbarsAutoHide(false, true);\n                        }\n\n                        //manage scrollbars handle length and offset\n                        if (hostSizeChanged || overflowAmount.c || heightAutoChanged || widthAutoChanged || resizeChanged || boxSizingChanged || paddingAbsoluteChanged || ignoreOverlayScrollbarHidingChanged || cssDirectionChanged) {\n                            refreshScrollbarHandleLength(true);\n                            refreshScrollbarHandleOffset(true, currScroll.l);\n                            refreshScrollbarHandleLength(false);\n                            refreshScrollbarHandleOffset(false, currScroll.t);\n                        }\n\n                        //manage interactivity\n                        if (scrollbarsClickScrollingChanged)\n                            refreshScrollbarsInteractive(true, scrollbarsClickScrolling);\n                        if (scrollbarsDragScrollingChanged)\n                            refreshScrollbarsInteractive(false, scrollbarsDragScrolling);\n\n                        //handle scroll\n                        var textareaScrollX;\n                        var textareaScrollY;\n                        if (_isTextarea && contentSizeChanged) {\n                            var textareaInfo = getTextareaInfo();\n                            if (textareaInfo) {\n                                var textareaRowsChanged = _textareaInfoCache === undefined ? true : textareaInfo.rows !== _textareaInfoCache.rows;\n                                var cursorRow = textareaInfo.cR;\n                                var cursorCol = textareaInfo.cC;\n                                var widestRow = textareaInfo.w;\n                                var lastRow = textareaInfo.r;\n                                var lastCol = textareaInfo.c;\n                                var cursorPos = textareaInfo.p;\n                                var cursorMax = textareaInfo.m;\n                                var cursorIsLastPosition = (cursorPos >= cursorMax && _textareaHasFocus);\n                                var textareaScrollAmount = {\n                                    x: (!textareaAutoWrapping && (cursorCol === lastCol && cursorRow === widestRow)) ? _overflowAmountCache.x : -1,\n                                    y: (textareaAutoWrapping ? cursorIsLastPosition || textareaRowsChanged && (previousOverflow !== undefined ? (currScroll.t === previousOverflow.y) : false) : (cursorIsLastPosition || textareaRowsChanged) && cursorRow === lastRow) ? _overflowAmountCache.y : -1\n                                };\n                                textareaScrollX = textareaScrollAmount.x > -1;\n                                textareaScrollY = textareaScrollAmount.y > -1;\n\n                                if (textareaScrollY)\n                                    _viewportElement[_strScrollTop](textareaScrollAmount.y);\n                                if (textareaScrollX) {\n                                    if (_isRTL && _normalizeRTLCache && _rtlScrollBehavior.i)\n                                        _viewportElement[_strScrollLeft](0); //if inverted, scroll to 0 -> normalized this means to max scroll offset.\n                                    else\n                                        _viewportElement[_strScrollLeft](textareaScrollAmount.x);\n                                }\n                            }\n                            _textareaInfoCache = textareaInfo;\n                        }\n                        if (_isRTL && _rtlScrollBehavior.i && _nativeScrollbarIsOverlaid.y && hasOverflow.x && _normalizeRTLCache)\n                            currScroll.l += _contentBorderSize.w || 0;\n                        if(!textareaScrollX)\n                            _viewportElement[_strScrollLeft](currScroll.l);\n                        if(!textareaScrollY)\n                            _viewportElement[_strScrollTop](currScroll.t);\n                        if(widthAuto)\n                            _hostElement[_strScrollLeft](0);\n                        if(heightAuto)\n                            _hostElement[_strScrollTop](0);\n\n                        if (cssDirectionChanged) {\n                            dispatchCallback(\"onDirectionChanged\", {\n                                isRTL: _isRTL,\n                                dir: cssDirection\n                            });\n                        }\n                        if (hostSizeChanged) {\n                            dispatchCallback(\"onHostSizeChanged\", {\n                                width: _hostSizeCache.w,\n                                height: _hostSizeCache.h\n                            });\n                        }\n                        if (contentSizeChanged) {\n                            dispatchCallback(\"onContentSizeChanged\", {\n                                width: _contentScrollSizeCache.w,\n                                height: _contentScrollSizeCache.h\n                            });\n                        }\n                        if (hasOverflow.c || hideOverflow.c) {\n                            dispatchCallback(\"onOverflowChanged\", {\n                                x: hasOverflow.x,\n                                y: hasOverflow.y,\n                                xScrollable: hideOverflow.xs,\n                                yScrollable: hideOverflow.ys,\n                                clipped: hideOverflow.x || hideOverflow.y\n                            });\n                        }\n                        if (overflowAmount.c) {\n                            dispatchCallback(\"onOverflowAmountChanged\", {\n                                x: overflowAmount.x,\n                                y: overflowAmount.y\n                            });\n                        }\n                    }\n\n                    //fix body min size\n                    if (_isBody && (_hasOverflowCache.c || _bodyMinSizeCache.c)) {\n                        //its possible that no min size was measured until now, because the content arrange element was just added now, in this case, measure now the min size.\n                        if (!_bodyMinSizeCache.f)\n                            bodyMinSizeChanged();\n                        if (_nativeScrollbarIsOverlaid.y && _hasOverflowCache.x)\n                            _contentElement.css(_strMinMinus + _strWidth, _bodyMinSizeCache.w + _overlayScrollbarDummySize.y);\n                        if (_nativeScrollbarIsOverlaid.x && _hasOverflowCache.y)\n                            _contentElement.css(_strMinMinus + _strHeight, _bodyMinSizeCache.h + _overlayScrollbarDummySize.x);\n                        _bodyMinSizeCache.c = false;\n                    }\n\n                    unfreezeResizeObserver(_sizeObserverElement);\n                    unfreezeResizeObserver(_sizeAutoObserverElement);\n\n                    dispatchCallback(\"onUpdated\", { forced: force });\n                }\n\n\n                //==== Options ====//\n\n                /**\n                 * Sets new options but doesn't call the update method.\n                 * @param newOptions The object which contains the new options.\n                 */\n                function setOptions(newOptions) {\n                    _currentOptions = extend(true, {}, _currentOptions, _pluginsOptions.v(newOptions, _pluginsOptions.t, true));\n                    _currentPreparedOptions = extend(true, {}, _currentPreparedOptions, _pluginsOptions.v(newOptions, _pluginsOptions.t, false, true));\n                }\n\n                \n                //==== Structure ====//\n                \n                /**\n                 * Builds or destroys the wrapper and helper DOM elements.\n                 * @param destroy Indicates whether the DOM shall be build or destroyed.\n                 */\n                function setupStructureDOM(destroy) {\n                    var adoptAttrs = _currentPreparedOptions.textarea.inheritedAttrs;\n                    var adoptAttrsMap = { };\n                    var applyAdoptedAttrs = function() {\n                        var applyAdoptedAttrsElm = destroy ? _targetElement : _hostElement;\n                        FRAMEWORK.each(adoptAttrsMap, function(k, v) { \n                            if(type(v) == TYPES.s) {\n                                if(k == LEXICON.c)\n                                    applyAdoptedAttrsElm.addClass(v); \n                                else\n                                    applyAdoptedAttrsElm.attr(k, v); \n                            }\n                        });\n                    };\n                    var hostElementClassNames = [\n                        _classNameHostElement,\n                        _classNameHostTextareaElement,\n                        _classNameHostResizeDisabled,\n                        _classNameHostRTL,\n                        _classNameHostScrollbarHorizontalHidden,\n                        _classNameHostScrollbarVerticalHidden,\n                        _classNameHostTransition,\n                        _classNameHostScrolling,\n                        _classNameHostOverflow,\n                        _classNameHostOverflowX,\n                        _classNameHostOverflowY,\n                        _classNameThemeNone,\n                        _classNameTextareaElement,\n                        _classNameTextInherit,\n                        _classNameCache].join(_strSpace);\n                    adoptAttrs = type(adoptAttrs) == TYPES.s ? adoptAttrs.split(' ') : adoptAttrs;\n                    if(type(adoptAttrs) == TYPES.a) {\n                        FRAMEWORK.each(adoptAttrs, function(i, v) { \n                            if(type(v) == TYPES.s)\n                                adoptAttrsMap[v] = destroy ? _hostElement.attr(v) : _targetElement.attr(v);\n                        });\n                    }\n                    \n                    if(!destroy) {\n                        if (_isTextarea) {\n                            var hostElementCSS = {};\n                            var parent = _targetElement.parent();\n                            _isTextareaHostGenerated = !(parent.hasClass(_classNameHostTextareaElement) && parent.children()[LEXICON.l] === 1);\n\n                            if (!_currentPreparedOptions.sizeAutoCapable) {\n                                hostElementCSS[_strWidth] = _targetElement.css(_strWidth);\n                                hostElementCSS[_strHeight] = _targetElement.css(_strHeight);\n                            }\n                            if(_isTextareaHostGenerated)\n                                _targetElement.wrap(generateDiv(_classNameHostTextareaElement));\n                            \n                            _hostElement = _targetElement.parent();\n                            _hostElement.css(hostElementCSS)\n                                .wrapInner(generateDiv(_classNameContentElement + _strSpace + _classNameTextInherit))\n                                .wrapInner(generateDiv(_classNameViewportElement + _strSpace + _classNameTextInherit))\n                                .wrapInner(generateDiv(_classNamePaddingElement + _strSpace + _classNameTextInherit));\n                            _contentElement = findFirst(_hostElement, _strDot + _classNameContentElement);\n                            _viewportElement = findFirst(_hostElement, _strDot + _classNameViewportElement);\n                            _paddingElement = findFirst(_hostElement, _strDot + _classNamePaddingElement);\n                            _textareaCoverElement = FRAMEWORK(generateDiv(_classNameTextareaCoverElement));\n                            _contentElement.prepend(_textareaCoverElement);\n\n                            addClass(_targetElement, _classNameTextareaElement + _strSpace + _classNameTextInherit);\n                            \n                            if(_isTextareaHostGenerated)\n                                applyAdoptedAttrs();\n                        } \n                        else {\n                            _hostElement = _targetElement;\n                            _hostElement.wrapInner(generateDiv(_classNameContentElement))\n                                .wrapInner(generateDiv(_classNameViewportElement))\n                                .wrapInner(generateDiv(_classNamePaddingElement));\n                            _contentElement = findFirst(_hostElement, _strDot + _classNameContentElement);\n                            _viewportElement = findFirst(_hostElement, _strDot + _classNameViewportElement);\n                            _paddingElement = findFirst(_hostElement, _strDot + _classNamePaddingElement);\n\n                            addClass(_targetElement, _classNameHostElement);\n                        }\n                        \n                        if (_nativeScrollbarStyling)\n                            addClass(_viewportElement, _nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y ? _classNameViewportNativeScrollbarsOverlaid : _classNameViewportNativeScrollbarsInvisible);\n                        if (_isBody)\n                            addClass(_htmlElement, _classNameHTMLElement);\n                        \n                        _sizeObserverElement = FRAMEWORK(generateDiv('os-resize-observer-host'));\n                        _hostElement.prepend(_sizeObserverElement);\n                    }\n                    else {\n                        _contentElement.contents()\n                            .unwrap()\n                            .unwrap()\n                            .unwrap();\n                            \n                        removeClass(_hostElement, hostElementClassNames);\n                        if (_isTextarea) {    \n                            _targetElement.removeAttr(LEXICON.s);\n                            \n                            if(_isTextareaHostGenerated)\n                                applyAdoptedAttrs();\n                            \n                            removeClass(_targetElement, hostElementClassNames);\n                            remove(_textareaCoverElement);\n                            \n                            if(_isTextareaHostGenerated) {\n                                _targetElement.unwrap();\n                                remove(_hostElement);\n                            }\n                            else {\n                                addClass(_hostElement, _classNameHostTextareaElement);\n                            }\n                        }\n                        else {\n                            removeClass(_targetElement, _classNameHostElement);\n                        }\n                        \n                        if (_isBody)\n                            removeClass(_htmlElement, _classNameHTMLElement);\n                        \n                        remove(_sizeObserverElement);\n                    }\n                }\n                \n                /**\n                 * Adds or removes all wrapper elements interactivity events.\n                 * @param destroy Indicates whether the Events shall be added or removed.\n                 */\n                function setupStructureEvents(destroy) {\n                    var textareaKeyDownRestrictedKeyCodes = [\n                        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123,    //F1 to F12\n                        33, 34,                                                   //page up, page down\n                        37, 38, 39, 40,                                           //left, up, right, down arrows\n                        16, 17, 18, 19, 20, 144                                   //Shift, Ctrl, Alt, Pause, CapsLock, NumLock\n                    ];\n                    var textareaKeyDownKeyCodesList = [ ];\n                    var textareaUpdateIntervalID;\n                    var scrollStopDelay = 175;\n                    var scrollStopTimeoutId;\n                    var strOnOff = destroy ? 'off' : 'on';\n                    var updateTextarea;\n                    var viewportOnScroll;\n\n                    if(!destroy && _isTextarea) {\n                        _textareaEvents = { };\n                        updateTextarea = function(doClearInterval) {\n                            textareaUpdate();\n                            _base.update(_strAuto);\n                            if(doClearInterval)\n                                clearInterval(textareaUpdateIntervalID);\n                        };\n                        _textareaEvents[_strScroll] = function(event) {\n                            _targetElement[_strScrollLeft](_rtlScrollBehavior.i && _normalizeRTLCache ? 9999999 : 0);\n                            _targetElement[_strScrollTop](0);\n                            COMPATIBILITY.prvD(event);\n                            COMPATIBILITY.stpP(event);\n                            return false;\n                        };\n                        _textareaEvents['drop'] = function() {\n                            setTimeout(function () {\n                                if(!_destroyed)\n                                    updateTextarea();\n                            }, 50);\n                        };\n                        _textareaEvents['focus'] = function() { \n                            _textareaHasFocus = true; \n                        };\n                        _textareaEvents['focusout'] = function() {\n                            _textareaHasFocus = false;\n                            textareaKeyDownKeyCodesList = [ ];\n                            updateTextarea(true);\n                        };\n                        if (_msieVersion > 9 || !_autoUpdateRecommended) {\n                            _textareaEvents['input'] = function textareaOnInput() {\n                                updateTextarea();\n                            }\n                        }\n                        else {\n                            _textareaEvents[_strKeyDownEvent] = function textareaOnKeyDown(event) {\n                                var keyCode = event.keyCode;\n                                if (FRAMEWORK.inArray(keyCode, textareaKeyDownRestrictedKeyCodes) > -1)\n                                    return;\n                                if (!textareaKeyDownKeyCodesList.length) {\n                                    updateTextarea();\n                                    textareaUpdateIntervalID = setInterval(updateTextarea, 1000 / 60);\n                                }\n                                if (FRAMEWORK.inArray(keyCode, textareaKeyDownKeyCodesList) === -1)\n                                    textareaKeyDownKeyCodesList.push(keyCode);\n                            };\n                            _textareaEvents[_strKeyUpEvent] = function(event) {\n                                var keyCode = event.keyCode;\n                                var index = FRAMEWORK.inArray(keyCode, textareaKeyDownKeyCodesList);\n                                \n                                if (FRAMEWORK.inArray(keyCode, textareaKeyDownRestrictedKeyCodes) > -1)\n                                    return;\n                                if (index > -1)\n                                    textareaKeyDownKeyCodesList.splice(index, 1);\n                                if (!textareaKeyDownKeyCodesList.length)\n                                    updateTextarea(true);\n                            };\n                        }\n                    }\n                    \n                    if (_isTextarea) {\n                        FRAMEWORK.each(_textareaEvents, function(key, value) {\n                            _targetElement[strOnOff](key, value);\n                        });\n                    } \n                    else {\n                        _contentElement[strOnOff](_strTransitionEndEvent, function (event) {\n                            if (_autoUpdateCache === true)\n                                return;\n                            event = event.originalEvent || event;\n                            if (isSizeAffectingCSSProperty(event.propertyName))\n                                update(_strAuto);\n                        });\n                    }\n                    \n                    if(!destroy) {\n                        viewportOnScroll = function(event) {\n                            if (_isSleeping)\n                                return;\n\n                            if (scrollStopTimeoutId !== undefined)\n                                clearTimeout(scrollStopTimeoutId);\n                            else {\n                                if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\n                                    refreshScrollbarsAutoHide(true);\n\n                                if (!nativeOverlayScrollbarsAreActive())\n                                    addClass(_hostElement, _classNameHostScrolling);\n\n                                dispatchCallback(\"onScrollStart\", event);\n                            }\n\n                            refreshScrollbarHandleOffset(true);\n                            refreshScrollbarHandleOffset(false);\n                            dispatchCallback(\"onScroll\", event);\n\n                            scrollStopTimeoutId = setTimeout(function () {\n                                if(!_destroyed) {\n                                    //OnScrollStop:\n                                    clearTimeout(scrollStopTimeoutId);\n                                    scrollStopTimeoutId = undefined;\n                                    \n                                    if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\n                                        refreshScrollbarsAutoHide(false);\n\n                                    if (!nativeOverlayScrollbarsAreActive())\n                                        removeClass(_hostElement, _classNameHostScrolling);\n\n                                    dispatchCallback(\"onScrollStop\", event);\n                                }\n                            }, scrollStopDelay);\n                        };\n\n                        if (_supportPassiveEvents)\n                            addPassiveEventListener(_viewportElement, _strScroll, viewportOnScroll);\n                        else\n                            _viewportElement.on(_strScroll, viewportOnScroll);\n                    }\n                }\n\n                \n                \n                //==== Scrollbars ====//\n\n                /**\n                 * Builds or destroys all scrollbar DOM elements (scrollbar, track, handle)\n                 * @param destroy Indicates whether the DOM shall be build or destroyed.\n                 */\n                function setupScrollbarsDOM(destroy) {\n                    if(!destroy) {\n                        _scrollbarHorizontalElement = FRAMEWORK(generateDiv(_classNameScrollbar + _strSpace + _classNameScrollbarHorizontal));\n                        _scrollbarHorizontalTrackElement = FRAMEWORK(generateDiv(_classNameScrollbarTrack));\n                        _scrollbarHorizontalHandleElement = FRAMEWORK(generateDiv(_classNameScrollbarHandle));\n                        _scrollbarVerticalElement = FRAMEWORK(generateDiv(_classNameScrollbar + _strSpace + _classNameScrollbarVertical));\n                        _scrollbarVerticalTrackElement = FRAMEWORK(generateDiv(_classNameScrollbarTrack));\n                        _scrollbarVerticalHandleElement = FRAMEWORK(generateDiv(_classNameScrollbarHandle));\n\n                        _scrollbarHorizontalElement.append(_scrollbarHorizontalTrackElement);\n                        _scrollbarHorizontalTrackElement.append(_scrollbarHorizontalHandleElement);\n                        _scrollbarVerticalElement.append(_scrollbarVerticalTrackElement);\n                        _scrollbarVerticalTrackElement.append(_scrollbarVerticalHandleElement);\n\n                        _paddingElement.after(_scrollbarVerticalElement);\n                        _paddingElement.after(_scrollbarHorizontalElement);\n                    }\n                    else {\n                        remove(_scrollbarHorizontalElement);\n                        remove(_scrollbarVerticalElement);\n                    }\n                }\n\n                /**\n                 * Initializes all scrollbar interactivity events. (track and handle dragging, clicking, scrolling)\n                 * @param isHorizontal True if the target scrollbar is the horizontal scrollbar, false if the target scrollbar is the vertical scrollbar.\n                 */\n                function setupScrollbarEvents(isHorizontal) {\n                    var scrollbarVars = getScrollbarVars(isHorizontal);\n                    var insideIFrame = _windowElement.top !== _windowElement;\n                    var mouseDownScroll;\n                    var mouseDownOffset;\n                    var xy = scrollbarVars.xy;\n                    var XY = scrollbarVars.XY;\n                    var scroll = _strScroll + scrollbarVars.LT;\n                    var strActive = 'active';\n                    var trackTimeout;\n                    var scrollDurationFactor = 1;\n                    var increaseDecreaseScrollAmountKeyCodes = [ 16, 17 ]; //shift, ctrl\n                    function increaseTrackScrollAmount() {\n                        scrollDurationFactor = 0.5;\n                    }\n                    function decreaseTrackScrollAmount() {\n                        scrollDurationFactor = 1;\n                    }\n                    function documentKeyDown(event) {\n                        if (FRAMEWORK.inArray(event.keyCode, increaseDecreaseScrollAmountKeyCodes) > -1)\n                            increaseTrackScrollAmount();\n                    }\n                    function documentKeyUp(event) {\n                        if (FRAMEWORK.inArray(event.keyCode, increaseDecreaseScrollAmountKeyCodes) > -1)\n                            decreaseTrackScrollAmount();\n                    }\n                    function onMouseTouchDownContinue(event) {\n                        var originalEvent = event.originalEvent || event;\n                        var isTouchEvent = originalEvent.touches !== undefined;\n                        return _isSleeping || _destroyed || nativeOverlayScrollbarsAreActive() || !_scrollbarsDragScrollingCache || (isTouchEvent && !_scrollbarsTouchSupport) ? false : COMPATIBILITY.mBtn(event) === 1 || isTouchEvent;\n                    }\n                    function documentDragMove(event) {\n                        if(onMouseTouchDownContinue(event)) {\n                            var trackLength = scrollbarVars.i.tl;\n                            var handleLength = scrollbarVars.i.hl;\n                            var scrollRange = scrollbarVars.i.ms;\n                            var scrollRaw = (_msieVersion && insideIFrame ? event['screen' + XY] : COMPATIBILITY.page(event)[xy]) - mouseDownOffset; //use screen coordinates in EDGE & IE because the page values are incorrect in frames.\n                            var scrollDeltaPercent = scrollRaw / (trackLength - handleLength);\n                            var scrollDelta = (scrollRange * scrollDeltaPercent);\n                            scrollDelta = isFinite(scrollDelta) ? scrollDelta : 0;\n                            if (_isRTL && isHorizontal && !_rtlScrollBehavior.i)\n                                scrollDelta *= -1;\n                            _viewportElement[scroll](mouseDownScroll + scrollDelta);\n\n                            if (!_supportPassiveEvents)\n                                COMPATIBILITY.prvD(event);\n                        }\n                        else\n                            documentMouseTouchUp(event);\n                    }\n                    function documentMouseTouchUp(event) {\n                        event = event || event.originalEvent;\n\n                        removeClass(_bodyElement, _classNameDragging);\n                        removeClass(scrollbarVars.h, strActive);\n                        removeClass(scrollbarVars.t, strActive);\n                        removeClass(scrollbarVars.s, strActive);\n\n                        _documentElement.off(_strMouseTouchMoveEvent, documentDragMove)\n                            .off(_strMouseTouchUpEvent, documentMouseTouchUp)\n                            .off(_strKeyDownEvent, documentKeyDown)\n                            .off(_strKeyUpEvent, documentKeyUp)\n                            .off(_strSelectStartEvent, documentOnSelectStart);\n\n                        decreaseTrackScrollAmount();\n                        mouseDownScroll = undefined;\n                        mouseDownOffset = undefined;\n                        if (trackTimeout !== undefined) {\n                            _base.scrollStop();\n                            clearTimeout(trackTimeout);\n                            trackTimeout = undefined;\n                        }\n                        \n                        if(event) {\n                            var rect = _hostElement[0].getBoundingClientRect();\n                            var mouseInsideHost = event.clientX >= rect.left && event.clientX <= rect.right && event.clientY >= rect.top && event.clientY <= rect.bottom;\n\n                            //if mouse is outside host element\n                            if (!mouseInsideHost)\n                                hostOnMouseLeave();\n                        \n                            if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\n                                refreshScrollbarsAutoHide(false);\n                        }\n                    }\n                    function onHandleMouseTouchDown(event) {\n                        mouseDownScroll = _viewportElement[scroll]();\n                        mouseDownScroll = mouseDownScroll === undefined ? 0 : mouseDownScroll;\n                        if (_isRTL && isHorizontal && !_rtlScrollBehavior.n || !_isRTL)\n                            mouseDownScroll = mouseDownScroll < 0 ? 0 : mouseDownScroll;\n                        mouseDownOffset = _msieVersion && insideIFrame ? event['screen' + XY] : COMPATIBILITY.page(event)[xy]; //use screen coordinates in EDGE & IE because the page values are incorrect in frames.\n\n                        addClass(_bodyElement, _classNameDragging);\n                        addClass(scrollbarVars.h, strActive);\n                        addClass(scrollbarVars.s, strActive);\n\n                        _documentElement.on(_strMouseTouchMoveEvent, documentDragMove)\n                            .on(_strMouseTouchUpEvent, documentMouseTouchUp)\n                            .on(_strSelectStartEvent, documentOnSelectStart);\n\n                        if(_msieVersion || !_documentMixed)\n                            COMPATIBILITY.prvD(event);\n                        COMPATIBILITY.stpP(event);\n                    }\n                    scrollbarVars.h.on(_strMouseTouchDownEvent, function(event) {\n                        if (onMouseTouchDownContinue(event))\n                            onHandleMouseTouchDown(event);\n                    });\n                    scrollbarVars.t.on(_strMouseTouchDownEvent, function(event) {\n                        if (onMouseTouchDownContinue(event)) {\n                            var scrollDistance = _viewportSize[scrollbarVars._wh];\n                            var trackOffset = scrollbarVars.t.offset()[scrollbarVars.lt];\n                            var ctrlKey = event.ctrlKey;\n                            var instantScroll = event.shiftKey;\n                            var instantScrollTransition = instantScroll && ctrlKey;\n                            var isFirstIteration = true;\n                            var easing = 'linear';\n                            var decreaseScroll;\n                            var finishedCondition;\n                            var scrollAction = function () {\n                                if(!_destroyed) {\n                                    var mouseOffset = mouseDownOffset - trackOffset;\n                                    var trackLength = scrollbarVars.i.tl;\n                                    var handleOffset = scrollbarVars.i.ho;\n                                    var handleLength = scrollbarVars.i.hl;\n                                    var scrollRange = scrollbarVars.i.ms;\n                                    var scrollDuration = 270 * scrollDurationFactor;\n                                    var timeoutDelay = isFirstIteration ? MATH.max(400, scrollDuration) : scrollDuration;\n                                    var instantScrollPosition = scrollRange * ((mouseOffset - (handleLength / 2)) / (trackLength - handleLength)); // 100% * positionPercent\n                                    var rtlIsNormal = _isRTL && isHorizontal && ((!_rtlScrollBehavior.i && !_rtlScrollBehavior.n) || _normalizeRTLCache);\n                                    var decreaseScrollCondition = rtlIsNormal ? handleOffset < mouseOffset : handleOffset > mouseOffset;\n                                    var scrollObj = { };\n\n                                    if(instantScroll) {\n                                        instantScrollPosition = isFinite(instantScrollPosition) ? instantScrollPosition : 0;\n                                        if (_isRTL && isHorizontal && !_rtlScrollBehavior.i)\n                                            instantScrollPosition = (scrollRange - instantScrollPosition);\n                                        if(instantScrollTransition) {\n                                            scrollObj.n = false;\n                                            scrollObj[xy] = instantScrollPosition;\n                                            _base.scroll(scrollObj, 130, easing, function() { onHandleMouseTouchDown(event); });\n                                        }\n                                        else {\n                                            _viewportElement[scroll](instantScrollPosition);\n                                            onHandleMouseTouchDown(event);\n                                        }\n                                    }\n                                    else {\n                                        decreaseScroll = isFirstIteration ? decreaseScrollCondition : decreaseScroll;\n                                        finishedCondition = rtlIsNormal ? decreaseScroll ? handleOffset + handleLength >= mouseOffset : handleOffset <= mouseOffset : decreaseScroll ? handleOffset <= mouseOffset : handleOffset + handleLength >= mouseOffset;\n\n                                        scrollObj[xy] = decreaseScroll ? '-=' + scrollDistance : '+=' + scrollDistance;\n                                        _base.scrollStop();\n                                        _base.scroll(scrollObj, scrollDuration, easing);\n\n                                        if (finishedCondition) {\n                                            clearTimeout(trackTimeout);\n                                            _base.scrollStop();\n                                            trackTimeout = undefined;\n                                        }\n                                        else\n                                            trackTimeout = setTimeout(scrollAction, timeoutDelay);\n                                        isFirstIteration = false;\n                                    }\n                                }\n                            };\n                            if (ctrlKey)\n                                increaseTrackScrollAmount();\n                            mouseDownOffset = COMPATIBILITY.page(event)[xy];\n\n                            addClass(_bodyElement, _classNameDragging);\n                            addClass(scrollbarVars.t, strActive);\n                            addClass(scrollbarVars.s, strActive);\n\n                            _documentElement.on(_strMouseTouchUpEvent, documentMouseTouchUp)\n                                .on(_strKeyDownEvent, documentKeyDown)\n                                .on(_strKeyUpEvent, documentKeyUp)\n                                .on(_strSelectStartEvent, documentOnSelectStart);\n\n                            scrollAction();\n                            COMPATIBILITY.prvD(event);\n                            COMPATIBILITY.stpP(event);\n                        }\n                    }).on(_strMouseTouchEnter, function() { //make sure both scrollbars will stay visible if one scrollbar is hovered if autoHide is \"scroll\".\n                        if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove) {\n                            _scrollbarsAutoHideFlagScrollAndHovered = true;\n                            refreshScrollbarsAutoHide(true);\n                        }\n                    }).on(_strMouseTouchLeave, function() {\n                        if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove) {\n                            _scrollbarsAutoHideFlagScrollAndHovered = false;\n                            refreshScrollbarsAutoHide(false);\n                        }\n                    });\n                    scrollbarVars.s.on(_strMouseTouchDownEvent, function(event) {\n                        COMPATIBILITY.stpP(event);\n                    });\n                    if (_supportTransition) {\n                        scrollbarVars.s.on(_strTransitionEndEvent, function(event) {\n                            if (event.target !== scrollbarVars.s[0])\n                                return;\n                            refreshScrollbarHandleLength(isHorizontal);\n                            refreshScrollbarHandleOffset(isHorizontal);\n                        });\n                    }\n                }\n\n                /**\n                 * Shows or hides the given scrollbar and applied a class name which indicates if the scrollbar is scrollable or not.\n                 * @param isHorizontal True if the horizontal scrollbar is the target, false if the vertical scrollbar is the target.\n                 * @param shallBeVisible True if the scrollbar shall be shown, false if hidden.\n                 * @param canScroll True if the scrollbar is scrollable, false otherwise.\n                 */\n                function refreshScrollbarAppearance(isHorizontal, shallBeVisible, canScroll) {\n                    var scrollbarClassName = isHorizontal ? _classNameHostScrollbarHorizontalHidden : _classNameHostScrollbarVerticalHidden;\n                    var scrollbarElement = isHorizontal ? _scrollbarHorizontalElement : _scrollbarVerticalElement;\n\n                    if (shallBeVisible)\n                        removeClass(_hostElement, scrollbarClassName);\n                    else\n                        addClass(_hostElement, scrollbarClassName);\n\n                    if (canScroll)\n                        removeClass(scrollbarElement, _classNameScrollbarUnusable);\n                    else\n                        addClass(scrollbarElement, _classNameScrollbarUnusable);\n                }\n\n                /**\n                 * Autoshows / autohides both scrollbars with.\n                 * @param shallBeVisible True if the scrollbars shall be autoshown (only the case if they are hidden by a autohide), false if the shall be auto hidden.\n                 * @param delayfree True if the scrollbars shall be hidden without a delay, false or undefined otherwise.\n                 */\n                function refreshScrollbarsAutoHide(shallBeVisible, delayfree) {\n                    clearTimeout(_scrollbarsAutoHideTimeoutId);\n                    if (shallBeVisible) {\n                        //if(_hasOverflowCache.x && _hideOverflowCache.xs)\n                        removeClass(_scrollbarHorizontalElement, _classNameScrollbarAutoHidden);\n                        //if(_hasOverflowCache.y && _hideOverflowCache.ys)\n                        removeClass(_scrollbarVerticalElement, _classNameScrollbarAutoHidden);\n                    }\n                    else {\n                        var strActive = 'active';\n                        var hide = function () {\n                            if (!_scrollbarsAutoHideFlagScrollAndHovered && !_destroyed) {\n                                var anyActive = _scrollbarHorizontalHandleElement.hasClass(strActive) || _scrollbarVerticalHandleElement.hasClass(strActive);\n                                if (!anyActive && (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove || _scrollbarsAutoHideLeave))\n                                    addClass(_scrollbarHorizontalElement, _classNameScrollbarAutoHidden);\n                                if (!anyActive && (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove || _scrollbarsAutoHideLeave))\n                                    addClass(_scrollbarVerticalElement, _classNameScrollbarAutoHidden);\n                            }\n                        };\n                        if (_scrollbarsAutoHideDelay > 0 && delayfree !== true)\n                            _scrollbarsAutoHideTimeoutId = setTimeout(hide, _scrollbarsAutoHideDelay);\n                        else\n                            hide();\n                    }\n                }\n\n                /**\n                 * Refreshes the handle length of the given scrollbar.\n                 * @param isHorizontal True if the horizontal scrollbar handle shall be refreshed, false if the vertical one shall be refreshed.\n                 */\n                function refreshScrollbarHandleLength(isHorizontal) {\n                    var handleCSS = {};\n                    var scrollbarVars = getScrollbarVars(isHorizontal);\n                    var digit = 1000000;\n                    //get and apply intended handle length\n                    var handleRatio = MATH.min(1, (_hostSizeCache[scrollbarVars._wh] - (_paddingAbsoluteCache ? (isHorizontal ? _paddingX : _paddingY) : 0)) / _contentScrollSizeCache[scrollbarVars._wh]);\n                    handleCSS[scrollbarVars.wh] = (MATH.floor(handleRatio * 100 * digit) / digit) + \"%\"; //the last * digit / digit is for flooring to the 4th digit\n\n                    if (!nativeOverlayScrollbarsAreActive())\n                        scrollbarVars.h.css(handleCSS);\n\n                    //measure the handle length to respect min & max length\n                    scrollbarVars.i.hl = scrollbarVars.h[0]['offset' + scrollbarVars.WH];   //hl = handle length\n                    scrollbarVars.i.hlr = handleRatio;                                      //hr = handle length ratio\n                }\n\n                /**\n                 * Refreshes the handle offset of the given scrollbar.\n                 * @param isHorizontal True if the horizontal scrollbar handle shall be refreshed, false if the vertical one shall be refreshed.\n                 * @param currentScroll The current scroll offset of the given scrollbar axis or undefined if the current scroll-offset shall be taken. (if isHorizontal ? scrollLeft : scrollTop)\n                 */\n                function refreshScrollbarHandleOffset(isHorizontal, currentScroll) {\n                    currentScroll = currentScroll === undefined ? isHorizontal ? _viewportElement[_strScrollLeft]() : _viewportElement[_strScrollTop]() : currentScroll;\n                    var isRTLisHorizontal = _isRTL && isHorizontal;\n                    var handleCSS = {};\n                    var scrollbarVars = getScrollbarVars(isHorizontal);\n                    var strTranslateBrace = 'translate(';\n                    var strTransform = 'transform';\n                    var translateValue;\n\n                    //measure the handle length to respect min & max length\n                    //DONT use the variable '_contentScrollSizeCache[scrollbarVars._wh]' instead of '_viewportElement[0]['scroll' + scrollbarVars.WH]'\n                    // because its a bit behind during the small delay when content size updates\n                    //(delay = mutationObserverContentLag, if its 0 then this var could be used)\n                    var maxScroll = _viewportElement[0][_strScroll + scrollbarVars.WH] - _viewportElement[0]['client' + scrollbarVars.WH];\n                    var handleLength = scrollbarVars.i.hl;\n                    var trackLength = scrollbarVars.t[0]['offset' + scrollbarVars.WH];\n                    var handleTrackDiff = trackLength - handleLength;\n                    var offset = handleTrackDiff;\n                    var transformOffset;\n                    var posRatio;\n\n                    //if rtl scroll max is negative\n                    if (_rtlScrollBehavior.n && isRTLisHorizontal)\n                        maxScroll *= -1;\n\n                    posRatio = currentScroll / maxScroll;\n                    posRatio = isNaN(posRatio) ? 0 : MATH.min(1, posRatio);\n\n                    scrollbarVars.i.ms = maxScroll;       //ms = max scroll\n                    scrollbarVars.i.cs = currentScroll;   //cs = current scroll\n                    scrollbarVars.i.csr = posRatio;       //csr = current scroll Ratio\n\n                    offset *= posRatio;\n                    offset = isNaN(offset) ? 0 : offset;\n                    if (isRTLisHorizontal && !_rtlScrollBehavior.i)\n                        offset = trackLength - handleLength - offset;\n                    offset = MATH.max(0, offset);\n\n                    if (_supportTransform) {\n                        transformOffset = isRTLisHorizontal ? -(trackLength - handleLength - offset) : offset; //in px\n                        //transformOffset = (transformOffset / trackLength * 100) * (trackLength / handleLength); //in %\n                        translateValue = isHorizontal ? strTranslateBrace + transformOffset + 'px, 0)' : strTranslateBrace + '0, ' + transformOffset + 'px)';\n                        handleCSS['-webkit-' + strTransform] = translateValue;\n                        handleCSS['-moz-' + strTransform] = translateValue;\n                        handleCSS['-ms-' + strTransform] = translateValue;\n                        handleCSS['-o-' + strTransform] = translateValue;\n                        handleCSS[strTransform] = translateValue;\n                    }\n                    else\n                        handleCSS[scrollbarVars.lt] = offset;\n\n                    //only apply css if offset has changed and overflow exists.\n                    if (!nativeOverlayScrollbarsAreActive())\n                        scrollbarVars.h.css(handleCSS);\n\n                    scrollbarVars.i.ho = offset;                        //ho = handle offset\n                    scrollbarVars.i.tl = trackLength;                   //tl = track length\n                }\n\n                /**\n                 * Refreshes the interactivity of the given scrollbar element.\n                 * @param isTrack True if the track element is the target, false if the handle element is the target.\n                 * @param value True for interactivity false for no interactivity.\n                 */\n                function refreshScrollbarsInteractive(isTrack, value) {\n                    var action = value ? 'removeClass' : 'addClass';\n                    var element1 = isTrack ? _scrollbarHorizontalTrackElement : _scrollbarHorizontalHandleElement;\n                    var element2 = isTrack ? _scrollbarVerticalTrackElement : _scrollbarVerticalHandleElement;\n                    var className = isTrack ? _classNameScrollbarTrackOff : _classNameScrollbarHandleOff;\n\n                    element1[action](className);\n                    element2[action](className);\n                }\n\n                /**\n                 * Returns a object which is used for fast access for specific variables.\n                 * @param isHorizontal True if the horizontal scrollbar vars shall be accessed, false if the vertical scrollbar vars shall be accessed.\n                 * @returns {{wh: string, WH: string, lt: string, _wh: string, _lt: string, t: *, h: *, c: {}, s: *}}\n                 */\n                function getScrollbarVars(isHorizontal) {\n                    return {\n                        wh: isHorizontal ? _strWidth : _strHeight,\n                        WH: isHorizontal ? 'Width' : 'Height',\n                        lt: isHorizontal ? _strLeft : _strTop,\n                        LT: isHorizontal ? 'Left' : 'Top',\n                        xy: isHorizontal ? _strX : _strY,\n                        XY: isHorizontal ? 'X' : 'Y',\n                        _wh: isHorizontal ? 'w' : 'h',\n                        _lt: isHorizontal ? 'l' : 't',\n                        t: isHorizontal ? _scrollbarHorizontalTrackElement : _scrollbarVerticalTrackElement,\n                        h: isHorizontal ? _scrollbarHorizontalHandleElement : _scrollbarVerticalHandleElement,\n                        s: isHorizontal ? _scrollbarHorizontalElement : _scrollbarVerticalElement,\n                        i: isHorizontal ? _scrollHorizontalInfo : _scrollVerticalInfo\n                    };\n                }\n\n                \n                //==== Scrollbar Corner ====//\n                \n                /**\n                 * Builds or destroys the scrollbar corner DOM element.\n                 * @param destroy Indicates whether the DOM shall be build or destroyed.\n                 */\n                function setupScrollbarCornerDOM(destroy) {\n                    if(!destroy) {\n                         _scrollbarCornerElement = FRAMEWORK(generateDiv(_classNameScrollbarCorner));\n                        _hostElement.append(_scrollbarCornerElement);\n                    }\n                    else {\n                        remove(_scrollbarCornerElement);\n                    }\n                 }\n                \n                /**\n                 * Initializes all scrollbar corner interactivity events.\n                 */\n                function setupScrollbarCornerEvents() {\n                    var insideIFrame = _windowElement.top !== _windowElement;\n                    var resizeDragStartPosition = { };              \n                    var resizeDragStartSize = { };\n                    \n                    _resizeOnMouseTouchDown = function(event) {\n                        if (onMouseTouchDownContinue(event)) {\n                            if (_mutationObserversConnected) {\n                                _resizeReconnectMutationObserver = true;\n                                disconnectMutationObservers();\n                            }\n\n                            resizeDragStartPosition = getCoordinates(event);\n\n                            resizeDragStartSize.w = _hostElement[0][LEXICON.oW] - (!_isBorderBox ? _paddingX : 0);\n                            resizeDragStartSize.h = _hostElement[0][LEXICON.oH] - (!_isBorderBox ? _paddingY : 0);\n\n                            _documentElement.on(_strSelectStartEvent, documentOnSelectStart)\n                                .on(_strMouseTouchMoveEvent, documentDragMove)\n                                .on(_strMouseTouchUpEvent, documentMouseTouchUp);\n\n                            addClass(_bodyElement, _classNameDragging);\n                            if (_scrollbarCornerElement.setCapture)\n                                _scrollbarCornerElement.setCapture();\n\n                            COMPATIBILITY.prvD(event);\n                            COMPATIBILITY.stpP(event);\n                        }\n                    };\n                    function documentDragMove(event) {\n                        if (onMouseTouchDownContinue(event)) {\n                            var pageOffset = getCoordinates(event);\n                            var hostElementCSS = { };\n                            if (_resizeHorizontal || _resizeBoth)\n                                hostElementCSS[_strWidth] = (resizeDragStartSize.w + pageOffset.x - resizeDragStartPosition.x);\n                            if (_resizeVertical || _resizeBoth)\n                                hostElementCSS[_strHeight] = (resizeDragStartSize.h + pageOffset.y - resizeDragStartPosition.y);\n                            _hostElement.css(hostElementCSS);\n                            COMPATIBILITY.stpP(event);\n                        }\n                        else {\n                            documentMouseTouchUp(event);\n                        }\n                    }\n                    function documentMouseTouchUp(event) {\n                        var eventIsTrusted = event !== undefined;\n\n                        _documentElement.off(_strSelectStartEvent, documentOnSelectStart)\n                            .off(_strMouseTouchMoveEvent, documentDragMove)\n                            .off(_strMouseTouchUpEvent, documentMouseTouchUp);\n\n                        removeClass(_bodyElement, _classNameDragging);\n                        if (_scrollbarCornerElement.releaseCapture)\n                            _scrollbarCornerElement.releaseCapture();\n\n                        if (eventIsTrusted) {\n                            if (_resizeReconnectMutationObserver)\n                                connectMutationObservers();\n                            _base.update(_strAuto);\n                        }\n                        _resizeReconnectMutationObserver = false;\n                    }\n                    function onMouseTouchDownContinue(event) {\n                        var originalEvent = event.originalEvent || event;\n                        var isTouchEvent = originalEvent.touches !== undefined;\n                        return _isSleeping || _destroyed ? false : COMPATIBILITY.mBtn(event) === 1 || isTouchEvent;\n                    }\n                    function getCoordinates(event) {\n                        return _msieVersion && insideIFrame ? { x : event.screenX , y : event.screenY } : COMPATIBILITY.page(event);\n                    }\n                }\n\n                \n                //==== Utils ====//\n\n                /**\n                 * Calls the callback with the given name. The Context of this callback is always _base (this).\n                 * @param name The name of the target which shall be called.\n                 * @param args The args with which the callback shall be called.\n                 */\n                function dispatchCallback(name, args) {\n                    if(_initialized) {\n                        var callback = _currentPreparedOptions.callbacks[name];\n                        var extensionOnName = name;\n                        var ext;\n\n                        if(extensionOnName.substr(0, 2) === \"on\")\n                            extensionOnName = extensionOnName.substr(2, 1).toLowerCase() + extensionOnName.substr(3);\n\n                        if(type(callback) == TYPES.f)\n                            callback.call(_base, args);\n\n                        FRAMEWORK.each(_extensions, function() {\n                            ext = this;\n                            if(type(ext.on) == TYPES.f)\n                                ext.on(extensionOnName, args);\n                        });\n                    }\n                    else if(!_destroyed)\n                        _callbacksInitQeueue.push({ n : name, a : args });\n                }\n\n                /**\n                 * Sets the \"top, right, bottom, left\" properties, with a given prefix, of the given css object.\n                 * @param targetCSSObject The css object to which the values shall be applied.\n                 * @param prefix The prefix of the \"top, right, bottom, left\" css properties. (example: 'padding-' is a valid prefix)\n                 * @param values A array of values which shall be applied to the \"top, right, bottom, left\" -properties. The array order is [top, right, bottom, left].\n                 * If this argument is undefined the value '' (empty string) will be applied to all properties.\n                 */\n                function setTopRightBottomLeft(targetCSSObject, prefix, values) {\n                    if (values === undefined)\n                        values = [_strEmpty, _strEmpty, _strEmpty, _strEmpty];\n\n                    targetCSSObject[prefix + _strTop] = values[0];\n                    targetCSSObject[prefix + _strRight] = values[1];\n                    targetCSSObject[prefix + _strBottom] = values[2];\n                    targetCSSObject[prefix + _strLeft] = values[3];\n                }\n\n                /**\n                 * Checks whether the given object is a HTMLElement.\n                 * @param o The object which shall be checked.\n                 * @returns {boolean} True the given object is a HTMLElement, false otherwise.\n                 */\n                function isHTMLElement(o) {\n                    var strOwnerDocument = 'ownerDocument';\n                    var strHTMLElement = 'HTMLElement';\n                    var wnd = o && o[strOwnerDocument] ? (o[strOwnerDocument].parentWindow || window) : window;\n                    return (\n                        typeof wnd[strHTMLElement] == TYPES.o ? o instanceof wnd[strHTMLElement] : //DOM2\n                        o && typeof o == TYPES.o && o !== null && o.nodeType === 1 && typeof o.nodeName == TYPES.s\n                    );\n                }\n\n                /**\n                 * Compares 2 arrays and returns the differences between them as a array.\n                 * @param a1 The first array which shall be compared.\n                 * @param a2 The second array which shall be compared.\n                 * @returns {Array} The differences between the two arrays.\n                 */\n                function getArrayDifferences(a1, a2) {\n                    var a = [ ];\n                    var diff = [ ];\n                    var i;\n                    var k;\n                    for (i = 0; i < a1.length; i++)\n                        a[a1[i]] = true;\n                    for (i = 0; i < a2.length; i++) {\n                        if (a[a2[i]])\n                            delete a[a2[i]];\n                        else\n                            a[a2[i]] = true;\n                    }\n                    for (k in a)\n                        diff.push(k);\n                    return diff;\n                }\n\n                /**\n                 * Returns Zero or the number to which the value can be parsed.\n                 * @param value The value which shall be parsed.\n                 * @param toFloat Indicates whether the number shall be parsed to a float.\n                 */\n                function parseToZeroOrNumber(value, toFloat) {\n                    var num = toFloat ? parseFloat(value) : parseInt(value);\n                    return isNaN(num) ? 0 : num;\n                }\n                \n                /**\n                 * Gets several information of the textarea and returns them as a object or undefined if the browser doesn't support it.\n                 * @returns {{cursorRow: Number, cursorCol, rows: Number, cols: number, wRow: number, pos: number, max : number}} or undefined if not supported.\n                 */\n                function getTextareaInfo() {\n                    //read needed values\n                    var textareaCursorPosition = _targetElement[0].selectionStart;\n                    if (textareaCursorPosition === undefined)\n                        return;\n\n                    var strLength = 'length';\n                    var textareaValue = _targetElement.val();\n                    var textareaLength = textareaValue[strLength];\n                    var textareaRowSplit = textareaValue.split(\"\\n\");\n                    var textareaLastRow = textareaRowSplit[strLength];\n                    var textareaCurrentCursorRowSplit = textareaValue.substr(0, textareaCursorPosition).split(\"\\n\");\n                    var widestRow = 0;\n                    var textareaLastCol = 0;\n                    var cursorRow = textareaCurrentCursorRowSplit[strLength];\n                    var cursorCol = textareaCurrentCursorRowSplit[textareaCurrentCursorRowSplit[strLength] - 1][strLength];\n                    var rowCols;\n                    var i;\n\n                    //get widest Row and the last column of the textarea\n                    for (i = 0; i < textareaRowSplit[strLength]; i++) {\n                        rowCols = textareaRowSplit[i][strLength];\n                        if (rowCols > textareaLastCol) {\n                            widestRow = i + 1;\n                            textareaLastCol = rowCols;\n                        }\n                    }\n\n                    return {\n                        cR: cursorRow, //cursorRow\n                        cC: cursorCol, //cursorCol\n                        r: textareaLastRow, //rows\n                        c: textareaLastCol, //cols\n                        w: widestRow, //wRow\n                        p: textareaCursorPosition, //pos\n                        m: textareaLength //max\n                    };\n                }\n\n                /**\n                 * Determines whether native overlay scrollbars are active.\n                 * @returns {boolean} True if native overlay scrollbars are active, false otherwise.\n                 */\n                function nativeOverlayScrollbarsAreActive() {\n                    return (_ignoreOverlayScrollbarHidingCache && (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y));\n                }\n\n                /**\n                 * Gets the element which is used to measure the content size.\n                 * @returns {*} TextareaCover if target element is textarea else the ContentElement.\n                 */\n                function getContentMeasureElement() {\n                    return _isTextarea ? _textareaCoverElement[0] : _contentElement[0];\n                }\n\n                /**\n                 * Generates a string which represents a HTML div with the given classes or attributes.\n                 * @param classesOrAttrs The class of the div as string or a object which represents the attributes of the div. (The class attribute can also be written as \"className\".)\n                 * @param content The content of the div as string.\n                 * @returns {string} The concated string which represents a HTML div and its content.\n                 */\n                function generateDiv(classesOrAttrs, content) {\n                    return '<div ' + (classesOrAttrs ? type(classesOrAttrs) == TYPES.s ?\n                        'class=\"' + classesOrAttrs + '\"' :\n                            (function() {\n                                var key;\n                                var attrs = '';\n                                if(FRAMEWORK.isPlainObject(classesOrAttrs)) {\n                                    for (key in classesOrAttrs)\n                                        attrs += (key === 'className' ? 'class' : key) + '=\"' + classesOrAttrs[key] + '\" ';\n                                }\n                                return attrs;\n                            })() :\n                            _strEmpty) +\n                        '>' +\n                        (content ? content : _strEmpty) +\n                        '</div>';\n                }\n\n                /**\n                 * Gets the value of the given property from the given object.\n                 * @param obj The object from which the property value shall be got.\n                 * @param path The property of which the value shall be got.\n                 * @returns {*} Returns the value of the searched property or undefined of the property wasn't found.\n                 */\n                function getObjectPropVal(obj, path) {\n                    var splits = path.split(_strDot);\n                    var i = 0;\n                    var val;\n                    for(; i < splits.length; i++) {\n                        if(!obj.hasOwnProperty(splits[i]))\n                            return;\n                        val = obj[splits[i]];\n                        if(i < splits.length && type(val) == TYPES.o)\n                            obj = val;\n                    }\n                    return val;\n                }\n\n                /**\n                 * Sets the value of the given property from the given object.\n                 * @param obj The object from which the property value shall be set.\n                 * @param path The property of which the value shall be set.\n                 * @param val The value of the property which shall be set.\n                 */\n                function setObjectPropVal(obj, path, val) {\n                    var splits = path.split(_strDot);\n                    var splitsLength = splits.length;\n                    var i = 0;\n                    var extendObj = { };\n                    var extendObjRoot = extendObj;\n                    for(; i < splitsLength; i++)\n                        extendObj = extendObj[splits[i]] = i + 1 < splitsLength ? { } : val;\n                    FRAMEWORK.extend(obj, extendObjRoot, true);\n                }\n\n                \n                //==== Utils Cache ====//\n\n                /**\n                 * Compares two values and returns the result of the comparison as a boolean.\n                 * @param current The first value which shall be compared.\n                 * @param cache The second value which shall be compared.\n                 * @param force If true the returned value is always true.\n                 * @returns {boolean} True if both variables aren't equal or some of them is undefined or when the force parameter is true, false otherwise.\n                 */\n                function checkCacheSingle(current, cache, force) {\n                    if (force === true)\n                        return force;\n                    if (cache === undefined)\n                        return true;\n                    else if (current !== cache)\n                        return true;\n                    return false;\n                }\n\n                /**\n                 * Compares two objects with two properties and returns the result of the comparison as a boolean.\n                 * @param current The first object which shall be compared.\n                 * @param cache The second object which shall be compared.\n                 * @param prop1 The name of the first property of the objects which shall be compared.\n                 * @param prop2 The name of the second property of the objects which shall be compared.\n                 * @param force If true the returned value is always true.\n                 * @returns {boolean} True if both variables aren't equal or some of them is undefined or when the force parameter is true, false otherwise.\n                 */\n                function checkCacheDouble(current, cache, prop1, prop2, force) {\n                    if (force === true)\n                        return force;\n                    if (prop2 === undefined && force === undefined) {\n                        if (prop1 === true)\n                            return prop1;\n                        else\n                            prop1 = undefined;\n                    }\n                    prop1 = prop1 === undefined ? 'w' : prop1;\n                    prop2 = prop2 === undefined ? 'h' : prop2;\n                    if (cache === undefined)\n                        return true;\n                    else if (current[prop1] !== cache[prop1] || current[prop2] !== cache[prop2])\n                        return true;\n                    return false;\n                }\n\n                /**\n                 * Compares two objects which have four properties and returns the result of the comparison as a boolean.\n                 * @param current The first object with four properties.\n                 * @param cache The second object with four properties.\n                 * @returns {boolean} True if both objects aren't equal or some of them is undefined, false otherwise.\n                 */\n                function checkCacheTRBL(current, cache) {\n                    if (cache === undefined)\n                        return true;\n                    else if (current.t !== cache.t ||\n                        current.r !== cache.r ||\n                        current.b !== cache.b ||\n                        current.l !== cache.l)\n                        return true;\n                    return false;\n                }\n\n                \n                //==== Shortcuts ====//\n\n                /**\n                 * jQuery type method shortcut.\n                 */\n                function type(obj) {\n                    return COMPATIBILITY.type(obj);\n                }\n\n                /**\n                 * jQuery extend method shortcut.\n                 */\n                function extend() {\n                    return FRAMEWORK.extend.apply(this, arguments);\n                }\n\n                /**\n                 * jQuery addClass method shortcut.\n                 */\n                function addClass(el, classes) {\n                    return _frameworkProto.addClass.call(el, classes);\n                }\n\n                /**\n                 * jQuery removeClass method shortcut.\n                 */\n                function removeClass(el, classes) {\n                    return _frameworkProto.removeClass.call(el, classes);\n                }\n\n                /**\n                 * jQuery remove method shortcut.\n                 */\n                function remove(el) {\n                    return _frameworkProto.remove.call(el);\n                }\n\n                /**\n                 * Finds the first child element with the given selector of the given element.\n                 * @param el The root element from which the selector shall be valid.\n                 * @param selector The selector of the searched element.\n                 * @returns {*} The first element which is a child of the given element and matches the givens selector.\n                 */\n                function findFirst(el, selector) {\n                    return _frameworkProto.find.call(el, selector).eq(0);\n                }\n\n\n                //==== API ====//\n\n                /**\n                 * Puts the instance to sleep. It wont respond to any changes in the DOM and won't update. Scrollbar Interactivity is also disabled as well as the resize handle.\n                 * This behavior can be reset by calling the update method.\n                 */\n                _base.sleep = function () {\n                    _isSleeping = true;\n                };\n\n                /**\n                 * Updates the plugin and DOM to the current options.\n                 * This method should only be called if a update is 100% required.\n                 * @param force True if every property shall be updated and the cache shall be ignored.\n                 * !INTERNAL USAGE! : force can be a string \"auto\", \"auto+\" or \"zoom\" too\n                 * if this is the case then before a real update the content size and host element attributes gets checked, and if they changed only then the update method will be called.\n                 */\n                _base.update = function (force) {\n                    var attrsChanged;\n                    var contentSizeC;\n                    var isString = type(force) == TYPES.s;\n                    var imgElementSelector = 'img';\n                    var imgElementLoadEvent = 'load';\n                    var isPlus = isString && force.slice(-1) == '+';\n                    if(isString) {\n                        if (force.indexOf(_strAuto) === 0) {\n                            attrsChanged = meaningfulAttrsChanged();\n                            contentSizeC = updateAutoContentSizeChanged();\n                            if (attrsChanged || contentSizeC || isPlus)\n                                update(false, contentSizeC, false, isPlus);\n                        }\n                        else if (force === 'zoom')\n                            update(true, true);\n                    }\n                    else {\n                        force = _isSleeping || force;\n                        _isSleeping = false;\n                        update(false, false, force, true);\n                    }\n                    if(!_isTextarea) {\n                        _contentElement.find(imgElementSelector).each(function(i, el) {\n                            var index = COMPATIBILITY.inA(el, _imgs);\n                            if (index === -1)\n                                FRAMEWORK(el).off(imgElementLoadEvent, imgOnLoad).on(imgElementLoadEvent, imgOnLoad);\n                        });\n                    }\n                };\n\n                /**\n                 Gets or sets the current options. The update method will be called automatically if new options were set.\n                 * @param newOptions If new options are given, then the new options will be set, if new options aren't given (undefined or a not a plain object) then the current options will be returned.\n                 * @param value If new options is a property path string, then this value will be used to set the option to which the property path string leads.\n                 * @returns {*}\n                 */\n                _base.options = function (newOptions, value) {\n                    //return current options if newOptions are undefined or empty\n                    if (FRAMEWORK.isEmptyObject(newOptions) || !FRAMEWORK.isPlainObject(newOptions)) {\n                        if (type(newOptions) == TYPES.s) {\n                            if (arguments.length > 1) {\n                                var option = { };\n                                setObjectPropVal(option, newOptions, value);\n                                setOptions(option);\n                                update();\n                                return;\n                            }\n                            else\n                                return getObjectPropVal(_currentOptions, newOptions);\n                        }\n                        else\n                            return _currentOptions;\n                    }\n                    setOptions(newOptions);\n                    var isSleepingTmp = _isSleeping || false;\n                    _isSleeping = false;\n                    update();\n                    _isSleeping = isSleepingTmp;\n                };\n\n                /**\n                 * Restore the DOM, disconnects all observers, remove all resize observers and destroy all methods.\n                 */\n                _base.destroy = function () {\n                    _destroyed = true;\n\n                    //remove this instance from auto update loop\n                    autoUpdateLoop.remove(_base);\n                    \n                    //disconnect all mutation observers\n                    disconnectMutationObservers();\n                    \n                    //remove all resize observers\n                    removeResizeObserver(_sizeObserverElement);\n                    if (_sizeAutoObserverAdded)\n                        removeResizeObserver(_sizeAutoObserverElement);\n\n                    //remove all extensions\n                    for(var extName in _extensions)\n                        _base.removeExt(extName);\n\n                    //remove all events from host element\n                    setupHostMouseTouchEvents(true);\n                    \n                    //remove all events from structure\n                    setupStructureEvents(true);\n                    \n                    //remove all helper / detection elements\n                    if (_contentGlueElement)\n                        remove(_contentGlueElement);\n                    if (_contentArrangeElement)\n                        remove(_contentArrangeElement);\n                    if (_sizeAutoObserverAdded)\n                        remove(_sizeAutoObserverElement);\n\n                    //remove all generated DOM\n                    setupScrollbarsDOM(true);\n                    setupScrollbarCornerDOM(true);\n                    setupStructureDOM(true);\n                    \n                    //remove all generated image load events\n                    for(var i = 0; i < _imgs[LEXICON.l]; i++)\n                        FRAMEWORK(_imgs[i]).off('load', imgOnLoad);\n                    _imgs = undefined;\n\n                    //remove this instance from the instances list\n                    INSTANCES(pluginTargetElement, 0);\n                    dispatchCallback(\"onDestroyed\");\n\n                    //remove all properties and methods\n                    for (var property in _base)\n                        delete _base[property];\n                    _base = undefined;\n                };\n\n                /**\n                 * Scrolls to a given position or element.\n                 * @param coordinates\n                 * 1. Can be \"coordinates\" which looks like:\n                 *    { x : ?, y : ? } OR          Object with x and y properties\n                 *    { left : ?, top : ? } OR     Object with left and top properties\n                 *    { l : ?, t : ? } OR          Object with l and t properties\n                 *    [ ?, ? ] OR                  Array where the first two element are the coordinates (first is x, second is y)\n                 *    ?                            A single value which stays for both axis\n                 *    A value can be a number, a string or a calculation.\n                 *\n                 *    Operators:\n                 *    [NONE]  The current scroll will be overwritten by the value.\n                 *    '+='    The value will be added to the current scroll offset\n                 *    '-='    The value will be subtracted from the current scroll offset\n                 *    '*='    The current scroll wil be multiplicated by the value.\n                 *    '/='    The current scroll wil be divided by the value.\n                 *\n                 *    Units:\n                 *    [NONE]  The value is the final scroll amount.                   final = (value * 1)\n                 *    'px'    Same as none\n                 *    '%'     The value is dependent on the current scroll value.     final = ((currentScrollValue / 100) * value)\n                 *    'vw'    The value is multiplicated by the viewport width.       final = (value * viewportWidth)\n                 *    'vh'    The value is multiplicated by the viewport height.      final = (value * viewportHeight)\n                 *\n                 *    example final values:\n                 *    200, '200px', '50%', '1vw', '1vh', '+=200', '/=1vw', '*=2px', '-=5vh', '+=33%', '+= 50% - 2px', '-= 1vw - 50%'\n                 *\n                 * 2. Can be a HTML or jQuery element:\n                 *    The final scroll offset is the offset (without margin) of the given HTML / jQuery element.\n                 *\n                 * 3. Can be a object with a HTML or jQuery element with additional settings:\n                 *    {\n                 *      el : [HTMLElement, jQuery element],             MUST be specified, else this object isn't valid.\n                 *      scroll : [string, array, object],               Default value is 'always'.\n                 *      block : [string, array, object],                Default value is 'begin'.\n                 *      margin : [number, boolean, array, object]       Default value is false.\n                 *    }\n                 *\n                 *    Possible scroll settings are:\n                 *    'always'      Scrolls always.\n                 *    'ifneeded'    Scrolls only if the element isnt fully in view.\n                 *    'never'       Scrolls never.\n                 *\n                 *    Possible block settings are:\n                 *    'begin'   Both axis shall be docked to the \"begin\" edge. - The element will be docked to the top and left edge of the viewport.\n                 *    'end'     Both axis shall be docked to the \"end\" edge. - The element will be docked to the bottom and right edge of the viewport. (If direction is RTL to the bottom and left edge.)\n                 *    'center'  Both axis shall be docked to \"center\". - The element will be centered in the viewport.\n                 *    'nearest' The element will be docked to the nearest edge(s).\n                 *\n                 *    Possible margin settings are: -- The actual margin of the element wont be affect, this option affects only the final scroll offset.\n                 *    [BOOLEAN]                                         If true the css margin of the element will be used, if false no margin will be used.\n                 *    [NUMBER]                                          The margin will be used for all edges.\n                 *\n                 * @param duration The duration of the scroll animation, OR a jQuery animation configuration object.\n                 * @param easing The animation easing.\n                 * @param complete The animation complete callback.\n                 * @returns {{\n                 *   position: {x: number, y: number},\n                 *   ratio: {x: number, y: number},\n                 *   max: {x: number, y: number},\n                 *   handleOffset: {x: number, y: number},\n                 *   handleLength: {x: number, y: number},\n                 *   handleLengthRatio: {x: number, y: number}, t\n                 *   rackLength: {x: number, y: number},\n                 *   isRTL: boolean,\n                 *   isRTLNormalized: boolean\n                 *  }}\n                 */\n                _base.scroll = function (coordinates, duration, easing, complete) {\n                    if (arguments.length === 0 || coordinates === undefined) {\n                        var infoX = _scrollHorizontalInfo;\n                        var infoY = _scrollVerticalInfo;\n                        var normalizeInvert = _normalizeRTLCache && _isRTL && _rtlScrollBehavior.i;\n                        var normalizeNegate = _normalizeRTLCache && _isRTL && _rtlScrollBehavior.n;\n                        var scrollX = infoX.cs;\n                        var scrollXRatio = infoX.csr;\n                        var maxScrollX = infoX.ms;\n                        scrollXRatio = normalizeInvert ? 1 - scrollXRatio : scrollXRatio;\n                        scrollX = normalizeInvert ? maxScrollX - scrollX : scrollX;\n                        scrollX *= normalizeNegate ? -1 : 1;\n                        maxScrollX *= normalizeNegate ? -1 : 1;\n                        \n                        return {\n                            /**\n                             * @deprecated\n                             */\n                            x: {\n                                position: scrollX,\n                                ratio: scrollXRatio,\n                                max: maxScrollX,\n                                handleOffset: infoX.ho,\n                                handleLength: infoX.hl,\n                                handleLengthRatio: infoX.hlr,\n                                trackLength: infoX.tl,\n                                isRTL: _isRTL,\n                                isRTLNormalized: _normalizeRTLCache\n                            },\n                            /**\n                             * @deprecated\n                             */\n                            y: {\n                                position: infoY.cs,\n                                ratio: infoY.csr,\n                                max: infoY.ms,\n                                handleOffset: infoY.ho,\n                                handleLength: infoY.hl,\n                                handleLengthRatio: infoY.hlr,\n                                trackLength: infoY.tl\n                            },\n\n                            position : {\n                                x : scrollX,\n                                y : infoY.cs\n                            },\n                            ratio : {\n                                x : scrollXRatio,\n                                y : infoY.csr\n                            },\n                            max : {\n                                x : maxScrollX,\n                                y : infoY.ms\n                            },\n                            handleOffset : {\n                                x : infoX.ho,\n                                y : infoY.ho\n                            },\n                            handleLength : {\n                                x : infoX.hl,\n                                y : infoY.hl\n                            },\n                            handleLengthRatio : {\n                                x : infoX.hlr,\n                                y : infoY.hlr\n                            },\n                            trackLength : {\n                                x : infoX.tl,\n                                y : infoY.tl\n                            },\n                            isRTL: _isRTL,\n                            isRTLNormalized: _normalizeRTLCache\n                        };\n                    }\n\n                    var normalizeRTL = _normalizeRTLCache;\n                    var coordinatesXAxisProps = [_strX, _strLeft, 'l'];\n                    var coordinatesYAxisProps = [_strY, _strTop, 't'];\n                    var coordinatesOperators = ['+=', '-=', '*=', '/='];\n                    var durationIsObject = type(duration) == TYPES.o;\n                    var completeCallback = durationIsObject ? duration.complete : complete;\n                    var i;\n                    var finalScroll = { };\n                    var specialEasing = {};\n                    var doScrollLeft;\n                    var doScrollTop;\n                    var animationOptions;\n                    var strEnd = 'end';\n                    var strBegin = 'begin';\n                    var strCenter = 'center';\n                    var strNearest = 'nearest';\n                    var strAlways = 'always';\n                    var strNever = 'never';\n                    var strIfNeeded = 'ifneeded';\n                    var strLength = LEXICON.l;\n                    var settingsAxis;\n                    var settingsScroll;\n                    var settingsBlock;\n                    var settingsMargin;\n                    var finalElement;\n                    var elementObjSettingsAxisValues = [_strX, _strY, 'xy', 'yx'];\n                    var elementObjSettingsBlockValues = [strBegin, strEnd, strCenter, strNearest];\n                    var elementObjSettingsScrollValues = [strAlways, strNever, strIfNeeded];\n                    var coordinatesIsElementObj = coordinates.hasOwnProperty('el');\n                    var possibleElement = coordinatesIsElementObj ? coordinates.el : coordinates;\n                    var possibleElementIsJQuery = possibleElement instanceof FRAMEWORK || JQUERY ? possibleElement instanceof JQUERY : false;\n                    var possibleElementIsHTMLElement = possibleElementIsJQuery ? false : isHTMLElement(possibleElement);\n                    var proxyCompleteCallback = type(completeCallback) != TYPES.f ? undefined : function() { \n                        if(doScrollLeft)\n                            refreshScrollbarHandleOffset(true);\n                        if(doScrollTop)\n                            refreshScrollbarHandleOffset(false);\n                        completeCallback();\n                    };\n                    var checkSettingsStringValue = function (currValue, allowedValues) {\n                        for (i = 0; i < allowedValues[strLength]; i++) {\n                            if (currValue === allowedValues[i])\n                                return true;\n                        }\n                        return false;\n                    };\n                    var getRawScroll = function (isX, coordinates) {\n                        var coordinateProps = isX ? coordinatesXAxisProps : coordinatesYAxisProps;\n                        coordinates = type(coordinates) == TYPES.s || type(coordinates) == TYPES.n ? [ coordinates, coordinates ] : coordinates;\n\n                        if (type(coordinates) == TYPES.a)\n                            return isX ? coordinates[0] : coordinates[1];\n                        else if (type(coordinates) == TYPES.o) {\n                            normalizeRTL = type(coordinates.n) == TYPES.b ? coordinates.n : normalizeRTL;\n                            for (i = 0; i < coordinateProps[strLength]; i++)\n                                if (coordinateProps[i] in coordinates)\n                                    return coordinates[coordinateProps[i]];\n                        }\n                    };\n                    var getFinalScroll = function (isX, rawScroll) {\n                        var isString = type(rawScroll) == TYPES.s;\n                        if(isString)\n                            _base.update(_strAuto + '+');\n                        var operator;\n                        var amount;\n                        var scrollInfo = isX ? _scrollHorizontalInfo : _scrollVerticalInfo;\n                        var currScroll = scrollInfo.cs;\n                        var maxScroll = scrollInfo.ms;\n                        var mult = ' * ';\n                        var finalValue;\n                        var isRTLisX = _isRTL && isX;\n                        var normalizeShortcuts = isRTLisX && _rtlScrollBehavior.n && !normalizeRTL;\n                        var strReplace = 'replace';\n                        var evalFunc = eval;\n                        if (isString) {\n                            //check operator\n                            if (rawScroll[strLength] > 2) {\n                                var possibleOperator = rawScroll.substr(0, 2);\n                                for (i = 0; i < coordinatesOperators[strLength]; i++) {\n                                    if (possibleOperator === coordinatesOperators[i]) {\n                                        operator = coordinatesOperators[i];\n                                        break;\n                                    }\n                                }\n                            }\n\n                            //calculate units and shortcuts\n                            rawScroll = operator !== undefined ? rawScroll.substr(2) : rawScroll;\n                            rawScroll = rawScroll[strReplace](/min/g, 0); //'min' = 0%\n                            rawScroll = rawScroll[strReplace](/</g, 0);   //'<'   = 0%\n                            rawScroll = rawScroll[strReplace](/max/g, (normalizeShortcuts ? '-' : _strEmpty) + _strHundredPercent);    //'max' = 100%\n                            rawScroll = rawScroll[strReplace](/>/g, (normalizeShortcuts ? '-' : _strEmpty) + _strHundredPercent);      //'>'   = 100%\n                            rawScroll = rawScroll[strReplace](/px/g, _strEmpty);\n                            rawScroll = rawScroll[strReplace](/%/g, mult + (maxScroll * (isRTLisX && _rtlScrollBehavior.n ? -1 : 1) / 100.0));\n                            rawScroll = rawScroll[strReplace](/vw/g, mult + _viewportSize.w);\n                            rawScroll = rawScroll[strReplace](/vh/g, mult + _viewportSize.h);\n                            amount = parseToZeroOrNumber(parseToZeroOrNumber(evalFunc(rawScroll), true).toFixed());\n                        }\n                        else {\n                            amount = rawScroll;\n                        }\n\n                        if (amount !== undefined && !isNaN(amount) && type(amount) == TYPES.n) {\n                            var normalizeIsRTLisX = normalizeRTL && isRTLisX;\n                            var operatorCurrScroll = currScroll * (normalizeIsRTLisX && _rtlScrollBehavior.n ? -1 : 1);\n                            var invert = normalizeIsRTLisX && _rtlScrollBehavior.i;\n                            var negate = normalizeIsRTLisX && _rtlScrollBehavior.n;\n                            operatorCurrScroll = invert ? (maxScroll - operatorCurrScroll) : operatorCurrScroll;\n                            switch (operator) {\n                                case '+=':\n                                    finalValue = operatorCurrScroll + amount;\n                                    break;\n                                case '-=':\n                                    finalValue = operatorCurrScroll - amount;\n                                    break;\n                                case '*=':\n                                    finalValue = operatorCurrScroll * amount;\n                                    break;\n                                case '/=':\n                                    finalValue = operatorCurrScroll / amount;\n                                    break;\n                                default:\n                                    finalValue = amount;\n                                    break;\n                            }\n                            finalValue = invert ? maxScroll - finalValue : finalValue;\n                            finalValue *= negate ? -1 : 1;\n                            finalValue = isRTLisX && _rtlScrollBehavior.n ? MATH.min(0, MATH.max(maxScroll, finalValue)) : MATH.max(0, MATH.min(maxScroll, finalValue));\n                        }\n                        return finalValue === currScroll ? undefined : finalValue;\n                    };\n                    var getPerAxisValue = function (value, valueInternalType, defaultValue, allowedValues) {\n                        var resultDefault = [ defaultValue, defaultValue ];\n                        var valueType = type(value);\n                        var valueArrLength;\n                        var valueArrItem;\n\n                        //value can be [ string, or array of two strings ]\n                        if (valueType == valueInternalType) {\n                            value = [value, value];\n                        }\n                        else if (valueType == TYPES.a) {\n                            valueArrLength = value[strLength];\n                            if (valueArrLength > 2 || valueArrLength < 1)\n                                value = resultDefault;\n                            else {\n                                if (valueArrLength === 1)\n                                    value[1] = defaultValue;\n                                for (i = 0; i < valueArrLength; i++) {\n                                    valueArrItem = value[i];\n                                    if (type(valueArrItem) != valueInternalType || !checkSettingsStringValue(valueArrItem, allowedValues)) {\n                                        value = resultDefault;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                        else if (valueType == TYPES.o)\n                            value = [ value[_strX]|| defaultValue, value[_strY] || defaultValue];\n                        else\n                            value = resultDefault;\n                        return { x : value[0], y : value[1] };\n                    };\n                    var generateMargin = function (marginTopRightBottomLeftArray) {\n                        var result = [ ];\n                        var currValue;\n                        var currValueType;\n                        var valueDirections = [ _strTop, _strRight, _strBottom, _strLeft ];\n                        for(i = 0; i < marginTopRightBottomLeftArray[strLength]; i++) {\n                            if(i === valueDirections[strLength])\n                                break;\n                            currValue = marginTopRightBottomLeftArray[i];\n                            currValueType = type(currValue);\n                            if(currValueType == TYPES.b)\n                                result.push(currValue ? parseToZeroOrNumber(finalElement.css(_strMarginMinus + valueDirections[i])) : 0);\n                            else\n                                result.push(currValueType == TYPES.n ? currValue : 0);\n                        }\n                        return result;\n                    };\n    \n                    if (possibleElementIsJQuery || possibleElementIsHTMLElement) {\n                        //get settings\n                        var margin = coordinatesIsElementObj ? coordinates.margin : 0;\n                        var axis = coordinatesIsElementObj ? coordinates.axis : 0;\n                        var scroll = coordinatesIsElementObj ? coordinates.scroll : 0;\n                        var block = coordinatesIsElementObj ? coordinates.block : 0;\n                        var marginDefault = [ 0, 0, 0, 0 ];\n                        var marginType = type(margin);\n                        var marginLength;\n                        finalElement = possibleElementIsJQuery ? possibleElement : FRAMEWORK(possibleElement);\n                        if (finalElement[strLength] === 0)\n                            return;\n\n                        _base.update(_strAuto + '+');\n                        \n                        //margin can be [ boolean, number, array of 2, array of 4, object ]\n                        if (marginType == TYPES.n || marginType == TYPES.b)\n                            margin = generateMargin([margin, margin, margin, margin]);\n                        else if (marginType == TYPES.a) {\n                            marginLength = margin[strLength];\n                            if(marginLength === 2)\n                                margin = generateMargin([margin[0], margin[1], margin[0], margin[1]]);\n                            else if(marginLength >= 4)\n                                margin = generateMargin(margin);\n                            else\n                                margin = marginDefault;\n                        }\n                        else if (marginType == TYPES.o)\n                            margin = generateMargin([margin[_strTop], margin[_strRight], margin[_strBottom], margin[_strLeft]]);\n                        else\n                            margin = marginDefault;\n\n                        //block = type(block) === TYPES.b ? block ? [ strNearest, strBegin ] : [ strNearest, strEnd ] : block;\n                        settingsAxis = checkSettingsStringValue(axis, elementObjSettingsAxisValues) ? axis : 'xy';\n                        settingsScroll = getPerAxisValue(scroll, TYPES.s, strAlways, elementObjSettingsScrollValues);\n                        settingsBlock = getPerAxisValue(block, TYPES.s, strBegin, elementObjSettingsBlockValues);\n                        settingsMargin = margin;\n\n                        var viewportScroll = {\n                            l: _scrollHorizontalInfo.cs,\n                            t: _scrollVerticalInfo.cs\n                        };\n                        // use padding element instead of viewport element because padding element has never padding, margin or position applied.\n                        var viewportOffset = _paddingElement.offset(); \n                        \n                        //get coordinates\n                        var elementOffset = finalElement.offset();\n                        var doNotScroll = {\n                            x : settingsScroll.x == strNever || settingsAxis == _strY,\n                            y : settingsScroll.y == strNever || settingsAxis == _strX\n                        };\n                        elementOffset[_strTop] -= settingsMargin[0];\n                        elementOffset[_strLeft] -= settingsMargin[3];\n                        var elementScrollCoordinates = {\n                            x: MATH.round(elementOffset[_strLeft] - viewportOffset[_strLeft] + viewportScroll.l),\n                            y: MATH.round(elementOffset[_strTop] - viewportOffset[_strTop] + viewportScroll.t)\n                        };\n                        if (_isRTL) {\n                            if (!_rtlScrollBehavior.n && !_rtlScrollBehavior.i)\n                                elementScrollCoordinates.x = MATH.round(viewportOffset[_strLeft] - elementOffset[_strLeft] + viewportScroll.l);\n                            if (_rtlScrollBehavior.n && normalizeRTL)\n                                elementScrollCoordinates.x *= -1;\n                            if (_rtlScrollBehavior.i && normalizeRTL)\n                                elementScrollCoordinates.x = MATH.round(viewportOffset[_strLeft] - elementOffset[_strLeft] + (_scrollHorizontalInfo.ms - viewportScroll.l));\n                        }\n\n                        //measuring is required\n                        if (settingsBlock.x != strBegin || settingsBlock.y != strBegin || settingsScroll.x == strIfNeeded || settingsScroll.y == strIfNeeded || _isRTL) {\n                            var measuringElm = finalElement[0];\n                            var rawElementSize = _supportTransform ? measuringElm.getBoundingClientRect() : { \n                                width : measuringElm[LEXICON.oW],\n                                height : measuringElm[LEXICON.oH]\n                            };\n                            var elementSize = {\n                                w: rawElementSize[_strWidth] + settingsMargin[3] + settingsMargin[1],\n                                h: rawElementSize[_strHeight] + settingsMargin[0] + settingsMargin[2]\n                            };\n                            var finalizeBlock = function(isX) {\n                                var vars = getScrollbarVars(isX);\n                                var wh = vars._wh;\n                                var lt = vars.lt;\n                                var xy = vars.xy;\n                                var blockIsEnd = settingsBlock[xy] == (isX ? _isRTL ? strBegin : strEnd : strEnd);\n                                var blockIsCenter = settingsBlock[xy] == strCenter;\n                                var blockIsNearest = settingsBlock[xy] == strNearest;\n                                var scrollNever = settingsScroll[xy] == strNever;\n                                var scrollIfNeeded = settingsScroll[xy] == strIfNeeded;\n                                var vpSize = _viewportSize[wh];\n                                var vpOffset = viewportOffset[lt];\n                                var elSize = elementSize[wh];\n                                var elOffset = elementOffset[lt];\n                                var divide = blockIsCenter ? 2 : 1;\n                                var elementCenterOffset = elOffset + (elSize / 2);\n                                var viewportCenterOffset = vpOffset + (vpSize / 2);\n                                var isInView =\n                                    elSize <= vpSize\n                                    && elOffset >= vpOffset\n                                    && elOffset + elSize <= vpOffset + vpSize;\n\n                                if(scrollNever)\n                                    doNotScroll[xy] = true;\n                                else if(!doNotScroll[xy]) {\n                                    if (blockIsNearest || scrollIfNeeded) {\n                                        doNotScroll[xy] = scrollIfNeeded ? isInView : false;\n                                        blockIsEnd = elSize < vpSize ? elementCenterOffset > viewportCenterOffset : elementCenterOffset < viewportCenterOffset;\n                                    }\n                                    elementScrollCoordinates[xy] -= blockIsEnd || blockIsCenter ? ((vpSize / divide) - (elSize / divide)) * (isX && _isRTL && normalizeRTL ? -1 : 1) : 0;\n                                }\n                            };\n                            finalizeBlock(true);\n                            finalizeBlock(false);\n                        }\n\n                        if (doNotScroll.y)\n                            delete elementScrollCoordinates.y;\n                        if (doNotScroll.x)\n                            delete elementScrollCoordinates.x;\n\n                        coordinates = elementScrollCoordinates;\n                    }\n                    \n                    finalScroll[_strScrollLeft] = getFinalScroll(true, getRawScroll(true, coordinates));\n                    finalScroll[_strScrollTop] = getFinalScroll(false, getRawScroll(false, coordinates));\n                    doScrollLeft = finalScroll[_strScrollLeft] !== undefined;\n                    doScrollTop = finalScroll[_strScrollTop] !== undefined;\n\n                    if ((doScrollLeft || doScrollTop) && (duration > 0 || durationIsObject)) {\n                        if (durationIsObject) {\n                            duration.complete = proxyCompleteCallback;\n                            _viewportElement.animate(finalScroll, duration);\n                        }\n                        else {\n                            animationOptions = {\n                                duration: duration,\n                                complete: proxyCompleteCallback\n                            };\n                            if (type(easing) == TYPES.a || FRAMEWORK.isPlainObject(easing)) {\n                                specialEasing[_strScrollLeft] = easing[0] || easing.x;\n                                specialEasing[_strScrollTop] = easing[1] || easing.y;\n                                animationOptions.specialEasing = specialEasing;\n                            }\n                            else {\n                                animationOptions.easing = easing;\n                            }\n                            _viewportElement.animate(finalScroll, animationOptions);\n                        }\n                    }\n                    else {\n                        if (doScrollLeft)\n                            _viewportElement[_strScrollLeft](finalScroll[_strScrollLeft]);\n                        if (doScrollTop)\n                            _viewportElement[_strScrollTop](finalScroll[_strScrollTop]);\n                    }\n                };\n\n                /**\n                 * Stops all scroll animations.\n                 * @returns {*} The current OverlayScrollbars instance (for chaining).\n                 */\n                _base.scrollStop = function (param1, param2, param3) {\n                    _viewportElement.stop(param1, param2, param3);\n                    return _base;\n                };\n\n                /**\n                 * Returns all relevant elements.\n                 * @param elementName The name of the element which shall be returned.\n                 * @returns {{target: *, host: *, padding: *, viewport: *, content: *, scrollbarHorizontal: {scrollbar: *, track: *, handle: *}, scrollbarVertical: {scrollbar: *, track: *, handle: *}, scrollbarCorner: *} | *}\n                 */\n                _base.getElements = function (elementName) {\n                    var obj = {\n                        target: _targetElement[0],\n                        host: _hostElement[0],\n                        padding: _paddingElement[0],\n                        viewport: _viewportElement[0],\n                        content: _contentElement[0],\n                        scrollbarHorizontal: {\n                            scrollbar: _scrollbarHorizontalElement[0],\n                            track: _scrollbarHorizontalTrackElement[0],\n                            handle: _scrollbarHorizontalHandleElement[0]\n                        },\n                        scrollbarVertical: {\n                            scrollbar: _scrollbarVerticalElement[0],\n                            track: _scrollbarVerticalTrackElement[0],\n                            handle: _scrollbarVerticalHandleElement[0]\n                        },\n                        scrollbarCorner: _scrollbarCornerElement[0]\n                    };\n                    return type(elementName) == TYPES.s ? getObjectPropVal(obj, elementName) : obj;\n                };\n\n                /**\n                 * Returns a object which describes the current state of this instance.\n                 * @param stateProperty A specific property from the state object which shall be returned.\n                 * @returns {{widthAuto, heightAuto, overflowAmount, hideOverflow, hasOverflow, contentScrollSize, viewportSize, hostSize, autoUpdate} | *}\n                 */\n                _base.getState = function (stateProperty) {\n                    var prepare = function (obj) {\n                        if (!FRAMEWORK.isPlainObject(obj))\n                            return obj;\n                        var extended = extend(true, {}, obj);\n                        var changePropertyName = function (from, to) {\n                            if (extended.hasOwnProperty(from)) {\n                                extended[to] = extended[from];\n                                delete extended[from];\n                            }\n                        };\n                        changePropertyName('w', _strWidth); //change w to width\n                        changePropertyName('h', _strHeight); //change h to height\n                        delete extended.c; //delete c (the 'changed' prop)\n                        return extended;\n                    };\n                    var obj = {\n                        sleeping: prepare(_isSleeping) || false,\n                        autoUpdate: prepare(!_mutationObserversConnected),\n                        widthAuto: prepare(_widthAutoCache),\n                        heightAuto: prepare(_heightAutoCache),\n                        padding: prepare(_cssPaddingCache),\n                        overflowAmount: prepare(_overflowAmountCache),\n                        hideOverflow: prepare(_hideOverflowCache),\n                        hasOverflow: prepare(_hasOverflowCache),\n                        contentScrollSize: prepare(_contentScrollSizeCache),\n                        viewportSize: prepare(_viewportSize),\n                        hostSize: prepare(_hostSizeCache),\n                        documentMixed : prepare(_documentMixed)\n                    };\n                    return type(stateProperty) == TYPES.s ? getObjectPropVal(obj, stateProperty) : obj;\n                };\n\n                /**\n                 * Gets all or specific extension instance.\n                 * @param extName The name of the extension from which the instance shall be got.\n                 * @returns {{}} The instance of the extension with the given name or undefined if the instance couldn't be found.\n                 */\n                _base.ext = function(extName) {\n                    var result;\n                    var privateMethods = _extensionsPrivateMethods.split(' ');\n                    var i = 0;\n                    if(type(extName) == TYPES.s) {\n                        if(_extensions.hasOwnProperty(extName)) {\n                            result = extend(true, {}, _extensions[extName]);\n                            for (; i < privateMethods.length; i++)\n                                delete result[privateMethods[i]];\n                        }\n                    }\n                    else {\n                        result = { };\n                        for(i in _extensions)\n                            result[i] = extend(true, { }, _base.ext(i));\n                    }\n                    return result;\n                };\n\n                /**\n                 * Adds a extension to this instance.\n                 * @param extName The name of the extension which shall be added.\n                 * @param extensionOptions The extension options which shall be used.\n                 * @returns {{}} The instance of the added extension or undefined if the extension couldn't be added properly.\n                 */\n                _base.addExt = function(extName, extensionOptions) {\n                    var registeredExtensionObj = window[PLUGINNAME].extension(extName);\n                    var instance;\n                    var instanceAdded;\n                    var instanceContract;\n                    var contractResult;\n                    var contractFulfilled = true;\n                    if(registeredExtensionObj) {\n                        if(!_extensions.hasOwnProperty(extName)) {\n                            instance = registeredExtensionObj.extensionFactory.call(_base,\n                                extend(true, { }, registeredExtensionObj.defaultOptions),\n                                FRAMEWORK,\n                                COMPATIBILITY);\n\n                            if (instance) {\n                                instanceContract = instance.contract;\n                                if (type(instanceContract) == TYPES.f) {\n                                    contractResult = instanceContract(window);\n                                    contractFulfilled = type(contractResult) == TYPES.b ? contractResult : contractFulfilled;\n                                }\n                                if(contractFulfilled) {\n                                    _extensions[extName] = instance;\n                                    instanceAdded = instance.added;\n                                    if(type(instanceAdded) == TYPES.f)\n                                        instanceAdded(extensionOptions);\n\n                                    return _base.ext(extName);\n                                }\n                            }\n                        }\n                        else\n                            return _base.ext(extName);\n                    }\n                    else\n                        console.warn(\"A extension with the name \\\"\" + extName + \"\\\" isn't registered.\");\n                };\n\n                /**\n                 * Removes a extension from this instance.\n                 * @param extName The name of the extension which shall be removed.\n                 * @returns {boolean} True if the extension was removed, false otherwise e.g. if the extension wasn't added before.\n                 */\n                _base.removeExt = function(extName) {\n                    var instance = _extensions[extName];\n                    var instanceRemoved;\n                    if(instance) {\n                        delete _extensions[extName];\n\n                        instanceRemoved = instance.removed;\n                        if(type(instanceRemoved) == TYPES.f)\n                            instanceRemoved();\n\n                        return true;\n                    }\n                    return false;\n                };\n\n                /**\n                 * Constructs the plugin.\n                 * @param targetElement The element to which the plugin shall be applied.\n                 * @param options The initial options of the plugin.\n                 * @param extensions The extension(s) which shall be added right after the initialization.\n                 * @returns {boolean} True if the plugin was successfully initialized, false otherwise.\n                 */\n                function construct(targetElement, options, extensions) {\n                    _defaultOptions = globals.defaultOptions;\n                    _nativeScrollbarStyling = globals.nativeScrollbarStyling;\n                    _nativeScrollbarSize = extend(true, {}, globals.nativeScrollbarSize);\n                    _nativeScrollbarIsOverlaid = extend(true, {}, globals.nativeScrollbarIsOverlaid);\n                    _overlayScrollbarDummySize = extend(true, {}, globals.overlayScrollbarDummySize);\n                    _rtlScrollBehavior = extend(true, {}, globals.rtlScrollBehavior);\n\n                    //parse & set options but don't update\n                    setOptions(extend(true, { }, _defaultOptions, _pluginsOptions.v(options, _pluginsOptions.t, true)));\n\n                    //check if the plugin hasn't to be initialized\n                    if (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.x && !_currentPreparedOptions.nativeScrollbarsOverlaid.initialize) {\n                        dispatchCallback(\"onInitializationWithdrawn\");\n                        return false;\n                    }\n\n                    _cssCalc = globals.cssCalc;\n                    _msieVersion = globals.msie;\n                    _autoUpdateRecommended = globals.autoUpdateRecommended;\n                    _supportTransition = globals.supportTransition;\n                    _supportTransform = globals.supportTransform;\n                    _supportPassiveEvents = globals.supportPassiveEvents;\n                    _supportResizeObserver = globals.supportResizeObserver;\n                    _supportMutationObserver = globals.supportMutationObserver;\n                    _restrictedMeasuring = globals.restrictedMeasuring;\n                    _documentElement = FRAMEWORK(targetElement.ownerDocument);\n                    _windowElement = FRAMEWORK(_documentElement[0].defaultView || _documentElement[0].parentWindow);\n                    _htmlElement = findFirst(_documentElement, 'html');\n                    _bodyElement =  findFirst(_htmlElement, 'body');\n                    _targetElement = FRAMEWORK(targetElement);\n                    _isTextarea = _targetElement.is('textarea');\n                    _isBody = _targetElement.is('body');\n                    _documentMixed = _documentElement[0] !== document;\n\n                    var initBodyScroll;\n                    if (_isBody) {\n                        initBodyScroll = {};\n                        initBodyScroll.l = MATH.max(_targetElement[_strScrollLeft](), _htmlElement[_strScrollLeft](), _windowElement[_strScrollLeft]());\n                        initBodyScroll.t = MATH.max(_targetElement[_strScrollTop](), _htmlElement[_strScrollTop](), _windowElement[_strScrollTop]());\n                    }\n\n                    //build OverlayScrollbars DOM and Events\n                    setupStructureDOM();\n                    setupStructureEvents();\n\n                    //build Scrollbars DOM and Events\n                    setupScrollbarsDOM();\n                    setupScrollbarEvents(true);\n                    setupScrollbarEvents(false);\n                    \n                    //build Scrollbar Corner DOM and Events\n                    setupScrollbarCornerDOM();\n                    setupScrollbarCornerEvents();\n\n                    //create mutation observers\n                    createMutationObservers();\n\n                    if(_isBody) {\n                        //apply the body scroll to handle it right in the update method\n                        _viewportElement[_strScrollLeft](initBodyScroll.l)[_strScrollTop](initBodyScroll.t);\n                        \n                        //set the focus on the viewport element so you dont have to click on the page to use keyboard keys (up / down / space) for scrolling\n                        if(document.activeElement == targetElement && _viewportElement[0].focus) {\n                            //set a tabindex to make the viewportElement focusable\n                            _viewportElement.attr('tabindex', '-1');\n                            _viewportElement[0].focus();\n                            /* the tabindex has to be removed due to;\n                             * If you set the tabindex attribute on an <div>, then its child content cannot be scrolled with the arrow keys unless you set tabindex on the content, too\n                             * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\n                             */\n                            _viewportElement.one(_strMouseTouchDownEvent, function() { \n                                _viewportElement.removeAttr('tabindex'); \n                            });\n                        }\n                    }\n                    \n                    //build resize observer for the host element\n                    addResizeObserver(_sizeObserverElement, hostOnResized);\n\n                    //update for the first time\n                    hostOnResized(); //initialize cache for host size\n                    _base.update(_strAuto); //initialize cache for content\n\n                    //the plugin is initialized now!\n                    _initialized = true;\n                    dispatchCallback(\"onInitialized\");\n                    \n                    //call all callbacks which would fire before the initialized was complete\n                    FRAMEWORK.each(_callbacksInitQeueue, function(index, value) { dispatchCallback(value.n, value.a); });\n                    _callbacksInitQeueue = [ ];\n                    \n                    //add extensions\n                    if(type(extensions) == TYPES.s)\n                        extensions = [ extensions ];\n                    if(COMPATIBILITY.isA(extensions))\n                        FRAMEWORK.each(extensions, function (index, value) {_base.addExt(value); });\n                    else if(FRAMEWORK.isPlainObject(extensions))\n                        FRAMEWORK.each(extensions, function (key, value) { _base.addExt(key, value); });\n\n                    //add the transition class for transitions AFTER the first update & AFTER the applied extensions (for preventing unwanted transitions)\n                    setTimeout(function () {\n                        if (_supportTransition && !_destroyed)\n                            addClass(_hostElement, _classNameHostTransition);\n                    }, 333);\n  \n                    return _initialized;\n                }\n\n                if (construct(pluginTargetElement, options, extensions)) {\n                    INSTANCES(pluginTargetElement, _base);\n                    return _base;\n                }\n                _base = undefined;\n            }\n\n            /**\n             * Initializes a new OverlayScrollbarsInstance object or changes options if already initialized or returns the current instance.\n             * @param pluginTargetElements The elements to which the Plugin shall be initialized.\n             * @param options The custom options with which the plugin shall be initialized.\n             * @param extensions The extension(s) which shall be added right after initialization.\n             * @returns {*}\n             */\n            window[PLUGINNAME] = function(pluginTargetElements, options, extensions) {\n                if(arguments.length === 0)\n                    return this;\n                \n                var arr = [ ];\n                var optsIsPlainObj = FRAMEWORK.isPlainObject(options);\n                var inst;\n                var result;\n                \n                //pluginTargetElements is null or undefined\n                if(!pluginTargetElements)\n                    return optsIsPlainObj || !options ? result : arr;\n                    \n                /*\n                   pluginTargetElements will be converted to:\n                   1. A jQueryElement Array\n                   2. A HTMLElement Array\n                   3. A Array with a single HTML Element\n                   so pluginTargetElements is always a array.\n                */\n                pluginTargetElements = pluginTargetElements.length != undefined ? pluginTargetElements : [ pluginTargetElements[0] || pluginTargetElements ];\n                initOverlayScrollbarsStatics();\n\n                if(pluginTargetElements.length > 0) {\n                    if(optsIsPlainObj) {\n                        FRAMEWORK.each(pluginTargetElements, function (i, v) {\n                            inst = v;\n                            if(inst !== undefined)\n                                arr.push(OverlayScrollbarsInstance(inst, options, extensions, _pluginsGlobals, _pluginsAutoUpdateLoop));\n                        });\n                    }\n                    else {\n                        FRAMEWORK.each(pluginTargetElements, function(i, v) {\n                            inst = INSTANCES(v);\n                            if((options === '!' && inst instanceof window[PLUGINNAME]) || (COMPATIBILITY.type(options) == TYPES.f && options(v, inst)))\n                                arr.push(inst);\n                            else if(options === undefined)\n                                arr.push(inst);\n                        });\n                    }\n                    result = arr.length === 1 ? arr[0] : arr;\n                }\n                return result;\n            };\n\n            /**\n             * Returns a object which contains global information about the plugin and each instance of it.\n             * The returned object is just a copy, that means that changes to the returned object won't have any effect to the original object.\n             */\n            window[PLUGINNAME].globals = function () {\n                initOverlayScrollbarsStatics();\n                var globals = FRAMEWORK.extend(true, { }, _pluginsGlobals);\n                delete globals['msie'];\n                return globals;\n            };\n\n            /**\n             * Gets or Sets the default options for each new plugin initialization.\n             * @param newDefaultOptions The object with which the default options shall be extended.\n             */\n            window[PLUGINNAME].defaultOptions = function(newDefaultOptions) {\n                initOverlayScrollbarsStatics();\n                var currDefaultOptions = _pluginsGlobals.defaultOptions;\n                if(newDefaultOptions === undefined)\n                    return FRAMEWORK.extend(true, { }, currDefaultOptions);\n\n                //set the new default options\n                _pluginsGlobals.defaultOptions = FRAMEWORK.extend(true, { }, currDefaultOptions , _pluginsOptions.v(newDefaultOptions, _pluginsOptions.t, true));\n            };\n\n            /**\n             * Registers, Unregisters or returns a extension.\n             * Register: Pass the name and the extension. (defaultOptions is optional)\n             * Unregister: Pass the name and anything except a function as extension parameter.\n             * Get extension: Pass the name of the extension which shall be got.\n             * Get all extensions: Pass no arguments.\n             * @param extensionName The name of the extension which shall be registered, unregistered or returned.\n             * @param extension A function which generates the instance of the extension or anything other to remove a already registered extension.\n             * @param defaultOptions The default options which shall be used for the registered extension.\n             */\n            window[PLUGINNAME].extension = function(extensionName, extension, defaultOptions) {\n                var extNameTypeString = COMPATIBILITY.type(extensionName) == TYPES.s;\n                var argLen = arguments[LEXICON.l];\n                var i = 0;\n                if(argLen < 1 || !extNameTypeString) {\n                    //return a copy of all extension objects\n                    return FRAMEWORK.extend(true, { length : _pluginsExtensions[LEXICON.l] }, _pluginsExtensions);\n                }\n                else if(extNameTypeString) {\n                    if(COMPATIBILITY.type(extension) == TYPES.f) {\n                        //register extension\n                        _pluginsExtensions.push({\n                            name : extensionName,\n                            extensionFactory : extension,\n                            defaultOptions : defaultOptions\n                        });\n                    }\n                    else {\n                        for(; i < _pluginsExtensions[LEXICON.l]; i++) {\n                            if (_pluginsExtensions[i].name === extensionName) {\n                                if(argLen > 1)\n                                    _pluginsExtensions.splice(i, 1); //remove extension\n                                else\n                                    return FRAMEWORK.extend(true, { }, _pluginsExtensions[i]); //return extension with the given name\n                            }\n                        }\n                    }\n                }\n            };\n\n            return window[PLUGINNAME];\n        })();\n\n        if(JQUERY && JQUERY.fn) {\n            /**\n             * The jQuery initialization interface.\n             * @param options The initial options for the construction of the plugin. To initialize the plugin, this option has to be a object! If it isn't a object, the instance(s) are returned and the plugin wont be initialized.\n             * @param extensions The extension(s) which shall be added right after initialization.\n             * @returns {*} After initialization it returns the jQuery element array, else it returns the instance(s) of the elements which are selected.\n             */\n            JQUERY.fn.overlayScrollbars = function (options, extensions) {\n                var _elements = this;\n                if(JQUERY.isPlainObject(options)) {\n                    JQUERY.each(_elements, function() { PLUGIN(this, options, extensions); });\n                    return _elements;\n                }\n                else\n                    return PLUGIN(_elements, options);\n            };\n        }\n        return PLUGIN;\n    }\n));\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/overlayscrollbars/js/OverlayScrollbars.js\n// module id = G/FH\n// module chunks = 21","/*\r\n * FileName: 滚动条美化\r\n * File Created: Friday, 14th September 2018 2:56:30 pm\r\n * Doc: https://kingsora.github.io/OverlayScrollbars/#!documentation/options\r\n * Author: LiuBing\r\n */\r\n<template>\r\n  <div class=\"scroll-bar\"\r\n    :id=\"scrollBarId\"\r\n    style=\"height: 100%\">\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport OverlayScrollbars from 'overlayscrollbars'\r\nimport 'overlayscrollbars/css/OverlayScrollbars.min.css'\r\nexport default {\r\n  name: 'ScrollBar',\r\n  props: {\r\n    //Dom Id,可省略\r\n    id: {\r\n      type: String\r\n    },\r\n    //滚动条主体，os-theme-dark：适用于白色背景，os-theme-light：适用于暗色背景\r\n    theme: {\r\n      type: String,\r\n      default: 'os-theme-dark'\r\n    },\r\n    //插件初始化完成后调用，无参数\r\n    onInitialized: {\r\n      type: Function\r\n    },\r\n    //插件销毁后调用，无参数\r\n    onDestroyed: {\r\n      type: Function\r\n    },\r\n    //开始滚动后触发，参数scroll\r\n    onScrollStart: {\r\n      type: Function\r\n    },\r\n    //每次滚动都会被触发，参数scroll\r\n    onScroll: {\r\n      type: Function\r\n    },\r\n    //停止滚动后触发，参数scroll\r\n    onScrollStop: {\r\n      type: Function\r\n    },\r\n    //溢出更改后触发，如内容变小，参数scroll\r\n    onOverflowChanged: {\r\n      type: Function\r\n    },\r\n    //溢出更改后触发，如内容变大，参数scroll\r\n    onOverflowAmountChanged: {\r\n      type: Function\r\n    },\r\n    //方向改变后被触发，参数scroll\r\n    onDirectionChanged: {\r\n      type: Function\r\n    },\r\n    //内容大小更改后触发，参数scroll\r\n    onContentSizeChanged: {\r\n      type: Function\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      scrollBar: null,\r\n      scrollBarId: this.id ? this.id : 'scroll-bar-' + Date.now() + Math.random()\r\n    }\r\n  },\r\n  mounted() {\r\n    this.$nextTick(() => {\r\n      this.initScrollBar()\r\n    })\r\n  },\r\n  methods: {\r\n    initScrollBar() {\r\n      this.scrollBar = OverlayScrollbars(document.getElementById(this.scrollBarId), {\r\n        className: this.theme,\r\n        scrollbars: {\r\n          autoHide: 'leave'\r\n        },\r\n        callbacks: {\r\n          onInitialized: this.onInitialized,\r\n          onDestroyed: this.onDestroyed,\r\n          onScrollStart: this.onScrollStart,\r\n          onScroll: this.onScroll,\r\n          onScrollStop: this.onScrollStop,\r\n          onOverflowChanged: this.onOverflowChanged,\r\n          onOverflowAmountChanged: this.onOverflowAmountChanged,\r\n          onDirectionChanged: this.onDirectionChanged,\r\n          onContentSizeChanged: this.onContentSizeChanged\r\n        }\r\n      })\r\n    },\r\n    update() {\r\n      this.scrollBar.update()\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n<style lang='stylus' scoped>\r\n</style>\n\n\n// WEBPACK FOOTER //\n// src/components/common/scroll-bar/scroll-bar.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"scroll-bar\",staticStyle:{\"height\":\"100%\"},attrs:{\"id\":_vm.scrollBarId}},[_vm._t(\"default\")],2)}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-6923893a\",\"hasScoped\":true,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/components/common/scroll-bar/scroll-bar.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-6923893a\\\",\\\"scoped\\\":true,\\\"hasInlineConfig\\\":false}!stylus-loader?{\\\"sourceMap\\\":true}!../../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./scroll-bar.vue\")\n}\nvar normalizeComponent = require(\"!../../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./scroll-bar.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./scroll-bar.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-6923893a\\\",\\\"hasScoped\\\":true,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./scroll-bar.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-6923893a\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/common/scroll-bar/scroll-bar.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}